// Automatically generated by MockGen. DO NOT EDIT!
// Source: payments/models (interfaces: Repo)

package fixtures

import (
	gomock "github.com/golang/mock/gomock"
	models "payments/models"
)

// Mock of Repo interface
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *_MockRepoRecorder
}

// Recorder for MockRepo (not exported)
type _MockRepoRecorder struct {
	mock *MockRepo
}

func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &_MockRepoRecorder{mock}
	return mock
}

func (_m *MockRepo) EXPECT() *_MockRepoRecorder {
	return _m.recorder
}

func (_m *MockRepo) CanCreateOrder(_param0 uint) (bool, error) {
	ret := _m.ctrl.Call(_m, "CanCreateOrder", _param0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRepoRecorder) CanCreateOrder(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CanCreateOrder", arg0)
}

func (_m *MockRepo) CreatePay(_param0 *models.Payment) error {
	ret := _m.ctrl.Call(_m, "CreatePay", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepoRecorder) CreatePay(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePay", arg0)
}

func (_m *MockRepo) CreateSess(_param0 *models.Session) error {
	ret := _m.ctrl.Call(_m, "CreateSess", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepoRecorder) CreateSess(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSess", arg0)
}

func (_m *MockRepo) FinishedSessionsForPayID(_param0 uint) (int, error) {
	ret := _m.ctrl.Call(_m, "FinishedSessionsForPayID", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRepoRecorder) FinishedSessionsForPayID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FinishedSessionsForPayID", arg0)
}

func (_m *MockRepo) GetPayByID(_param0 uint) (*models.Payment, error) {
	ret := _m.ctrl.Call(_m, "GetPayByID", _param0)
	ret0, _ := ret[0].(*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRepoRecorder) GetPayByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPayByID", arg0)
}

func (_m *MockRepo) GetSessByUID(_param0 string) (*models.Session, error) {
	ret := _m.ctrl.Call(_m, "GetSessByUID", _param0)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRepoRecorder) GetSessByUID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSessByUID", arg0)
}

func (_m *MockRepo) GetUnfinished(_param0 string) ([]models.Session, error) {
	ret := _m.ctrl.Call(_m, "GetUnfinished", _param0)
	ret0, _ := ret[0].([]models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRepoRecorder) GetUnfinished(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUnfinished", arg0)
}

func (_m *MockRepo) SavePay(_param0 *models.Payment) error {
	ret := _m.ctrl.Call(_m, "SavePay", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepoRecorder) SavePay(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SavePay", arg0)
}

func (_m *MockRepo) SaveSess(_param0 *models.Session) error {
	ret := _m.ctrl.Call(_m, "SaveSess", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepoRecorder) SaveSess(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SaveSess", arg0)
}
