// Automatically generated by MockGen. DO NOT EDIT!
// Source: chat/models (interfaces: ConversationRepository)

package fixtures

import (
	models "chat/models"
	gomock "github.com/golang/mock/gomock"
)

// Mock of ConversationRepository interface
type MockConversationRepository struct {
	ctrl     *gomock.Controller
	recorder *_MockConversationRepositoryRecorder
}

// Recorder for MockConversationRepository (not exported)
type _MockConversationRepositoryRecorder struct {
	mock *MockConversationRepository
}

func NewMockConversationRepository(ctrl *gomock.Controller) *MockConversationRepository {
	mock := &MockConversationRepository{ctrl: ctrl}
	mock.recorder = &_MockConversationRepositoryRecorder{mock}
	return mock
}

func (_m *MockConversationRepository) EXPECT() *_MockConversationRepositoryRecorder {
	return _m.recorder
}

func (_m *MockConversationRepository) AddMembers(_param0 *models.Conversation, _param1 ...*models.Member) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AddMembers", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConversationRepositoryRecorder) AddMembers(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddMembers", _s...)
}

func (_m *MockConversationRepository) AddMessages(_param0 *models.Conversation, _param1 ...*models.Message) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AddMessages", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConversationRepositoryRecorder) AddMessages(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddMessages", _s...)
}

func (_m *MockConversationRepository) Create(_param0 *models.Conversation) error {
	ret := _m.ctrl.Call(_m, "Create", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConversationRepositoryRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockConversationRepository) GetByID(_param0 uint) (*models.Conversation, error) {
	ret := _m.ctrl.Call(_m, "GetByID", _param0)
	ret0, _ := ret[0].(*models.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConversationRepositoryRecorder) GetByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetByID", arg0)
}

func (_m *MockConversationRepository) GetByIDs(_param0 []uint64) (models.Conversations, error) {
	ret := _m.ctrl.Call(_m, "GetByIDs", _param0)
	ret0, _ := ret[0].(models.Conversations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConversationRepositoryRecorder) GetByIDs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetByIDs", arg0)
}

func (_m *MockConversationRepository) GetByUserID(_param0 uint) ([]*models.Conversation, error) {
	ret := _m.ctrl.Call(_m, "GetByUserID", _param0)
	ret0, _ := ret[0].([]*models.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConversationRepositoryRecorder) GetByUserID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetByUserID", arg0)
}

func (_m *MockConversationRepository) GetHistory(_param0 *models.Conversation, _param1 uint64, _param2 uint64, _param3 bool) ([]*models.Message, error) {
	ret := _m.ctrl.Call(_m, "GetHistory", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConversationRepositoryRecorder) GetHistory(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHistory", arg0, arg1, arg2, arg3)
}

func (_m *MockConversationRepository) GetMember(_param0 *models.Conversation, _param1 uint64) (*models.Member, error) {
	ret := _m.ctrl.Call(_m, "GetMember", _param0, _param1)
	ret0, _ := ret[0].(*models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConversationRepositoryRecorder) GetMember(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMember", arg0, arg1)
}

func (_m *MockConversationRepository) GetTotalUnread(_param0 uint64) (uint64, error) {
	ret := _m.ctrl.Call(_m, "GetTotalUnread", _param0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConversationRepositoryRecorder) GetTotalUnread(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTotalUnread", arg0)
}

func (_m *MockConversationRepository) GetUnread(_param0 []uint64, _param1 uint64) (map[uint]uint64, error) {
	ret := _m.ctrl.Call(_m, "GetUnread", _param0, _param1)
	ret0, _ := ret[0].(map[uint]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConversationRepositoryRecorder) GetUnread(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUnread", arg0, arg1)
}

func (_m *MockConversationRepository) MarkAsReaded(_param0 *models.Member, _param1 uint64) error {
	ret := _m.ctrl.Call(_m, "MarkAsReaded", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConversationRepositoryRecorder) MarkAsReaded(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarkAsReaded", arg0, arg1)
}

func (_m *MockConversationRepository) RemoveMembers(_param0 *models.Conversation, _param1 ...uint64) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RemoveMembers", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConversationRepositoryRecorder) RemoveMembers(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveMembers", _s...)
}

func (_m *MockConversationRepository) TotalMessages(_param0 *models.Conversation) uint64 {
	ret := _m.ctrl.Call(_m, "TotalMessages", _param0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockConversationRepositoryRecorder) TotalMessages(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TotalMessages", arg0)
}

func (_m *MockConversationRepository) UpdateMessage(_param0 uint64, _param1 []*models.MessagePart) (*models.Message, error) {
	ret := _m.ctrl.Call(_m, "UpdateMessage", _param0, _param1)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConversationRepositoryRecorder) UpdateMessage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMessage", arg0, arg1)
}
