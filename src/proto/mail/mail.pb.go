// Code generated by protoc-gen-go.
// source: mail.proto
// DO NOT EDIT!

/*
Package mail is a generated protocol buffer package.

It is generated from these files:
	mail.proto

It has these top-level messages:
	MessageRequest
	StatusReply
	StatusRequest
*/
package mail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageRequest struct {
	From    string   `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Subject string   `protobuf:"bytes,2,opt,name=subject" json:"subject,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	To      []string `protobuf:"bytes,4,rep,name=to" json:"to,omitempty"`
}

func (m *MessageRequest) Reset()                    { *m = MessageRequest{} }
func (m *MessageRequest) String() string            { return proto.CompactTextString(m) }
func (*MessageRequest) ProtoMessage()               {}
func (*MessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StatusReply struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Email unique id
	Id    uint64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Error string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *StatusReply) Reset()                    { *m = StatusReply{} }
func (m *StatusReply) String() string            { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()               {}
func (*StatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StatusRequest struct {
	// Email unique id
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*MessageRequest)(nil), "mail.MessageRequest")
	proto.RegisterType((*StatusReply)(nil), "mail.StatusReply")
	proto.RegisterType((*StatusRequest)(nil), "mail.StatusRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for MailService service

type MailServiceClient interface {
	// Send sends email
	Send(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*StatusReply, error)
	// Status returns email status
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
}

type mailServiceClient struct {
	cc *grpc.ClientConn
}

func NewMailServiceClient(cc *grpc.ClientConn) MailServiceClient {
	return &mailServiceClient{cc}
}

func (c *mailServiceClient) Send(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/mail.MailService/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/mail.MailService/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MailService service

type MailServiceServer interface {
	// Send sends email
	Send(context.Context, *MessageRequest) (*StatusReply, error)
	// Status returns email status
	Status(context.Context, *StatusRequest) (*StatusReply, error)
}

func RegisterMailServiceServer(s *grpc.Server, srv MailServiceServer) {
	s.RegisterService(&_MailService_serviceDesc, srv)
}

func _MailService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mail.MailService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServiceServer).Send(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mail.MailService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MailService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mail.MailService",
	HandlerType: (*MailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MailService_Send_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _MailService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("mail.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x50, 0xcb, 0x4e, 0x85, 0x30,
	0x10, 0x95, 0x7b, 0x2b, 0xc6, 0x21, 0x92, 0x38, 0x1a, 0xd3, 0xb8, 0x91, 0x74, 0xe5, 0x8a, 0x44,
	0xfc, 0x0c, 0xc3, 0xa6, 0x7c, 0x01, 0xe0, 0xa8, 0x18, 0xb0, 0xd8, 0x16, 0x13, 0xff, 0xde, 0xd2,
	0x96, 0x44, 0x16, 0x77, 0x77, 0x1e, 0x39, 0x67, 0x1e, 0x00, 0x53, 0x3b, 0x8c, 0xe5, 0xac, 0x95,
	0x55, 0xc8, 0x56, 0x2c, 0x3e, 0x20, 0xaf, 0xc9, 0x98, 0xf6, 0x9d, 0x24, 0x7d, 0x2f, 0x64, 0x2c,
	0x22, 0xb0, 0x37, 0xad, 0x26, 0x9e, 0x14, 0xc9, 0xe3, 0xa5, 0xf4, 0x18, 0x39, 0x5c, 0x98, 0xa5,
	0xfb, 0xa4, 0xde, 0xf2, 0x83, 0x97, 0x37, 0xba, 0x3a, 0x53, 0xc8, 0xf3, 0x63, 0x70, 0x22, 0xc5,
	0x1c, 0x0e, 0x56, 0x71, 0x56, 0x1c, 0x9d, 0xe8, 0x90, 0x78, 0x81, 0xac, 0xb1, 0xad, 0x5d, 0x8c,
	0xa4, 0x79, 0xfc, 0xc5, 0x3b, 0x48, 0x8d, 0xa7, 0x71, 0x50, 0x64, 0x6b, 0x6c, 0x78, 0xf5, 0x53,
	0x98, 0x74, 0x08, 0x6f, 0xe1, 0x9c, 0xb4, 0x56, 0x3a, 0xd6, 0x07, 0x22, 0x1e, 0xe0, 0x6a, 0x2b,
	0x0b, 0x5b, 0x87, 0x58, 0xb2, 0xc5, 0x2a, 0x0b, 0x59, 0xed, 0xee, 0x6b, 0x48, 0xff, 0x0c, 0x3d,
	0xe1, 0x13, 0xb0, 0x86, 0xbe, 0x5c, 0x5b, 0xe9, 0x3f, 0xb0, 0x3f, 0xf9, 0xfe, 0x3a, 0xa8, 0xff,
	0xd6, 0x13, 0x67, 0x58, 0x41, 0x1a, 0x04, 0xbc, 0xd9, 0xdb, 0xa7, 0x33, 0x5d, 0xea, 0x5f, 0xfb,
	0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0x10, 0xfc, 0xe4, 0x16, 0x68, 0x01, 0x00, 0x00,
}
