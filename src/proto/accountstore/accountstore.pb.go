// Code generated by protoc-gen-gogo.
// source: accountstore.proto
// DO NOT EDIT!

/*
	Package accountstore is a generated protocol buffer package.

	It is generated from these files:
		accountstore.proto

	It has these top-level messages:
		Account
		AddRequest
		AddReply
		ConfirmRequest
		ConfirmReply
		MarkInvalidRequest
		MarkInvalidReply
		SearchRequest
		SearchReply
*/
package accountstore

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Role int32

const (
	// real user, probably shop
	Role_User      Role = 0
	Role_Savetrend Role = 1
	Role_Wantit    Role = 2
	// minor bots
	Role_AuxPrivate Role = 3
	Role_AuxPublic  Role = 4
)

var Role_name = map[int32]string{
	0: "User",
	1: "Savetrend",
	2: "Wantit",
	3: "AuxPrivate",
	4: "AuxPublic",
}
var Role_value = map[string]int32{
	"User":       0,
	"Savetrend":  1,
	"Wantit":     2,
	"AuxPrivate": 3,
	"AuxPublic":  4,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptorAccountstore, []int{0} }

type Account struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername,proto3" json:"instagram_username,omitempty"`
	InstagramId       uint64 `protobuf:"varint,2,opt,name=instagram_id,json=instagramId,proto3" json:"instagram_id,omitempty"`
	Cookie            string `protobuf:"bytes,3,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Valid             bool   `protobuf:"varint,4,opt,name=valid,proto3" json:"valid,omitempty"`
	Role              Role   `protobuf:"varint,5,opt,name=role,proto3,enum=accountstore.Role" json:"role,omitempty"`
	OwnerId           uint64 `protobuf:"varint,6,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	CreatedAt         int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedAtAgo      uint64 `protobuf:"varint,8,opt,name=created_at_ago,json=createdAtAgo,proto3" json:"created_at_ago,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptorAccountstore, []int{0} }

type AddRequest struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername,proto3" json:"instagram_username,omitempty"`
	Password          string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Role              Role   `protobuf:"varint,3,opt,name=role,proto3,enum=accountstore.Role" json:"role,omitempty"`
	OwnerId           uint64 `protobuf:"varint,4,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	PreferEmail       bool   `protobuf:"varint,5,opt,name=prefer_email,json=preferEmail,proto3" json:"prefer_email,omitempty"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (m *AddRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptorAccountstore, []int{1} }

type AddReply struct {
	NeedCode bool `protobuf:"varint,2,opt,name=needCode,proto3" json:"needCode,omitempty"`
}

func (m *AddReply) Reset()                    { *m = AddReply{} }
func (m *AddReply) String() string            { return proto.CompactTextString(m) }
func (*AddReply) ProtoMessage()               {}
func (*AddReply) Descriptor() ([]byte, []int) { return fileDescriptorAccountstore, []int{2} }

type ConfirmRequest struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername,proto3" json:"instagram_username,omitempty"`
	InstagramId       uint64 `protobuf:"varint,2,opt,name=instagram_id,json=instagramId,proto3" json:"instagram_id,omitempty"`
	Code              string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *ConfirmRequest) Reset()                    { *m = ConfirmRequest{} }
func (m *ConfirmRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfirmRequest) ProtoMessage()               {}
func (*ConfirmRequest) Descriptor() ([]byte, []int) { return fileDescriptorAccountstore, []int{3} }

type ConfirmReply struct {
}

func (m *ConfirmReply) Reset()                    { *m = ConfirmReply{} }
func (m *ConfirmReply) String() string            { return proto.CompactTextString(m) }
func (*ConfirmReply) ProtoMessage()               {}
func (*ConfirmReply) Descriptor() ([]byte, []int) { return fileDescriptorAccountstore, []int{4} }

type MarkInvalidRequest struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername,proto3" json:"instagram_username,omitempty"`
	InstagramId       uint64 `protobuf:"varint,2,opt,name=instagram_id,json=instagramId,proto3" json:"instagram_id,omitempty"`
	Reason            string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *MarkInvalidRequest) Reset()                    { *m = MarkInvalidRequest{} }
func (m *MarkInvalidRequest) String() string            { return proto.CompactTextString(m) }
func (*MarkInvalidRequest) ProtoMessage()               {}
func (*MarkInvalidRequest) Descriptor() ([]byte, []int) { return fileDescriptorAccountstore, []int{5} }

type MarkInvalidReply struct {
}

func (m *MarkInvalidReply) Reset()                    { *m = MarkInvalidReply{} }
func (m *MarkInvalidReply) String() string            { return proto.CompactTextString(m) }
func (*MarkInvalidReply) ProtoMessage()               {}
func (*MarkInvalidReply) Descriptor() ([]byte, []int) { return fileDescriptorAccountstore, []int{6} }

type SearchRequest struct {
	Roles             []Role `protobuf:"varint,1,rep,packed,name=roles,enum=accountstore.Role" json:"roles,omitempty"`
	IncludeInvalids   bool   `protobuf:"varint,2,opt,name=include_invalids,json=includeInvalids,proto3" json:"include_invalids,omitempty"`
	InstagramUsername string `protobuf:"bytes,3,opt,name=instagram_username,json=instagramUsername,proto3" json:"instagram_username,omitempty"`
	InstagramId       uint64 `protobuf:"varint,4,opt,name=instagram_id,json=instagramId,proto3" json:"instagram_id,omitempty"`
	HidePrivate       bool   `protobuf:"varint,5,opt,name=hide_private,json=hidePrivate,proto3" json:"hide_private,omitempty"`
	OwnerId           uint64 `protobuf:"varint,6,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptorAccountstore, []int{7} }

type SearchReply struct {
	Accounts []*Account `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
}

func (m *SearchReply) Reset()                    { *m = SearchReply{} }
func (m *SearchReply) String() string            { return proto.CompactTextString(m) }
func (*SearchReply) ProtoMessage()               {}
func (*SearchReply) Descriptor() ([]byte, []int) { return fileDescriptorAccountstore, []int{8} }

func (m *SearchReply) GetAccounts() []*Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func init() {
	proto.RegisterType((*Account)(nil), "accountstore.Account")
	proto.RegisterType((*AddRequest)(nil), "accountstore.AddRequest")
	proto.RegisterType((*AddReply)(nil), "accountstore.AddReply")
	proto.RegisterType((*ConfirmRequest)(nil), "accountstore.ConfirmRequest")
	proto.RegisterType((*ConfirmReply)(nil), "accountstore.ConfirmReply")
	proto.RegisterType((*MarkInvalidRequest)(nil), "accountstore.MarkInvalidRequest")
	proto.RegisterType((*MarkInvalidReply)(nil), "accountstore.MarkInvalidReply")
	proto.RegisterType((*SearchRequest)(nil), "accountstore.SearchRequest")
	proto.RegisterType((*SearchReply)(nil), "accountstore.SearchReply")
	proto.RegisterEnum("accountstore.Role", Role_name, Role_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AccountStoreService service

type AccountStoreServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error)
	Confirm(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmReply, error)
	MarkInvalid(ctx context.Context, in *MarkInvalidRequest, opts ...grpc.CallOption) (*MarkInvalidReply, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error)
}

type accountStoreServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountStoreServiceClient(cc *grpc.ClientConn) AccountStoreServiceClient {
	return &accountStoreServiceClient{cc}
}

func (c *accountStoreServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountStoreServiceClient) Confirm(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmReply, error) {
	out := new(ConfirmReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/Confirm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountStoreServiceClient) MarkInvalid(ctx context.Context, in *MarkInvalidRequest, opts ...grpc.CallOption) (*MarkInvalidReply, error) {
	out := new(MarkInvalidReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/MarkInvalid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountStoreServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountStoreService service

type AccountStoreServiceServer interface {
	Add(context.Context, *AddRequest) (*AddReply, error)
	Confirm(context.Context, *ConfirmRequest) (*ConfirmReply, error)
	MarkInvalid(context.Context, *MarkInvalidRequest) (*MarkInvalidReply, error)
	Search(context.Context, *SearchRequest) (*SearchReply, error)
}

func RegisterAccountStoreServiceServer(s *grpc.Server, srv AccountStoreServiceServer) {
	s.RegisterService(&_AccountStoreService_serviceDesc, srv)
}

func _AccountStoreService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountStoreService_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).Confirm(ctx, req.(*ConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountStoreService_MarkInvalid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkInvalidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).MarkInvalid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/MarkInvalid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).MarkInvalid(ctx, req.(*MarkInvalidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountStoreService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountStoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "accountstore.AccountStoreService",
	HandlerType: (*AccountStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _AccountStoreService_Add_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _AccountStoreService_Confirm_Handler,
		},
		{
			MethodName: "MarkInvalid",
			Handler:    _AccountStoreService_MarkInvalid_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _AccountStoreService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accountstore.proto",
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InstagramUsername) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(len(m.InstagramUsername)))
		i += copy(dAtA[i:], m.InstagramUsername)
	}
	if m.InstagramId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(m.InstagramId))
	}
	if len(m.Cookie) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(len(m.Cookie)))
		i += copy(dAtA[i:], m.Cookie)
	}
	if m.Valid {
		dAtA[i] = 0x20
		i++
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Role != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(m.Role))
	}
	if m.OwnerId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(m.OwnerId))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(m.CreatedAt))
	}
	if m.CreatedAtAgo != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(m.CreatedAtAgo))
	}
	return i, nil
}

func (m *AddRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InstagramUsername) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(len(m.InstagramUsername)))
		i += copy(dAtA[i:], m.InstagramUsername)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if m.Role != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(m.Role))
	}
	if m.OwnerId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(m.OwnerId))
	}
	if m.PreferEmail {
		dAtA[i] = 0x28
		i++
		if m.PreferEmail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AddReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NeedCode {
		dAtA[i] = 0x10
		i++
		if m.NeedCode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InstagramUsername) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(len(m.InstagramUsername)))
		i += copy(dAtA[i:], m.InstagramUsername)
	}
	if m.InstagramId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(m.InstagramId))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *ConfirmReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MarkInvalidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkInvalidRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InstagramUsername) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(len(m.InstagramUsername)))
		i += copy(dAtA[i:], m.InstagramUsername)
	}
	if m.InstagramId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(m.InstagramId))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *MarkInvalidReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkInvalidReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SearchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		dAtA2 := make([]byte, len(m.Roles)*10)
		var j1 int
		for _, num := range m.Roles {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.IncludeInvalids {
		dAtA[i] = 0x10
		i++
		if m.IncludeInvalids {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.InstagramUsername) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(len(m.InstagramUsername)))
		i += copy(dAtA[i:], m.InstagramUsername)
	}
	if m.InstagramId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(m.InstagramId))
	}
	if m.HidePrivate {
		dAtA[i] = 0x28
		i++
		if m.HidePrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OwnerId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAccountstore(dAtA, i, uint64(m.OwnerId))
	}
	return i, nil
}

func (m *SearchReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, msg := range m.Accounts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAccountstore(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Accountstore(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Accountstore(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAccountstore(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Account) Size() (n int) {
	var l int
	_ = l
	l = len(m.InstagramUsername)
	if l > 0 {
		n += 1 + l + sovAccountstore(uint64(l))
	}
	if m.InstagramId != 0 {
		n += 1 + sovAccountstore(uint64(m.InstagramId))
	}
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovAccountstore(uint64(l))
	}
	if m.Valid {
		n += 2
	}
	if m.Role != 0 {
		n += 1 + sovAccountstore(uint64(m.Role))
	}
	if m.OwnerId != 0 {
		n += 1 + sovAccountstore(uint64(m.OwnerId))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovAccountstore(uint64(m.CreatedAt))
	}
	if m.CreatedAtAgo != 0 {
		n += 1 + sovAccountstore(uint64(m.CreatedAtAgo))
	}
	return n
}

func (m *AddRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.InstagramUsername)
	if l > 0 {
		n += 1 + l + sovAccountstore(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAccountstore(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovAccountstore(uint64(m.Role))
	}
	if m.OwnerId != 0 {
		n += 1 + sovAccountstore(uint64(m.OwnerId))
	}
	if m.PreferEmail {
		n += 2
	}
	return n
}

func (m *AddReply) Size() (n int) {
	var l int
	_ = l
	if m.NeedCode {
		n += 2
	}
	return n
}

func (m *ConfirmRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.InstagramUsername)
	if l > 0 {
		n += 1 + l + sovAccountstore(uint64(l))
	}
	if m.InstagramId != 0 {
		n += 1 + sovAccountstore(uint64(m.InstagramId))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovAccountstore(uint64(l))
	}
	return n
}

func (m *ConfirmReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MarkInvalidRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.InstagramUsername)
	if l > 0 {
		n += 1 + l + sovAccountstore(uint64(l))
	}
	if m.InstagramId != 0 {
		n += 1 + sovAccountstore(uint64(m.InstagramId))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovAccountstore(uint64(l))
	}
	return n
}

func (m *MarkInvalidReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SearchRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovAccountstore(uint64(e))
		}
		n += 1 + sovAccountstore(uint64(l)) + l
	}
	if m.IncludeInvalids {
		n += 2
	}
	l = len(m.InstagramUsername)
	if l > 0 {
		n += 1 + l + sovAccountstore(uint64(l))
	}
	if m.InstagramId != 0 {
		n += 1 + sovAccountstore(uint64(m.InstagramId))
	}
	if m.HidePrivate {
		n += 2
	}
	if m.OwnerId != 0 {
		n += 1 + sovAccountstore(uint64(m.OwnerId))
	}
	return n
}

func (m *SearchReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovAccountstore(uint64(l))
		}
	}
	return n
}

func sovAccountstore(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAccountstore(x uint64) (n int) {
	return sovAccountstore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstagramUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstagramUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstagramId", wireType)
			}
			m.InstagramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstagramId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (Role(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtAgo", wireType)
			}
			m.CreatedAtAgo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtAgo |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAccountstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccountstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstagramUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstagramUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (Role(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferEmail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreferEmail = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAccountstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccountstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedCode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedCode = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAccountstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccountstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstagramUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstagramUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstagramId", wireType)
			}
			m.InstagramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstagramId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccountstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAccountstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccountstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkInvalidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkInvalidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkInvalidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstagramUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstagramUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstagramId", wireType)
			}
			m.InstagramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstagramId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccountstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkInvalidReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkInvalidReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkInvalidReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAccountstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccountstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAccountstore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAccountstore
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Role
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAccountstore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Role(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else if wireType == 0 {
				var v Role
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAccountstore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Role(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeInvalids", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeInvalids = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstagramUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstagramUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstagramId", wireType)
			}
			m.InstagramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstagramId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HidePrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HidePrivate = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			m.OwnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAccountstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccountstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccountstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &Account{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccountstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccountstore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccountstore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAccountstore
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAccountstore
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAccountstore(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAccountstore = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccountstore   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("accountstore.proto", fileDescriptorAccountstore) }

var fileDescriptorAccountstore = []byte{
	// 640 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x63, 0x37, 0x71, 0x26, 0x69, 0x30, 0x03, 0x54, 0x6e, 0x80, 0xc8, 0xb5, 0x50, 0x15,
	0x90, 0xa8, 0x44, 0x39, 0x71, 0x23, 0xad, 0x7a, 0x28, 0x12, 0x12, 0x38, 0x42, 0x1c, 0xa3, 0xad,
	0x77, 0xda, 0x5a, 0x75, 0xbc, 0x61, 0xed, 0xa4, 0xf4, 0xc2, 0x33, 0xc0, 0x8b, 0xf0, 0x06, 0xdc,
	0x39, 0xf2, 0x08, 0xa8, 0xbc, 0x02, 0x0f, 0x80, 0x76, 0xed, 0xb8, 0x35, 0xfd, 0x51, 0x8b, 0xc4,
	0x2d, 0xf3, 0xcd, 0x97, 0x9d, 0xef, 0x9b, 0xfd, 0xd6, 0x80, 0x2c, 0x0c, 0xc5, 0x34, 0xc9, 0xd2,
	0x4c, 0x48, 0x5a, 0x9f, 0x48, 0x91, 0x09, 0x6c, 0x9f, 0xc5, 0xfc, 0x2f, 0x35, 0x68, 0x0c, 0x72,
	0x00, 0x9f, 0x02, 0x46, 0x49, 0x9a, 0xb1, 0x7d, 0xc9, 0xc6, 0xa3, 0x69, 0x4a, 0x32, 0x61, 0x63,
	0x72, 0x0d, 0xcf, 0xe8, 0x37, 0x83, 0xdb, 0x65, 0xe7, 0x5d, 0xd1, 0xc0, 0x55, 0x68, 0x9f, 0xd2,
	0x23, 0xee, 0xd6, 0x3c, 0xa3, 0x6f, 0x05, 0xad, 0x12, 0xdb, 0xe1, 0xb8, 0x0c, 0xf5, 0x50, 0x88,
	0xc3, 0x88, 0x5c, 0x53, 0x9f, 0x52, 0x54, 0x78, 0x17, 0x16, 0x67, 0x2c, 0x8e, 0xb8, 0x6b, 0x79,
	0x46, 0xdf, 0x0e, 0xf2, 0x02, 0xd7, 0xc0, 0x92, 0x22, 0x26, 0x77, 0xd1, 0x33, 0xfa, 0x9d, 0x0d,
	0x5c, 0xaf, 0x88, 0x0f, 0x44, 0x4c, 0x81, 0xee, 0xe3, 0x0a, 0xd8, 0xe2, 0x28, 0x21, 0xa9, 0x86,
	0xd6, 0xf5, 0xd0, 0x86, 0xae, 0x77, 0x38, 0x3e, 0x04, 0x08, 0x25, 0xb1, 0x8c, 0xf8, 0x88, 0x65,
	0x6e, 0xc3, 0x33, 0xfa, 0x66, 0xd0, 0x2c, 0x90, 0x41, 0x86, 0x8f, 0xa0, 0x73, 0xda, 0x1e, 0xb1,
	0x7d, 0xe1, 0xda, 0xfa, 0xff, 0xed, 0x92, 0x32, 0xd8, 0x17, 0xfe, 0x37, 0x03, 0x60, 0xc0, 0x79,
	0x40, 0x1f, 0xa6, 0x94, 0xde, 0x78, 0x2d, 0x5d, 0xb0, 0x27, 0x2c, 0x4d, 0x8f, 0x84, 0xcc, 0x57,
	0xd2, 0x0c, 0xca, 0xba, 0x74, 0x68, 0xde, 0xc0, 0xa1, 0x55, 0x75, 0xb8, 0x0a, 0xed, 0x89, 0xa4,
	0x3d, 0x92, 0x23, 0x1a, 0xb3, 0x28, 0xd6, 0xcb, 0xb2, 0x83, 0x56, 0x8e, 0x6d, 0x2b, 0xc8, 0x5f,
	0x03, 0x5b, 0xcb, 0x9f, 0xc4, 0xc7, 0x4a, 0x4d, 0x42, 0xc4, 0xb7, 0x04, 0x27, 0xad, 0xc6, 0x0e,
	0xca, 0xda, 0x9f, 0x41, 0x67, 0x4b, 0x24, 0x7b, 0x91, 0x1c, 0xff, 0xa3, 0xd5, 0x6b, 0x24, 0x00,
	0xc1, 0x0a, 0xd5, 0xec, 0xfc, 0xfe, 0xf5, 0x6f, 0xbf, 0x03, 0xed, 0x72, 0xee, 0x24, 0x3e, 0xf6,
	0x3f, 0x01, 0xbe, 0x66, 0xf2, 0x70, 0x27, 0xd1, 0x31, 0xf8, 0x7f, 0x5a, 0x96, 0xa1, 0x2e, 0x89,
	0xa5, 0x22, 0x99, 0xa7, 0x31, 0xaf, 0x7c, 0x04, 0xa7, 0x32, 0x5f, 0x69, 0xfa, 0x6d, 0xc0, 0xd2,
	0x90, 0x98, 0x0c, 0x0f, 0xe6, 0x7a, 0xfa, 0xb0, 0xa8, 0xee, 0x26, 0x75, 0x0d, 0xcf, 0xbc, 0xe4,
	0xf2, 0x72, 0x02, 0x3e, 0x06, 0x27, 0x4a, 0xc2, 0x78, 0xca, 0x69, 0x14, 0xe5, 0x67, 0xa6, 0xc5,
	0xee, 0x6f, 0x15, 0x78, 0x31, 0x2a, 0xbd, 0xc4, 0xa4, 0x79, 0x5d, 0x93, 0xd6, 0x79, 0x93, 0xab,
	0xd0, 0x3e, 0x88, 0x38, 0x8d, 0x26, 0x32, 0x9a, 0xb1, 0x8c, 0xe6, 0xf9, 0x50, 0xd8, 0x9b, 0x1c,
	0xba, 0xe2, 0xfd, 0xf8, 0x2f, 0xa1, 0x35, 0x77, 0xad, 0xd2, 0xf3, 0x0c, 0xec, 0xb9, 0x4b, 0x6d,
	0xbb, 0xb5, 0x71, 0xaf, 0x6a, 0xbb, 0xf8, 0x74, 0x04, 0x25, 0xed, 0xc9, 0x2b, 0xb0, 0xd4, 0x2e,
	0xd0, 0x06, 0x4b, 0xc9, 0x76, 0x16, 0x70, 0x09, 0x9a, 0x43, 0x36, 0xa3, 0x4c, 0x52, 0xc2, 0x1d,
	0x03, 0x01, 0xea, 0xef, 0x59, 0x92, 0x45, 0x99, 0x53, 0xc3, 0x0e, 0xc0, 0x60, 0xfa, 0xb1, 0xd0,
	0xe5, 0x98, 0x8a, 0xaa, 0xea, 0xe9, 0x6e, 0x1c, 0x85, 0x8e, 0xb5, 0xf1, 0xb5, 0x06, 0x77, 0x8a,
	0x09, 0x43, 0x35, 0x6e, 0x48, 0x72, 0x16, 0x85, 0x84, 0x2f, 0xc0, 0x1c, 0x70, 0x8e, 0xee, 0x5f,
	0x5a, 0xca, 0x27, 0xdb, 0x5d, 0xbe, 0xa0, 0xa3, 0x6e, 0x75, 0x01, 0xb7, 0xa1, 0x51, 0x64, 0x0f,
	0x1f, 0x54, 0x49, 0xd5, 0xa7, 0xd0, 0xed, 0x5e, 0xd2, 0xcd, 0x8f, 0x79, 0x0b, 0xad, 0x33, 0x91,
	0x41, 0xaf, 0x4a, 0x3e, 0x9f, 0xe6, 0x6e, 0xef, 0x0a, 0x46, 0x7e, 0xe4, 0x26, 0xd4, 0xf3, 0xd5,
	0xe3, 0xfd, 0x2a, 0xb7, 0x12, 0xc3, 0xee, 0xca, 0xc5, 0x4d, 0x7d, 0xc6, 0xa6, 0xf3, 0xfd, 0xa4,
	0x67, 0xfc, 0x38, 0xe9, 0x19, 0x3f, 0x4f, 0x7a, 0xc6, 0xe7, 0x5f, 0xbd, 0x85, 0xdd, 0xba, 0xfe,
	0xe8, 0x3f, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xf3, 0x0a, 0x06, 0x00, 0x00,
}
