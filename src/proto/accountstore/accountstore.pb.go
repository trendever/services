// Code generated by protoc-gen-go.
// source: accountstore.proto
// DO NOT EDIT!

/*
Package accountstore is a generated protocol buffer package.

It is generated from these files:
	accountstore.proto

It has these top-level messages:
	Account
	AddRequest
	AddReply
	ConfirmRequest
	ConfirmReply
	MarkInvalidRequest
	MarkInvalidReply
	SearchRequest
	SearchReply
	GetRequest
	GetReply
*/
package accountstore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Role int32

const (
	// real user, probably shop
	Role_User      Role = 0
	Role_Savetrend Role = 1
	Role_Wantit    Role = 2
	// minor bots
	Role_AuxPrivate Role = 3
	Role_AuxPublic  Role = 4
)

var Role_name = map[int32]string{
	0: "User",
	1: "Savetrend",
	2: "Wantit",
	3: "AuxPrivate",
	4: "AuxPublic",
}
var Role_value = map[string]int32{
	"User":       0,
	"Savetrend":  1,
	"Wantit":     2,
	"AuxPrivate": 3,
	"AuxPublic":  4,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Account struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	InstagramId       uint64 `protobuf:"varint,2,opt,name=instagram_id,json=instagramId" json:"instagram_id,omitempty"`
	Cookie            string `protobuf:"bytes,3,opt,name=cookie" json:"cookie,omitempty"`
	Valid             bool   `protobuf:"varint,4,opt,name=valid" json:"valid,omitempty"`
	Role              Role   `protobuf:"varint,5,opt,name=role,enum=accountstore.Role" json:"role,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Account) GetInstagramUsername() string {
	if m != nil {
		return m.InstagramUsername
	}
	return ""
}

func (m *Account) GetInstagramId() uint64 {
	if m != nil {
		return m.InstagramId
	}
	return 0
}

func (m *Account) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *Account) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *Account) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_User
}

type AddRequest struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	Password          string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (m *AddRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddRequest) GetInstagramUsername() string {
	if m != nil {
		return m.InstagramUsername
	}
	return ""
}

func (m *AddRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AddReply struct {
	NeedCode bool `protobuf:"varint,2,opt,name=needCode" json:"needCode,omitempty"`
}

func (m *AddReply) Reset()                    { *m = AddReply{} }
func (m *AddReply) String() string            { return proto.CompactTextString(m) }
func (*AddReply) ProtoMessage()               {}
func (*AddReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddReply) GetNeedCode() bool {
	if m != nil {
		return m.NeedCode
	}
	return false
}

type ConfirmRequest struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	InstagramId       uint64 `protobuf:"varint,2,opt,name=instagram_id,json=instagramId" json:"instagram_id,omitempty"`
	Code              string `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
}

func (m *ConfirmRequest) Reset()                    { *m = ConfirmRequest{} }
func (m *ConfirmRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfirmRequest) ProtoMessage()               {}
func (*ConfirmRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConfirmRequest) GetInstagramUsername() string {
	if m != nil {
		return m.InstagramUsername
	}
	return ""
}

func (m *ConfirmRequest) GetInstagramId() uint64 {
	if m != nil {
		return m.InstagramId
	}
	return 0
}

func (m *ConfirmRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type ConfirmReply struct {
}

func (m *ConfirmReply) Reset()                    { *m = ConfirmReply{} }
func (m *ConfirmReply) String() string            { return proto.CompactTextString(m) }
func (*ConfirmReply) ProtoMessage()               {}
func (*ConfirmReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type MarkInvalidRequest struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	InstagramId       uint64 `protobuf:"varint,2,opt,name=instagram_id,json=instagramId" json:"instagram_id,omitempty"`
}

func (m *MarkInvalidRequest) Reset()                    { *m = MarkInvalidRequest{} }
func (m *MarkInvalidRequest) String() string            { return proto.CompactTextString(m) }
func (*MarkInvalidRequest) ProtoMessage()               {}
func (*MarkInvalidRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MarkInvalidRequest) GetInstagramUsername() string {
	if m != nil {
		return m.InstagramUsername
	}
	return ""
}

func (m *MarkInvalidRequest) GetInstagramId() uint64 {
	if m != nil {
		return m.InstagramId
	}
	return 0
}

type MarkInvalidReply struct {
}

func (m *MarkInvalidReply) Reset()                    { *m = MarkInvalidReply{} }
func (m *MarkInvalidReply) String() string            { return proto.CompactTextString(m) }
func (*MarkInvalidReply) ProtoMessage()               {}
func (*MarkInvalidReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type SearchRequest struct {
	Roles           []Role `protobuf:"varint,1,rep,packed,name=roles,enum=accountstore.Role" json:"roles,omitempty"`
	IncludeInvalids bool   `protobuf:"varint,2,opt,name=include_invalids,json=includeInvalids" json:"include_invalids,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SearchRequest) GetRoles() []Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *SearchRequest) GetIncludeInvalids() bool {
	if m != nil {
		return m.IncludeInvalids
	}
	return false
}

type SearchReply struct {
	Accounts []*Account `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
}

func (m *SearchReply) Reset()                    { *m = SearchReply{} }
func (m *SearchReply) String() string            { return proto.CompactTextString(m) }
func (*SearchReply) ProtoMessage()               {}
func (*SearchReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SearchReply) GetAccounts() []*Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type GetRequest struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	InstagramId       uint64 `protobuf:"varint,2,opt,name=instagram_id,json=instagramId" json:"instagram_id,omitempty"`
	HidePrivate       bool   `protobuf:"varint,3,opt,name=hide_private,json=hidePrivate" json:"hide_private,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetRequest) GetInstagramUsername() string {
	if m != nil {
		return m.InstagramUsername
	}
	return ""
}

func (m *GetRequest) GetInstagramId() uint64 {
	if m != nil {
		return m.InstagramId
	}
	return 0
}

func (m *GetRequest) GetHidePrivate() bool {
	if m != nil {
		return m.HidePrivate
	}
	return false
}

type GetReply struct {
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Found   bool     `protobuf:"varint,2,opt,name=found" json:"found,omitempty"`
}

func (m *GetReply) Reset()                    { *m = GetReply{} }
func (m *GetReply) String() string            { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()               {}
func (*GetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetReply) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *GetReply) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func init() {
	proto.RegisterType((*Account)(nil), "accountstore.Account")
	proto.RegisterType((*AddRequest)(nil), "accountstore.AddRequest")
	proto.RegisterType((*AddReply)(nil), "accountstore.AddReply")
	proto.RegisterType((*ConfirmRequest)(nil), "accountstore.ConfirmRequest")
	proto.RegisterType((*ConfirmReply)(nil), "accountstore.ConfirmReply")
	proto.RegisterType((*MarkInvalidRequest)(nil), "accountstore.MarkInvalidRequest")
	proto.RegisterType((*MarkInvalidReply)(nil), "accountstore.MarkInvalidReply")
	proto.RegisterType((*SearchRequest)(nil), "accountstore.SearchRequest")
	proto.RegisterType((*SearchReply)(nil), "accountstore.SearchReply")
	proto.RegisterType((*GetRequest)(nil), "accountstore.GetRequest")
	proto.RegisterType((*GetReply)(nil), "accountstore.GetReply")
	proto.RegisterEnum("accountstore.Role", Role_name, Role_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AccountStoreService service

type AccountStoreServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error)
	Confirm(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmReply, error)
	MarkInvalid(ctx context.Context, in *MarkInvalidRequest, opts ...grpc.CallOption) (*MarkInvalidReply, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
}

type accountStoreServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountStoreServiceClient(cc *grpc.ClientConn) AccountStoreServiceClient {
	return &accountStoreServiceClient{cc}
}

func (c *accountStoreServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountStoreServiceClient) Confirm(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmReply, error) {
	out := new(ConfirmReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/Confirm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountStoreServiceClient) MarkInvalid(ctx context.Context, in *MarkInvalidRequest, opts ...grpc.CallOption) (*MarkInvalidReply, error) {
	out := new(MarkInvalidReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/MarkInvalid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountStoreServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountStoreServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountStoreService service

type AccountStoreServiceServer interface {
	Add(context.Context, *AddRequest) (*AddReply, error)
	Confirm(context.Context, *ConfirmRequest) (*ConfirmReply, error)
	MarkInvalid(context.Context, *MarkInvalidRequest) (*MarkInvalidReply, error)
	Search(context.Context, *SearchRequest) (*SearchReply, error)
	Get(context.Context, *GetRequest) (*GetReply, error)
}

func RegisterAccountStoreServiceServer(s *grpc.Server, srv AccountStoreServiceServer) {
	s.RegisterService(&_AccountStoreService_serviceDesc, srv)
}

func _AccountStoreService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountStoreService_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).Confirm(ctx, req.(*ConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountStoreService_MarkInvalid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkInvalidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).MarkInvalid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/MarkInvalid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).MarkInvalid(ctx, req.(*MarkInvalidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountStoreService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountStoreService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountStoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "accountstore.AccountStoreService",
	HandlerType: (*AccountStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _AccountStoreService_Add_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _AccountStoreService_Confirm_Handler,
		},
		{
			MethodName: "MarkInvalid",
			Handler:    _AccountStoreService_MarkInvalid_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _AccountStoreService_Search_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AccountStoreService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accountstore.proto",
}

func init() { proto.RegisterFile("accountstore.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x54, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0x8d, 0x13, 0x27, 0x71, 0x26, 0x69, 0x3e, 0x7f, 0x03, 0x54, 0xc6, 0x20, 0xe4, 0xfa, 0x50,
	0x05, 0x24, 0x8a, 0x08, 0xa7, 0xde, 0x08, 0x15, 0xaa, 0x8a, 0x84, 0x44, 0x1d, 0xa1, 0x1e, 0xa3,
	0xad, 0x77, 0x43, 0x57, 0x75, 0xbc, 0x61, 0x6d, 0x07, 0x7a, 0xe4, 0x27, 0xf1, 0xb3, 0xf8, 0x17,
	0x68, 0xbd, 0x1b, 0xb7, 0x0e, 0x0d, 0x02, 0xa4, 0xde, 0x32, 0x33, 0x4f, 0xf3, 0x9e, 0xdf, 0xbc,
	0x0d, 0x20, 0x89, 0x63, 0x51, 0xa4, 0x79, 0x96, 0x0b, 0xc9, 0x0e, 0x96, 0x52, 0xe4, 0x02, 0x07,
	0x37, 0x7b, 0xe1, 0x77, 0x0b, 0xba, 0x13, 0xdd, 0xc0, 0xe7, 0x80, 0x3c, 0xcd, 0x72, 0xf2, 0x49,
	0x92, 0xc5, 0xac, 0xc8, 0x98, 0x4c, 0xc9, 0x82, 0x79, 0x56, 0x60, 0x8d, 0x7a, 0xd1, 0xff, 0xd5,
	0xe4, 0xa3, 0x19, 0xe0, 0x1e, 0x0c, 0xae, 0xe1, 0x9c, 0x7a, 0xcd, 0xc0, 0x1a, 0xd9, 0x51, 0xbf,
	0xea, 0x9d, 0x50, 0xdc, 0x85, 0x4e, 0x2c, 0xc4, 0x25, 0x67, 0x5e, 0xab, 0xdc, 0x62, 0x2a, 0xbc,
	0x0f, 0xed, 0x15, 0x49, 0x38, 0xf5, 0xec, 0xc0, 0x1a, 0x39, 0x91, 0x2e, 0x70, 0x1f, 0x6c, 0x29,
	0x12, 0xe6, 0xb5, 0x03, 0x6b, 0x34, 0x1c, 0xe3, 0x41, 0x4d, 0x7c, 0x24, 0x12, 0x16, 0x95, 0xf3,
	0xf0, 0x0c, 0x60, 0x42, 0x69, 0xc4, 0x3e, 0x17, 0x2c, 0xfb, 0x6b, 0xd5, 0x3e, 0x38, 0x4b, 0x92,
	0x65, 0x5f, 0x84, 0xd4, 0x8a, 0x7b, 0x51, 0x55, 0x87, 0xfb, 0xe0, 0x94, 0x8b, 0x97, 0xc9, 0x95,
	0xc2, 0xa5, 0x8c, 0xd1, 0x23, 0x41, 0x59, 0x89, 0x73, 0xa2, 0xaa, 0x0e, 0x57, 0x30, 0x3c, 0x12,
	0xe9, 0x9c, 0xcb, 0xc5, 0x3f, 0x8a, 0xf8, 0x03, 0xeb, 0x10, 0xec, 0x58, 0x71, 0x6b, 0xe3, 0xca,
	0xdf, 0xe1, 0x10, 0x06, 0x15, 0xef, 0x32, 0xb9, 0x0a, 0xe7, 0x80, 0xef, 0x89, 0xbc, 0x3c, 0x49,
	0x4b, 0xff, 0xee, 0x4c, 0x4b, 0x88, 0xe0, 0xd6, 0x78, 0x14, 0x37, 0x85, 0x9d, 0x29, 0x23, 0x32,
	0xbe, 0x58, 0xd3, 0x8e, 0xa0, 0xad, 0xae, 0x93, 0x79, 0x56, 0xd0, 0xda, 0x72, 0x3e, 0x0d, 0xc0,
	0xa7, 0xe0, 0xf2, 0x34, 0x4e, 0x0a, 0xca, 0x66, 0x5c, 0xaf, 0xcc, 0x8c, 0xc5, 0xff, 0x99, 0xbe,
	0x61, 0xca, 0xc2, 0xd7, 0xd0, 0x5f, 0xb3, 0xa8, 0xa3, 0xbc, 0x04, 0x67, 0xbd, 0xb5, 0xa4, 0xe9,
	0x8f, 0x1f, 0xd4, 0x69, 0x4c, 0x94, 0xa3, 0x0a, 0x16, 0x7e, 0xb3, 0x00, 0x8e, 0x59, 0x7e, 0x77,
	0x87, 0xda, 0x83, 0xc1, 0x05, 0xa7, 0x6c, 0xb6, 0x94, 0x7c, 0x45, 0x72, 0x7d, 0x30, 0x27, 0xea,
	0xab, 0xde, 0x07, 0xdd, 0x0a, 0x4f, 0xc1, 0x29, 0x25, 0xa8, 0x4f, 0x78, 0x01, 0x5d, 0xa3, 0xad,
	0x64, 0xdd, 0xfa, 0x05, 0x6b, 0x94, 0x7a, 0x2b, 0x73, 0x51, 0xa4, 0xd4, 0x58, 0xa4, 0x8b, 0x67,
	0xef, 0xc0, 0x56, 0x96, 0xa2, 0x03, 0xb6, 0x12, 0xeb, 0x36, 0x70, 0x07, 0x7a, 0x53, 0xb2, 0x62,
	0xb9, 0x64, 0x29, 0x75, 0x2d, 0x04, 0xe8, 0x9c, 0x91, 0x34, 0xe7, 0xb9, 0xdb, 0xc4, 0x21, 0xc0,
	0xa4, 0xf8, 0x6a, 0xd4, 0xb8, 0x2d, 0x05, 0x55, 0x75, 0x71, 0x9e, 0xf0, 0xd8, 0xb5, 0xc7, 0x3f,
	0x9a, 0x70, 0xcf, 0xd0, 0x4e, 0x95, 0x86, 0x29, 0x93, 0x2b, 0x1e, 0x33, 0x3c, 0x84, 0xd6, 0x84,
	0x52, 0xf4, 0x36, 0x04, 0x56, 0x4f, 0xcf, 0xdf, 0xbd, 0x65, 0xa2, 0xb2, 0xd1, 0xc0, 0xb7, 0xd0,
	0x35, 0x49, 0xc5, 0xc7, 0x75, 0x50, 0xfd, 0xe1, 0xf8, 0xfe, 0x96, 0xa9, 0x5e, 0x73, 0x0a, 0xfd,
	0x1b, 0xc1, 0xc3, 0xa0, 0x0e, 0xfe, 0x35, 0xfb, 0xfe, 0x93, 0xdf, 0x20, 0xf4, 0xca, 0x37, 0xd0,
	0xd1, 0x89, 0xc2, 0x47, 0x75, 0x6c, 0x2d, 0xcd, 0xfe, 0xc3, 0xdb, 0x87, 0x7a, 0xc7, 0x21, 0xb4,
	0x8e, 0x59, 0xbe, 0x69, 0xcc, 0x75, 0xca, 0x36, 0x8d, 0x59, 0x1f, 0x3f, 0x6c, 0x9c, 0x77, 0xca,
	0x3f, 0xe1, 0x57, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0xfe, 0x12, 0xd5, 0x9a, 0x05, 0x00,
	0x00,
}
