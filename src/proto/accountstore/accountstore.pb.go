// Code generated by protoc-gen-go.
// source: accountstore.proto
// DO NOT EDIT!

/*
Package accountstore is a generated protocol buffer package.

It is generated from these files:
	accountstore.proto

It has these top-level messages:
	Account
	AddRequest
	AddReply
	ConfirmRequest
	ConfirmReply
	MarkInvalidRequest
	MarkInvalidReply
	GetRequest
	GetReply
	GetByNameRequest
	GetByNameReply
	DebugTryInvalidateRequest
	DebugTryInvalidateReply
*/
package accountstore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Role int32

const (
	// real user, probably shop
	Role_User      Role = 0
	Role_Savetrend Role = 1
	Role_Wantit    Role = 2
	// minor bots
	Role_AuxPrivate Role = 3
	Role_AuxPublic  Role = 4
)

var Role_name = map[int32]string{
	0: "User",
	1: "Savetrend",
	2: "Wantit",
	3: "AuxPrivate",
	4: "AuxPublic",
}
var Role_value = map[string]int32{
	"User":       0,
	"Savetrend":  1,
	"Wantit":     2,
	"AuxPrivate": 3,
	"AuxPublic":  4,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Account struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	Cookie            string `protobuf:"bytes,2,opt,name=cookie" json:"cookie,omitempty"`
	Valid             bool   `protobuf:"varint,3,opt,name=valid" json:"valid,omitempty"`
	Role              Role   `protobuf:"varint,4,opt,name=role,enum=accountstore.Role" json:"role,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Account) GetInstagramUsername() string {
	if m != nil {
		return m.InstagramUsername
	}
	return ""
}

func (m *Account) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *Account) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *Account) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_User
}

type AddRequest struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	Password          string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (m *AddRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddRequest) GetInstagramUsername() string {
	if m != nil {
		return m.InstagramUsername
	}
	return ""
}

func (m *AddRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AddReply struct {
	NeedCode bool `protobuf:"varint,2,opt,name=needCode" json:"needCode,omitempty"`
}

func (m *AddReply) Reset()                    { *m = AddReply{} }
func (m *AddReply) String() string            { return proto.CompactTextString(m) }
func (*AddReply) ProtoMessage()               {}
func (*AddReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddReply) GetNeedCode() bool {
	if m != nil {
		return m.NeedCode
	}
	return false
}

type ConfirmRequest struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	Code              string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
}

func (m *ConfirmRequest) Reset()                    { *m = ConfirmRequest{} }
func (m *ConfirmRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfirmRequest) ProtoMessage()               {}
func (*ConfirmRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConfirmRequest) GetInstagramUsername() string {
	if m != nil {
		return m.InstagramUsername
	}
	return ""
}

func (m *ConfirmRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type ConfirmReply struct {
}

func (m *ConfirmReply) Reset()                    { *m = ConfirmReply{} }
func (m *ConfirmReply) String() string            { return proto.CompactTextString(m) }
func (*ConfirmReply) ProtoMessage()               {}
func (*ConfirmReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type MarkInvalidRequest struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
}

func (m *MarkInvalidRequest) Reset()                    { *m = MarkInvalidRequest{} }
func (m *MarkInvalidRequest) String() string            { return proto.CompactTextString(m) }
func (*MarkInvalidRequest) ProtoMessage()               {}
func (*MarkInvalidRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MarkInvalidRequest) GetInstagramUsername() string {
	if m != nil {
		return m.InstagramUsername
	}
	return ""
}

type MarkInvalidReply struct {
}

func (m *MarkInvalidReply) Reset()                    { *m = MarkInvalidReply{} }
func (m *MarkInvalidReply) String() string            { return proto.CompactTextString(m) }
func (*MarkInvalidReply) ProtoMessage()               {}
func (*MarkInvalidReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type GetRequest struct {
	Roles           []Role `protobuf:"varint,1,rep,packed,name=roles,enum=accountstore.Role" json:"roles,omitempty"`
	IncludeInvalids bool   `protobuf:"varint,2,opt,name=include_invalids,json=includeInvalids" json:"include_invalids,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetRequest) GetRoles() []Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *GetRequest) GetIncludeInvalids() bool {
	if m != nil {
		return m.IncludeInvalids
	}
	return false
}

type GetReply struct {
	Accounts []*Account `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
}

func (m *GetReply) Reset()                    { *m = GetReply{} }
func (m *GetReply) String() string            { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()               {}
func (*GetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetReply) GetAccounts() []*Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type GetByNameRequest struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	HidePrivate       bool   `protobuf:"varint,2,opt,name=hide_private,json=hidePrivate" json:"hide_private,omitempty"`
}

func (m *GetByNameRequest) Reset()                    { *m = GetByNameRequest{} }
func (m *GetByNameRequest) String() string            { return proto.CompactTextString(m) }
func (*GetByNameRequest) ProtoMessage()               {}
func (*GetByNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetByNameRequest) GetInstagramUsername() string {
	if m != nil {
		return m.InstagramUsername
	}
	return ""
}

func (m *GetByNameRequest) GetHidePrivate() bool {
	if m != nil {
		return m.HidePrivate
	}
	return false
}

type GetByNameReply struct {
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *GetByNameReply) Reset()                    { *m = GetByNameReply{} }
func (m *GetByNameReply) String() string            { return proto.CompactTextString(m) }
func (*GetByNameReply) ProtoMessage()               {}
func (*GetByNameReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetByNameReply) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type DebugTryInvalidateRequest struct {
	InstagramUsername string `protobuf:"bytes,1,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	Requests          uint64 `protobuf:"varint,2,opt,name=requests" json:"requests,omitempty"`
}

func (m *DebugTryInvalidateRequest) Reset()                    { *m = DebugTryInvalidateRequest{} }
func (m *DebugTryInvalidateRequest) String() string            { return proto.CompactTextString(m) }
func (*DebugTryInvalidateRequest) ProtoMessage()               {}
func (*DebugTryInvalidateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DebugTryInvalidateRequest) GetInstagramUsername() string {
	if m != nil {
		return m.InstagramUsername
	}
	return ""
}

func (m *DebugTryInvalidateRequest) GetRequests() uint64 {
	if m != nil {
		return m.Requests
	}
	return 0
}

type DebugTryInvalidateReply struct {
}

func (m *DebugTryInvalidateReply) Reset()                    { *m = DebugTryInvalidateReply{} }
func (m *DebugTryInvalidateReply) String() string            { return proto.CompactTextString(m) }
func (*DebugTryInvalidateReply) ProtoMessage()               {}
func (*DebugTryInvalidateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func init() {
	proto.RegisterType((*Account)(nil), "accountstore.Account")
	proto.RegisterType((*AddRequest)(nil), "accountstore.AddRequest")
	proto.RegisterType((*AddReply)(nil), "accountstore.AddReply")
	proto.RegisterType((*ConfirmRequest)(nil), "accountstore.ConfirmRequest")
	proto.RegisterType((*ConfirmReply)(nil), "accountstore.ConfirmReply")
	proto.RegisterType((*MarkInvalidRequest)(nil), "accountstore.MarkInvalidRequest")
	proto.RegisterType((*MarkInvalidReply)(nil), "accountstore.MarkInvalidReply")
	proto.RegisterType((*GetRequest)(nil), "accountstore.GetRequest")
	proto.RegisterType((*GetReply)(nil), "accountstore.GetReply")
	proto.RegisterType((*GetByNameRequest)(nil), "accountstore.GetByNameRequest")
	proto.RegisterType((*GetByNameReply)(nil), "accountstore.GetByNameReply")
	proto.RegisterType((*DebugTryInvalidateRequest)(nil), "accountstore.DebugTryInvalidateRequest")
	proto.RegisterType((*DebugTryInvalidateReply)(nil), "accountstore.DebugTryInvalidateReply")
	proto.RegisterEnum("accountstore.Role", Role_name, Role_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AccountStoreService service

type AccountStoreServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error)
	Confirm(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmReply, error)
	MarkInvalid(ctx context.Context, in *MarkInvalidRequest, opts ...grpc.CallOption) (*MarkInvalidReply, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	GetByName(ctx context.Context, in *GetByNameRequest, opts ...grpc.CallOption) (*GetByNameReply, error)
	DebugTryInvalidate(ctx context.Context, in *DebugTryInvalidateRequest, opts ...grpc.CallOption) (*DebugTryInvalidateReply, error)
}

type accountStoreServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountStoreServiceClient(cc *grpc.ClientConn) AccountStoreServiceClient {
	return &accountStoreServiceClient{cc}
}

func (c *accountStoreServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountStoreServiceClient) Confirm(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmReply, error) {
	out := new(ConfirmReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/Confirm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountStoreServiceClient) MarkInvalid(ctx context.Context, in *MarkInvalidRequest, opts ...grpc.CallOption) (*MarkInvalidReply, error) {
	out := new(MarkInvalidReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/MarkInvalid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountStoreServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountStoreServiceClient) GetByName(ctx context.Context, in *GetByNameRequest, opts ...grpc.CallOption) (*GetByNameReply, error) {
	out := new(GetByNameReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/GetByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountStoreServiceClient) DebugTryInvalidate(ctx context.Context, in *DebugTryInvalidateRequest, opts ...grpc.CallOption) (*DebugTryInvalidateReply, error) {
	out := new(DebugTryInvalidateReply)
	err := grpc.Invoke(ctx, "/accountstore.AccountStoreService/DebugTryInvalidate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountStoreService service

type AccountStoreServiceServer interface {
	Add(context.Context, *AddRequest) (*AddReply, error)
	Confirm(context.Context, *ConfirmRequest) (*ConfirmReply, error)
	MarkInvalid(context.Context, *MarkInvalidRequest) (*MarkInvalidReply, error)
	Get(context.Context, *GetRequest) (*GetReply, error)
	GetByName(context.Context, *GetByNameRequest) (*GetByNameReply, error)
	DebugTryInvalidate(context.Context, *DebugTryInvalidateRequest) (*DebugTryInvalidateReply, error)
}

func RegisterAccountStoreServiceServer(s *grpc.Server, srv AccountStoreServiceServer) {
	s.RegisterService(&_AccountStoreService_serviceDesc, srv)
}

func _AccountStoreService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountStoreService_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).Confirm(ctx, req.(*ConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountStoreService_MarkInvalid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkInvalidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).MarkInvalid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/MarkInvalid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).MarkInvalid(ctx, req.(*MarkInvalidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountStoreService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountStoreService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/GetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).GetByName(ctx, req.(*GetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountStoreService_DebugTryInvalidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugTryInvalidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountStoreServiceServer).DebugTryInvalidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accountstore.AccountStoreService/DebugTryInvalidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountStoreServiceServer).DebugTryInvalidate(ctx, req.(*DebugTryInvalidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountStoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "accountstore.AccountStoreService",
	HandlerType: (*AccountStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _AccountStoreService_Add_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _AccountStoreService_Confirm_Handler,
		},
		{
			MethodName: "MarkInvalid",
			Handler:    _AccountStoreService_MarkInvalid_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AccountStoreService_Get_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _AccountStoreService_GetByName_Handler,
		},
		{
			MethodName: "DebugTryInvalidate",
			Handler:    _AccountStoreService_DebugTryInvalidate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accountstore.proto",
}

func init() { proto.RegisterFile("accountstore.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0x6b, 0xb7, 0x75, 0xa6, 0x25, 0x98, 0x01, 0x8a, 0x6b, 0x55, 0x55, 0x58, 0x89, 0x12,
	0x90, 0x28, 0xa2, 0x9c, 0x7a, 0xe0, 0x10, 0x0a, 0x8a, 0x00, 0x81, 0xc0, 0x01, 0xf5, 0x18, 0x6d,
	0xbc, 0x9b, 0x62, 0xd5, 0xb1, 0xcd, 0x7a, 0x1d, 0xc8, 0x4f, 0xf0, 0x81, 0x7c, 0x0d, 0x5a, 0x7b,
	0x6d, 0xe2, 0xa4, 0x01, 0x91, 0x5b, 0x66, 0xe6, 0xf9, 0xcd, 0xcc, 0xdb, 0x37, 0x01, 0xa4, 0x41,
	0x90, 0xe4, 0xb1, 0xcc, 0x64, 0x22, 0xf8, 0x49, 0x2a, 0x12, 0x99, 0xe0, 0xde, 0x7c, 0x8e, 0xfc,
	0x34, 0x60, 0xa7, 0x57, 0x26, 0xf0, 0x09, 0x60, 0x18, 0x67, 0x92, 0x5e, 0x0a, 0x3a, 0x19, 0xe6,
	0x19, 0x17, 0x31, 0x9d, 0x70, 0xd7, 0xe8, 0x18, 0xdd, 0x96, 0x7f, 0xab, 0xae, 0x7c, 0xd1, 0x05,
	0xdc, 0x87, 0xed, 0x20, 0x49, 0xae, 0x42, 0xee, 0x6e, 0x16, 0x10, 0x1d, 0xe1, 0x1d, 0xd8, 0x9a,
	0xd2, 0x28, 0x64, 0xae, 0xd9, 0x31, 0xba, 0xb6, 0x5f, 0x06, 0x78, 0x0c, 0x96, 0x48, 0x22, 0xee,
	0x5a, 0x1d, 0xa3, 0xdb, 0x3e, 0xc5, 0x93, 0xc6, 0x64, 0x7e, 0x12, 0x71, 0xbf, 0xa8, 0x93, 0x0b,
	0x80, 0x1e, 0x63, 0x3e, 0xff, 0x96, 0xf3, 0xec, 0xbf, 0x47, 0xf2, 0xc0, 0x4e, 0x69, 0x96, 0x7d,
	0x4f, 0x04, 0xd3, 0x43, 0xd5, 0x31, 0x39, 0x06, 0xbb, 0x20, 0x4e, 0xa3, 0x99, 0xc2, 0xc5, 0x9c,
	0xb3, 0xf3, 0x84, 0x95, 0xc3, 0xdb, 0x7e, 0x1d, 0x93, 0x01, 0xb4, 0xcf, 0x93, 0x78, 0x1c, 0x8a,
	0xc9, 0x9a, 0x43, 0x20, 0x58, 0x41, 0x45, 0xdc, 0xf2, 0x8b, 0xdf, 0xa4, 0x0d, 0x7b, 0x35, 0x69,
	0x1a, 0xcd, 0xc8, 0x39, 0xe0, 0x7b, 0x2a, 0xae, 0xde, 0xc4, 0x85, 0x38, 0xeb, 0x35, 0x22, 0x08,
	0x4e, 0x83, 0x44, 0x11, 0x53, 0x80, 0x3e, 0x97, 0x15, 0x61, 0x17, 0xb6, 0x94, 0xa8, 0x99, 0x6b,
	0x74, 0xcc, 0x15, 0xaa, 0x97, 0x00, 0x7c, 0x04, 0x4e, 0x18, 0x07, 0x51, 0xce, 0xf8, 0x30, 0x2c,
	0xf9, 0x32, 0xad, 0xcc, 0x4d, 0x9d, 0xd7, 0x6d, 0x32, 0xf2, 0x02, 0xec, 0xa2, 0x85, 0x12, 0xf2,
	0x19, 0xd8, 0x15, 0x65, 0xd1, 0x63, 0xf7, 0xf4, 0x6e, 0xb3, 0x87, 0xf6, 0x96, 0x5f, 0xc3, 0x08,
	0x03, 0xa7, 0xcf, 0xe5, 0xcb, 0xd9, 0x07, 0x3a, 0xe1, 0x6b, 0x2a, 0x7c, 0x1f, 0xf6, 0xbe, 0x86,
	0x8c, 0x0f, 0x53, 0x11, 0x4e, 0xa9, 0xac, 0x9e, 0x70, 0x57, 0xe5, 0x3e, 0x96, 0x29, 0xd2, 0x83,
	0xf6, 0x5c, 0x17, 0x35, 0xea, 0x53, 0xd8, 0xd1, 0x33, 0x14, 0xc4, 0x2b, 0x27, 0xad, 0x50, 0x64,
	0x0c, 0x07, 0xaf, 0xf8, 0x28, 0xbf, 0xfc, 0x2c, 0x66, 0x7a, 0x77, 0x2a, 0xf9, 0xfa, 0xc6, 0x14,
	0xe5, 0x97, 0xa5, 0xac, 0x96, 0x5f, 0xc7, 0xe4, 0x00, 0xee, 0x5d, 0xd7, 0x27, 0x8d, 0x66, 0x8f,
	0xdf, 0x82, 0xa5, 0x1e, 0x09, 0x6d, 0xb0, 0x14, 0x95, 0xb3, 0x81, 0x37, 0xa0, 0x35, 0xa0, 0x53,
	0x2e, 0x05, 0x8f, 0x99, 0x63, 0x20, 0xc0, 0xf6, 0x05, 0x8d, 0x65, 0x28, 0x9d, 0x4d, 0x6c, 0x03,
	0xf4, 0xf2, 0x1f, 0x5a, 0x00, 0xc7, 0x54, 0x50, 0x15, 0xe7, 0xa3, 0x28, 0x0c, 0x1c, 0xeb, 0xf4,
	0x97, 0x09, 0xb7, 0xf5, 0x8e, 0x03, 0xb5, 0xf0, 0x80, 0x8b, 0x69, 0x18, 0x70, 0x3c, 0x03, 0xb3,
	0xc7, 0x18, 0xba, 0x0b, 0x6a, 0xd4, 0x37, 0xe8, 0xed, 0x5f, 0x53, 0x51, 0x56, 0xdb, 0xc0, 0xd7,
	0xb0, 0xa3, 0x5d, 0x8d, 0x87, 0x4d, 0x50, 0xf3, 0x82, 0x3c, 0x6f, 0x45, 0xb5, 0xa4, 0xf9, 0x04,
	0xbb, 0x73, 0x3e, 0xc6, 0x4e, 0x13, 0xbc, 0x7c, 0x27, 0xde, 0xd1, 0x5f, 0x10, 0x25, 0xe5, 0x19,
	0x98, 0x7d, 0x2e, 0x17, 0x97, 0xfa, 0x73, 0x19, 0x8b, 0x4b, 0x55, 0x86, 0x26, 0x1b, 0xf8, 0x0e,
	0x5a, 0xb5, 0x73, 0xf0, 0x68, 0x09, 0xd6, 0x30, 0xae, 0x77, 0xb8, 0xb2, 0x5e, 0x92, 0x8d, 0x01,
	0x97, 0xdf, 0x16, 0x1f, 0x36, 0xbf, 0x5a, 0xe9, 0x32, 0xef, 0xc1, 0xbf, 0x81, 0x45, 0x9f, 0xd1,
	0x76, 0xf1, 0xdf, 0xfe, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x82, 0x05, 0xd4, 0xf1,
	0x05, 0x00, 0x00,
}
