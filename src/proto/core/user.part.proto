service UserService {
  
  // returns a user with a specific email. If not exists, creates it
  rpc FindOrCreateUser (CreateUserRequest) returns (ReadUserReply) {}

  rpc CreateFakeUser (CreateUserRequest) returns (ReadUserReply) {}

  // returns a user that mathes request options
  rpc ReadUser (ReadUserRequest) returns (ReadUserReply) {}

  rpc SetEmail (SetEmailRequest) returns (SetEmailReply) {}
}

message CreateUserRequest {
  User user = 1;
}

//where instagram_id = ? OR phone = ? OR instagram_username = ? OR name = ?
message ReadUserRequest {
  uint64 instagram_id = 1;
  string phone = 2;
  string instagram_username = 3;
  string name = 7;
  //direct by user.id
  uint64 id = 4;

  //if true PuclicEncode will be used(phone/mail will be empty)
  bool public = 5;
  //if true list of relared shops will be provided
  bool get_shops = 6;
}

message SearchUserReply {
  repeated User result = 1; 
}

message ReadUserReply {
  //todo: remove id
  int64 id = 1;
  User user = 2;
}

// representation of user model
message User {
  int64 id = 1;

  string name = 2;
  string email = 3;
  string phone = 4;
  string website = 5;
  string caption = 13;
  string avatar_url = 17;
  string slogan = 18;

  uint64 instagram_id = 6;
  string instagram_username = 7;
  string instagram_fullname = 8;
  string instagram_avatar_url = 9;
  string instagram_caption = 10;

  bool opt_out = 11;
  bool super_seller = 12;

  bool has_email = 14;
  bool has_phone = 15;

  bool confirmed = 21;
  bool is_fake = 22;

  bool seller = 16;
  //list of shops where user is a supplier
  repeated uint64 supplier_of = 19;
  //list of shops where user is a seller
  repeated uint64 seller_of = 20;
}

message SetEmailRequest {
  uint64 user_id = 1;
  string email = 2;
}

message SetEmailReply {
  string error = 1;
}
