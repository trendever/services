// Code generated by protoc-gen-go.
// source: core.proto
// DO NOT EDIT!

/*
Package core is a generated protocol buffer package.

It is generated from these files:
	core.proto

It has these top-level messages:
	ReadLeadRequest
	ReadLeadResult
	Lead
	CreateLeadResult
	UserLeadsRequest
	UserLeadsReply
	LeadInfo
	LeadEventMessage
	SetLeadStatusRequest
	SetLeadStatusReply
	CallSupplierRequest
	CallSupplierReply
	CallCustomerRequest
	CallCustomerReply
	GetLeadRequest
	GetLeadReply
	GetCancelReasonsRequest
	CancelReason
	GetCancelReasonsReply
	GetUserRoleRequest
	GetUserRoleReply
	GetPlanRequest
	GetPlansListRequest
	MonezationPlan
	GetPlanReply
	GetPlansListReply
	CoinsOffer
	GetCoinsOffersRequest
	GetCoinsOffersReply
	SubscribeRequest
	SubscribeReply
	SetAutorefillRequest
	SetAutorefillReply
	GetProductRequest
	SearchProductRequest
	ProductSearchResult
	ProductReadResult
	CreateProductRequest
	CreateProductResult
	Product
	ProductItem
	ImageCandidate
	GetLikedByRequest
	GetLikedByReply
	LikeProductRequest
	LikeProductReply
	GetSpecialProductsRequest
	SpecialProductInfo
	GetSpecialProductsReply
	TokenInfo
	AddTokenRequest
	DelTokenRequest
	ErrorResult
	GetTokensRequest
	GetTokensResult
	InvalidateTokensRequest
	InvalidateTokensResult
	UpdateTokenRequest
	UpdateTokenResult
	ShopCard
	CreateCardRequest
	CreateCardReply
	DeleteCardRequest
	DeleteCardReply
	GetCardsRequest
	GetCardsReply
	GetCardByIDRequest
	GetCardReply
	Shop
	ShopProfileRequest
	ShopProfileReply
	FindOrCreateShopForSupplierRequest
	FindOrCreateShopForSupplierReply
	GetMainTagsRequest
	GetRelatedTagsRequest
	TagSearchResult
	Tag
	CreateUserRequest
	ReadUserRequest
	SearchUserReply
	ReadUserReply
	User
	SetEmailRequest
	SetEmailReply
	SetDataRequest
	SetDataReply
*/
package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LeadAction int32

const (
	LeadAction_BUY LeadAction = 0
	// we don't want add item to lead for now
	// just send info to conversation instead
	LeadAction_INFO LeadAction = 1
)

var LeadAction_name = map[int32]string{
	0: "BUY",
	1: "INFO",
}
var LeadAction_value = map[string]int32{
	"BUY":  0,
	"INFO": 1,
}

func (x LeadAction) String() string {
	return proto.EnumName(LeadAction_name, int32(x))
}
func (LeadAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LeadUserRole int32

const (
	LeadUserRole_UNKNOWN      LeadUserRole = 0
	LeadUserRole_CUSTOMER     LeadUserRole = 1
	LeadUserRole_SUPPLIER     LeadUserRole = 2
	LeadUserRole_SELLER       LeadUserRole = 3
	LeadUserRole_SUPER_SELLER LeadUserRole = 4
)

var LeadUserRole_name = map[int32]string{
	0: "UNKNOWN",
	1: "CUSTOMER",
	2: "SUPPLIER",
	3: "SELLER",
	4: "SUPER_SELLER",
}
var LeadUserRole_value = map[string]int32{
	"UNKNOWN":      0,
	"CUSTOMER":     1,
	"SUPPLIER":     2,
	"SELLER":       3,
	"SUPER_SELLER": 4,
}

func (x LeadUserRole) String() string {
	return proto.EnumName(LeadUserRole_name, int32(x))
}
func (LeadUserRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type LeadStatus int32

const (
	// this status means we created a lead in db, but did not perform any predefined actions
	LeadStatus_EMPTY       LeadStatus = 0
	LeadStatus_NEW         LeadStatus = 1
	LeadStatus_IN_PROGRESS LeadStatus = 2
	LeadStatus_SUBMITTED   LeadStatus = 3
	LeadStatus_ON_DELIVERY LeadStatus = 4
	LeadStatus_COMPLETED   LeadStatus = 5
	LeadStatus_CANCELLED   LeadStatus = 6
)

var LeadStatus_name = map[int32]string{
	0: "EMPTY",
	1: "NEW",
	2: "IN_PROGRESS",
	3: "SUBMITTED",
	4: "ON_DELIVERY",
	5: "COMPLETED",
	6: "CANCELLED",
}
var LeadStatus_value = map[string]int32{
	"EMPTY":       0,
	"NEW":         1,
	"IN_PROGRESS": 2,
	"SUBMITTED":   3,
	"ON_DELIVERY": 4,
	"COMPLETED":   5,
	"CANCELLED":   6,
}

func (x LeadStatus) String() string {
	return proto.EnumName(LeadStatus_name, int32(x))
}
func (LeadStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type LeadStatusEvent int32

const (
	LeadStatusEvent_CREATE   LeadStatusEvent = 0
	LeadStatusEvent_PROGRESS LeadStatusEvent = 1
	LeadStatusEvent_SUBMIT   LeadStatusEvent = 2
	LeadStatusEvent_DELIVERY LeadStatusEvent = 3
	LeadStatusEvent_COMPLETE LeadStatusEvent = 4
	LeadStatusEvent_CANCEL   LeadStatusEvent = 5
)

var LeadStatusEvent_name = map[int32]string{
	0: "CREATE",
	1: "PROGRESS",
	2: "SUBMIT",
	3: "DELIVERY",
	4: "COMPLETE",
	5: "CANCEL",
}
var LeadStatusEvent_value = map[string]int32{
	"CREATE":   0,
	"PROGRESS": 1,
	"SUBMIT":   2,
	"DELIVERY": 3,
	"COMPLETE": 4,
	"CANCEL":   5,
}

func (x LeadStatusEvent) String() string {
	return proto.EnumName(LeadStatusEvent_name, int32(x))
}
func (LeadStatusEvent) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type TokenType int32

const (
	TokenType_Android TokenType = 0
	TokenType_Iphone  TokenType = 1
)

var TokenType_name = map[int32]string{
	0: "Android",
	1: "Iphone",
}
var TokenType_value = map[string]int32{
	"Android": 0,
	"Iphone":  1,
}

func (x TokenType) String() string {
	return proto.EnumName(TokenType_name, int32(x))
}
func (TokenType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ReadLeadRequest struct {
	// Types that are valid to be assigned to SearchBy:
	//	*ReadLeadRequest_Id
	//	*ReadLeadRequest_InstagramPk
	//	*ReadLeadRequest_ConversationId
	SearchBy isReadLeadRequest_SearchBy `protobuf_oneof:"search_by"`
}

func (m *ReadLeadRequest) Reset()                    { *m = ReadLeadRequest{} }
func (m *ReadLeadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadLeadRequest) ProtoMessage()               {}
func (*ReadLeadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isReadLeadRequest_SearchBy interface {
	isReadLeadRequest_SearchBy()
}

type ReadLeadRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,oneof"`
}
type ReadLeadRequest_InstagramPk struct {
	InstagramPk string `protobuf:"bytes,2,opt,name=instagram_pk,json=instagramPk,oneof"`
}
type ReadLeadRequest_ConversationId struct {
	ConversationId uint64 `protobuf:"varint,3,opt,name=conversation_id,json=conversationId,oneof"`
}

func (*ReadLeadRequest_Id) isReadLeadRequest_SearchBy()             {}
func (*ReadLeadRequest_InstagramPk) isReadLeadRequest_SearchBy()    {}
func (*ReadLeadRequest_ConversationId) isReadLeadRequest_SearchBy() {}

func (m *ReadLeadRequest) GetSearchBy() isReadLeadRequest_SearchBy {
	if m != nil {
		return m.SearchBy
	}
	return nil
}

func (m *ReadLeadRequest) GetId() int64 {
	if x, ok := m.GetSearchBy().(*ReadLeadRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (m *ReadLeadRequest) GetInstagramPk() string {
	if x, ok := m.GetSearchBy().(*ReadLeadRequest_InstagramPk); ok {
		return x.InstagramPk
	}
	return ""
}

func (m *ReadLeadRequest) GetConversationId() uint64 {
	if x, ok := m.GetSearchBy().(*ReadLeadRequest_ConversationId); ok {
		return x.ConversationId
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReadLeadRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReadLeadRequest_OneofMarshaler, _ReadLeadRequest_OneofUnmarshaler, _ReadLeadRequest_OneofSizer, []interface{}{
		(*ReadLeadRequest_Id)(nil),
		(*ReadLeadRequest_InstagramPk)(nil),
		(*ReadLeadRequest_ConversationId)(nil),
	}
}

func _ReadLeadRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReadLeadRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *ReadLeadRequest_Id:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Id))
	case *ReadLeadRequest_InstagramPk:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.InstagramPk)
	case *ReadLeadRequest_ConversationId:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ConversationId))
	case nil:
	default:
		return fmt.Errorf("ReadLeadRequest.SearchBy has unexpected type %T", x)
	}
	return nil
}

func _ReadLeadRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReadLeadRequest)
	switch tag {
	case 1: // search_by.id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SearchBy = &ReadLeadRequest_Id{int64(x)}
		return true, err
	case 2: // search_by.instagram_pk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.SearchBy = &ReadLeadRequest_InstagramPk{x}
		return true, err
	case 3: // search_by.conversation_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SearchBy = &ReadLeadRequest_ConversationId{x}
		return true, err
	default:
		return false, nil
	}
}

func _ReadLeadRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReadLeadRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *ReadLeadRequest_Id:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Id))
	case *ReadLeadRequest_InstagramPk:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.InstagramPk)))
		n += len(x.InstagramPk)
	case *ReadLeadRequest_ConversationId:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ConversationId))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ReadLeadResult struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadLeadResult) Reset()                    { *m = ReadLeadResult{} }
func (m *ReadLeadResult) String() string            { return proto.CompactTextString(m) }
func (*ReadLeadResult) ProtoMessage()               {}
func (*ReadLeadResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadLeadResult) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// representation of lead model
type Lead struct {
	Id            int64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Source        string     `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Comment       string     `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	CustomerId    int64      `protobuf:"varint,4,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	InstagramPk   string     `protobuf:"bytes,5,opt,name=instagram_pk,json=instagramPk" json:"instagram_pk,omitempty"`
	InstagramLink string     `protobuf:"bytes,7,opt,name=instagram_link,json=instagramLink" json:"instagram_link,omitempty"`
	ProductId     int64      `protobuf:"varint,6,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	Action        LeadAction `protobuf:"varint,8,opt,name=action,enum=core.LeadAction" json:"action,omitempty"`
}

func (m *Lead) Reset()                    { *m = Lead{} }
func (m *Lead) String() string            { return proto.CompactTextString(m) }
func (*Lead) ProtoMessage()               {}
func (*Lead) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Lead) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Lead) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Lead) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Lead) GetCustomerId() int64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *Lead) GetInstagramPk() string {
	if m != nil {
		return m.InstagramPk
	}
	return ""
}

func (m *Lead) GetInstagramLink() string {
	if m != nil {
		return m.InstagramLink
	}
	return ""
}

func (m *Lead) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *Lead) GetAction() LeadAction {
	if m != nil {
		return m.Action
	}
	return LeadAction_BUY
}

type CreateLeadResult struct {
	Id   int64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Lead *LeadInfo `protobuf:"bytes,2,opt,name=lead" json:"lead,omitempty"`
}

func (m *CreateLeadResult) Reset()                    { *m = CreateLeadResult{} }
func (m *CreateLeadResult) String() string            { return proto.CompactTextString(m) }
func (*CreateLeadResult) ProtoMessage()               {}
func (*CreateLeadResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateLeadResult) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreateLeadResult) GetLead() *LeadInfo {
	if m != nil {
		return m.Lead
	}
	return nil
}

type UserLeadsRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// filter leads by user's role in the lead
	Role []LeadUserRole `protobuf:"varint,2,rep,packed,name=role,enum=core.LeadUserRole" json:"role,omitempty"`
	// todo: remove lead_id
	// also you can pass concrete lead_id
	LeadId uint64 `protobuf:"varint,3,opt,name=lead_id,json=leadId" json:"lead_id,omitempty"`
	Limit  uint64 `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	// if true - asc, false - desc
	Direction bool `protobuf:"varint,5,opt,name=direction" json:"direction,omitempty"`
	// shift to this time
	FromUpdatedAt int64 `protobuf:"varint,6,opt,name=from_updated_at,json=fromUpdatedAt" json:"from_updated_at,omitempty"`
}

func (m *UserLeadsRequest) Reset()                    { *m = UserLeadsRequest{} }
func (m *UserLeadsRequest) String() string            { return proto.CompactTextString(m) }
func (*UserLeadsRequest) ProtoMessage()               {}
func (*UserLeadsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UserLeadsRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserLeadsRequest) GetRole() []LeadUserRole {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *UserLeadsRequest) GetLeadId() uint64 {
	if m != nil {
		return m.LeadId
	}
	return 0
}

func (m *UserLeadsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *UserLeadsRequest) GetDirection() bool {
	if m != nil {
		return m.Direction
	}
	return false
}

func (m *UserLeadsRequest) GetFromUpdatedAt() int64 {
	if m != nil {
		return m.FromUpdatedAt
	}
	return 0
}

type UserLeadsReply struct {
	Leads []*LeadInfo `protobuf:"bytes,1,rep,name=leads" json:"leads,omitempty"`
}

func (m *UserLeadsReply) Reset()                    { *m = UserLeadsReply{} }
func (m *UserLeadsReply) String() string            { return proto.CompactTextString(m) }
func (*UserLeadsReply) ProtoMessage()               {}
func (*UserLeadsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserLeadsReply) GetLeads() []*LeadInfo {
	if m != nil {
		return m.Leads
	}
	return nil
}

type LeadInfo struct {
	Id             uint64       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Source         string       `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Comment        string       `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	CustomerId     uint64       `protobuf:"varint,4,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	Products       []*Product   `protobuf:"bytes,5,rep,name=products" json:"products,omitempty"`
	InstagramPk    string       `protobuf:"bytes,7,opt,name=instagram_pk,json=instagramPk" json:"instagram_pk,omitempty"`
	InstagramLink  string       `protobuf:"bytes,14,opt,name=instagram_link,json=instagramLink" json:"instagram_link,omitempty"`
	Customer       *User        `protobuf:"bytes,8,opt,name=customer" json:"customer,omitempty"`
	Status         LeadStatus   `protobuf:"varint,9,opt,name=status,enum=core.LeadStatus" json:"status,omitempty"`
	UserRole       LeadUserRole `protobuf:"varint,10,opt,name=user_role,json=userRole,enum=core.LeadUserRole" json:"user_role,omitempty"`
	ConversationId uint64       `protobuf:"varint,11,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Shop           *Shop        `protobuf:"bytes,12,opt,name=shop" json:"shop,omitempty"`
	UpdatedAt      int64        `protobuf:"varint,13,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	CancelReason   uint64       `protobuf:"varint,15,opt,name=cancel_reason,json=cancelReason" json:"cancel_reason,omitempty"`
	StatusComment  string       `protobuf:"bytes,16,opt,name=status_comment,json=statusComment" json:"status_comment,omitempty"`
	UpdatedAtAgo   int64        `protobuf:"varint,17,opt,name=updated_at_ago,json=updatedAtAgo" json:"updated_at_ago,omitempty"`
}

func (m *LeadInfo) Reset()                    { *m = LeadInfo{} }
func (m *LeadInfo) String() string            { return proto.CompactTextString(m) }
func (*LeadInfo) ProtoMessage()               {}
func (*LeadInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LeadInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LeadInfo) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *LeadInfo) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *LeadInfo) GetCustomerId() uint64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *LeadInfo) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

func (m *LeadInfo) GetInstagramPk() string {
	if m != nil {
		return m.InstagramPk
	}
	return ""
}

func (m *LeadInfo) GetInstagramLink() string {
	if m != nil {
		return m.InstagramLink
	}
	return ""
}

func (m *LeadInfo) GetCustomer() *User {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *LeadInfo) GetStatus() LeadStatus {
	if m != nil {
		return m.Status
	}
	return LeadStatus_EMPTY
}

func (m *LeadInfo) GetUserRole() LeadUserRole {
	if m != nil {
		return m.UserRole
	}
	return LeadUserRole_UNKNOWN
}

func (m *LeadInfo) GetConversationId() uint64 {
	if m != nil {
		return m.ConversationId
	}
	return 0
}

func (m *LeadInfo) GetShop() *Shop {
	if m != nil {
		return m.Shop
	}
	return nil
}

func (m *LeadInfo) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *LeadInfo) GetCancelReason() uint64 {
	if m != nil {
		return m.CancelReason
	}
	return 0
}

func (m *LeadInfo) GetStatusComment() string {
	if m != nil {
		return m.StatusComment
	}
	return ""
}

func (m *LeadInfo) GetUpdatedAtAgo() int64 {
	if m != nil {
		return m.UpdatedAtAgo
	}
	return 0
}

type LeadEventMessage struct {
	LeadId uint64   `protobuf:"varint,1,opt,name=lead_id,json=leadId" json:"lead_id,omitempty"`
	Event  string   `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
	Users  []uint64 `protobuf:"varint,3,rep,packed,name=users" json:"users,omitempty"`
}

func (m *LeadEventMessage) Reset()                    { *m = LeadEventMessage{} }
func (m *LeadEventMessage) String() string            { return proto.CompactTextString(m) }
func (*LeadEventMessage) ProtoMessage()               {}
func (*LeadEventMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LeadEventMessage) GetLeadId() uint64 {
	if m != nil {
		return m.LeadId
	}
	return 0
}

func (m *LeadEventMessage) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *LeadEventMessage) GetUsers() []uint64 {
	if m != nil {
		return m.Users
	}
	return nil
}

type SetLeadStatusRequest struct {
	LeadId        uint64          `protobuf:"varint,1,opt,name=lead_id,json=leadId" json:"lead_id,omitempty"`
	Event         LeadStatusEvent `protobuf:"varint,2,opt,name=event,enum=core.LeadStatusEvent" json:"event,omitempty"`
	UserId        uint64          `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	CancelReason  uint64          `protobuf:"varint,4,opt,name=cancel_reason,json=cancelReason" json:"cancel_reason,omitempty"`
	StatusComment string          `protobuf:"bytes,5,opt,name=status_comment,json=statusComment" json:"status_comment,omitempty"`
}

func (m *SetLeadStatusRequest) Reset()                    { *m = SetLeadStatusRequest{} }
func (m *SetLeadStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*SetLeadStatusRequest) ProtoMessage()               {}
func (*SetLeadStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SetLeadStatusRequest) GetLeadId() uint64 {
	if m != nil {
		return m.LeadId
	}
	return 0
}

func (m *SetLeadStatusRequest) GetEvent() LeadStatusEvent {
	if m != nil {
		return m.Event
	}
	return LeadStatusEvent_CREATE
}

func (m *SetLeadStatusRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetLeadStatusRequest) GetCancelReason() uint64 {
	if m != nil {
		return m.CancelReason
	}
	return 0
}

func (m *SetLeadStatusRequest) GetStatusComment() string {
	if m != nil {
		return m.StatusComment
	}
	return ""
}

type SetLeadStatusReply struct {
	Lead *LeadInfo `protobuf:"bytes,1,opt,name=lead" json:"lead,omitempty"`
}

func (m *SetLeadStatusReply) Reset()                    { *m = SetLeadStatusReply{} }
func (m *SetLeadStatusReply) String() string            { return proto.CompactTextString(m) }
func (*SetLeadStatusReply) ProtoMessage()               {}
func (*SetLeadStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SetLeadStatusReply) GetLead() *LeadInfo {
	if m != nil {
		return m.Lead
	}
	return nil
}

type CallSupplierRequest struct {
	LeadId uint64 `protobuf:"varint,1,opt,name=lead_id,json=leadId" json:"lead_id,omitempty"`
}

func (m *CallSupplierRequest) Reset()                    { *m = CallSupplierRequest{} }
func (m *CallSupplierRequest) String() string            { return proto.CompactTextString(m) }
func (*CallSupplierRequest) ProtoMessage()               {}
func (*CallSupplierRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CallSupplierRequest) GetLeadId() uint64 {
	if m != nil {
		return m.LeadId
	}
	return 0
}

type CallSupplierReply struct {
}

func (m *CallSupplierReply) Reset()                    { *m = CallSupplierReply{} }
func (m *CallSupplierReply) String() string            { return proto.CompactTextString(m) }
func (*CallSupplierReply) ProtoMessage()               {}
func (*CallSupplierReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type CallCustomerRequest struct {
	LeadId uint64 `protobuf:"varint,1,opt,name=lead_id,json=leadId" json:"lead_id,omitempty"`
}

func (m *CallCustomerRequest) Reset()                    { *m = CallCustomerRequest{} }
func (m *CallCustomerRequest) String() string            { return proto.CompactTextString(m) }
func (*CallCustomerRequest) ProtoMessage()               {}
func (*CallCustomerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CallCustomerRequest) GetLeadId() uint64 {
	if m != nil {
		return m.LeadId
	}
	return 0
}

type CallCustomerReply struct {
}

func (m *CallCustomerReply) Reset()                    { *m = CallCustomerReply{} }
func (m *CallCustomerReply) String() string            { return proto.CompactTextString(m) }
func (*CallCustomerReply) ProtoMessage()               {}
func (*CallCustomerReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type GetLeadRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Types that are valid to be assigned to SearchBy:
	//	*GetLeadRequest_Id
	//	*GetLeadRequest_ConversationId
	SearchBy isGetLeadRequest_SearchBy `protobuf_oneof:"search_by"`
}

func (m *GetLeadRequest) Reset()                    { *m = GetLeadRequest{} }
func (m *GetLeadRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLeadRequest) ProtoMessage()               {}
func (*GetLeadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type isGetLeadRequest_SearchBy interface {
	isGetLeadRequest_SearchBy()
}

type GetLeadRequest_Id struct {
	Id uint64 `protobuf:"varint,2,opt,name=id,oneof"`
}
type GetLeadRequest_ConversationId struct {
	ConversationId uint64 `protobuf:"varint,3,opt,name=conversation_id,json=conversationId,oneof"`
}

func (*GetLeadRequest_Id) isGetLeadRequest_SearchBy()             {}
func (*GetLeadRequest_ConversationId) isGetLeadRequest_SearchBy() {}

func (m *GetLeadRequest) GetSearchBy() isGetLeadRequest_SearchBy {
	if m != nil {
		return m.SearchBy
	}
	return nil
}

func (m *GetLeadRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetLeadRequest) GetId() uint64 {
	if x, ok := m.GetSearchBy().(*GetLeadRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (m *GetLeadRequest) GetConversationId() uint64 {
	if x, ok := m.GetSearchBy().(*GetLeadRequest_ConversationId); ok {
		return x.ConversationId
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetLeadRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetLeadRequest_OneofMarshaler, _GetLeadRequest_OneofUnmarshaler, _GetLeadRequest_OneofSizer, []interface{}{
		(*GetLeadRequest_Id)(nil),
		(*GetLeadRequest_ConversationId)(nil),
	}
}

func _GetLeadRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetLeadRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *GetLeadRequest_Id:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Id))
	case *GetLeadRequest_ConversationId:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ConversationId))
	case nil:
	default:
		return fmt.Errorf("GetLeadRequest.SearchBy has unexpected type %T", x)
	}
	return nil
}

func _GetLeadRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetLeadRequest)
	switch tag {
	case 2: // search_by.id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SearchBy = &GetLeadRequest_Id{x}
		return true, err
	case 3: // search_by.conversation_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SearchBy = &GetLeadRequest_ConversationId{x}
		return true, err
	default:
		return false, nil
	}
}

func _GetLeadRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetLeadRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *GetLeadRequest_Id:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Id))
	case *GetLeadRequest_ConversationId:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ConversationId))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetLeadReply struct {
	Lead *LeadInfo `protobuf:"bytes,1,opt,name=lead" json:"lead,omitempty"`
}

func (m *GetLeadReply) Reset()                    { *m = GetLeadReply{} }
func (m *GetLeadReply) String() string            { return proto.CompactTextString(m) }
func (*GetLeadReply) ProtoMessage()               {}
func (*GetLeadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetLeadReply) GetLead() *LeadInfo {
	if m != nil {
		return m.Lead
	}
	return nil
}

type GetCancelReasonsRequest struct {
}

func (m *GetCancelReasonsRequest) Reset()                    { *m = GetCancelReasonsRequest{} }
func (m *GetCancelReasonsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCancelReasonsRequest) ProtoMessage()               {}
func (*GetCancelReasonsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type CancelReason struct {
	Id   uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *CancelReason) Reset()                    { *m = CancelReason{} }
func (m *CancelReason) String() string            { return proto.CompactTextString(m) }
func (*CancelReason) ProtoMessage()               {}
func (*CancelReason) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CancelReason) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CancelReason) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetCancelReasonsReply struct {
	Reasons []*CancelReason `protobuf:"bytes,1,rep,name=reasons" json:"reasons,omitempty"`
}

func (m *GetCancelReasonsReply) Reset()                    { *m = GetCancelReasonsReply{} }
func (m *GetCancelReasonsReply) String() string            { return proto.CompactTextString(m) }
func (*GetCancelReasonsReply) ProtoMessage()               {}
func (*GetCancelReasonsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetCancelReasonsReply) GetReasons() []*CancelReason {
	if m != nil {
		return m.Reasons
	}
	return nil
}

type GetUserRoleRequest struct {
	UserId          uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	InstagramUserId uint64 `protobuf:"varint,2,opt,name=instagram_user_id,json=instagramUserId" json:"instagram_user_id,omitempty"`
	LeadId          uint64 `protobuf:"varint,5,opt,name=lead_id,json=leadId" json:"lead_id,omitempty"`
	ConversationId  uint64 `protobuf:"varint,6,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
}

func (m *GetUserRoleRequest) Reset()                    { *m = GetUserRoleRequest{} }
func (m *GetUserRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRoleRequest) ProtoMessage()               {}
func (*GetUserRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetUserRoleRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserRoleRequest) GetInstagramUserId() uint64 {
	if m != nil {
		return m.InstagramUserId
	}
	return 0
}

func (m *GetUserRoleRequest) GetLeadId() uint64 {
	if m != nil {
		return m.LeadId
	}
	return 0
}

func (m *GetUserRoleRequest) GetConversationId() uint64 {
	if m != nil {
		return m.ConversationId
	}
	return 0
}

type GetUserRoleReply struct {
	Role  LeadUserRole `protobuf:"varint,1,opt,name=role,enum=core.LeadUserRole" json:"role,omitempty"`
	Error string       `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *GetUserRoleReply) Reset()                    { *m = GetUserRoleReply{} }
func (m *GetUserRoleReply) String() string            { return proto.CompactTextString(m) }
func (*GetUserRoleReply) ProtoMessage()               {}
func (*GetUserRoleReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetUserRoleReply) GetRole() LeadUserRole {
	if m != nil {
		return m.Role
	}
	return LeadUserRole_UNKNOWN
}

func (m *GetUserRoleReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetPlanRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetPlanRequest) Reset()                    { *m = GetPlanRequest{} }
func (m *GetPlanRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPlanRequest) ProtoMessage()               {}
func (*GetPlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetPlanRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetPlansListRequest struct {
	Currency string `protobuf:"bytes,1,opt,name=currency" json:"currency,omitempty"`
}

func (m *GetPlansListRequest) Reset()                    { *m = GetPlansListRequest{} }
func (m *GetPlansListRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPlansListRequest) ProtoMessage()               {}
func (*GetPlansListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetPlansListRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type MonezationPlan struct {
	Id                    uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                  string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	About                 string  `protobuf:"bytes,3,opt,name=about" json:"about,omitempty"`
	PrimaryCurrency       string  `protobuf:"bytes,4,opt,name=primary_currency,json=primaryCurrency" json:"primary_currency,omitempty"`
	SubscriptionPeriod    uint64  `protobuf:"varint,5,opt,name=subscription_period,json=subscriptionPeriod" json:"subscription_period,omitempty"`
	SubscriptionPrice     uint64  `protobuf:"varint,6,opt,name=subscription_price,json=subscriptionPrice" json:"subscription_price,omitempty"`
	TransactionCommission float64 `protobuf:"fixed64,7,opt,name=transaction_commission,json=transactionCommission" json:"transaction_commission,omitempty"`
	CoinsExchangeRate     float64 `protobuf:"fixed64,8,opt,name=coins_exchange_rate,json=coinsExchangeRate" json:"coins_exchange_rate,omitempty"`
	Public                bool    `protobuf:"varint,9,opt,name=public" json:"public,omitempty"`
}

func (m *MonezationPlan) Reset()                    { *m = MonezationPlan{} }
func (m *MonezationPlan) String() string            { return proto.CompactTextString(m) }
func (*MonezationPlan) ProtoMessage()               {}
func (*MonezationPlan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *MonezationPlan) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MonezationPlan) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MonezationPlan) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *MonezationPlan) GetPrimaryCurrency() string {
	if m != nil {
		return m.PrimaryCurrency
	}
	return ""
}

func (m *MonezationPlan) GetSubscriptionPeriod() uint64 {
	if m != nil {
		return m.SubscriptionPeriod
	}
	return 0
}

func (m *MonezationPlan) GetSubscriptionPrice() uint64 {
	if m != nil {
		return m.SubscriptionPrice
	}
	return 0
}

func (m *MonezationPlan) GetTransactionCommission() float64 {
	if m != nil {
		return m.TransactionCommission
	}
	return 0
}

func (m *MonezationPlan) GetCoinsExchangeRate() float64 {
	if m != nil {
		return m.CoinsExchangeRate
	}
	return 0
}

func (m *MonezationPlan) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

type GetPlanReply struct {
	Plan  *MonezationPlan `protobuf:"bytes,1,opt,name=plan" json:"plan,omitempty"`
	Error string          `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *GetPlanReply) Reset()                    { *m = GetPlanReply{} }
func (m *GetPlanReply) String() string            { return proto.CompactTextString(m) }
func (*GetPlanReply) ProtoMessage()               {}
func (*GetPlanReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetPlanReply) GetPlan() *MonezationPlan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *GetPlanReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetPlansListReply struct {
	Plans []*MonezationPlan `protobuf:"bytes,1,rep,name=plans" json:"plans,omitempty"`
	Error string            `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *GetPlansListReply) Reset()                    { *m = GetPlansListReply{} }
func (m *GetPlansListReply) String() string            { return proto.CompactTextString(m) }
func (*GetPlansListReply) ProtoMessage()               {}
func (*GetPlansListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetPlansListReply) GetPlans() []*MonezationPlan {
	if m != nil {
		return m.Plans
	}
	return nil
}

func (m *GetPlansListReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type CoinsOffer struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Amount   uint64 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Price    uint64 `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	Currency string `protobuf:"bytes,4,opt,name=currency" json:"currency,omitempty"`
}

func (m *CoinsOffer) Reset()                    { *m = CoinsOffer{} }
func (m *CoinsOffer) String() string            { return proto.CompactTextString(m) }
func (*CoinsOffer) ProtoMessage()               {}
func (*CoinsOffer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CoinsOffer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoinsOffer) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CoinsOffer) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *CoinsOffer) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type GetCoinsOffersRequest struct {
	Currency string `protobuf:"bytes,1,opt,name=currency" json:"currency,omitempty"`
	// get single offer by id
	OfferId uint64 `protobuf:"varint,2,opt,name=offer_id,json=offerId" json:"offer_id,omitempty"`
}

func (m *GetCoinsOffersRequest) Reset()                    { *m = GetCoinsOffersRequest{} }
func (m *GetCoinsOffersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCoinsOffersRequest) ProtoMessage()               {}
func (*GetCoinsOffersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetCoinsOffersRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *GetCoinsOffersRequest) GetOfferId() uint64 {
	if m != nil {
		return m.OfferId
	}
	return 0
}

type GetCoinsOffersReply struct {
	Offers []*CoinsOffer `protobuf:"bytes,1,rep,name=offers" json:"offers,omitempty"`
	Error  string        `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *GetCoinsOffersReply) Reset()                    { *m = GetCoinsOffersReply{} }
func (m *GetCoinsOffersReply) String() string            { return proto.CompactTextString(m) }
func (*GetCoinsOffersReply) ProtoMessage()               {}
func (*GetCoinsOffersReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *GetCoinsOffersReply) GetOffers() []*CoinsOffer {
	if m != nil {
		return m.Offers
	}
	return nil
}

func (m *GetCoinsOffersReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SubscribeRequest struct {
	ShopId uint64 `protobuf:"varint,1,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	// should be supplier of shop
	UserId      uint64 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PlanId      uint64 `protobuf:"varint,3,opt,name=plan_id,json=planId" json:"plan_id,omitempty"`
	AutoRenewal bool   `protobuf:"varint,4,opt,name=auto_renewal,json=autoRenewal" json:"auto_renewal,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *SubscribeRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *SubscribeRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SubscribeRequest) GetPlanId() uint64 {
	if m != nil {
		return m.PlanId
	}
	return 0
}

func (m *SubscribeRequest) GetAutoRenewal() bool {
	if m != nil {
		return m.AutoRenewal
	}
	return false
}

type SubscribeReply struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *SubscribeReply) Reset()                    { *m = SubscribeReply{} }
func (m *SubscribeReply) String() string            { return proto.CompactTextString(m) }
func (*SubscribeReply) ProtoMessage()               {}
func (*SubscribeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *SubscribeReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *SubscribeReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SetAutorefillRequest struct {
	UserId  uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OfferId uint64 `protobuf:"varint,2,opt,name=offer_id,json=offerId" json:"offer_id,omitempty"`
}

func (m *SetAutorefillRequest) Reset()                    { *m = SetAutorefillRequest{} }
func (m *SetAutorefillRequest) String() string            { return proto.CompactTextString(m) }
func (*SetAutorefillRequest) ProtoMessage()               {}
func (*SetAutorefillRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *SetAutorefillRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetAutorefillRequest) GetOfferId() uint64 {
	if m != nil {
		return m.OfferId
	}
	return 0
}

type SetAutorefillReply struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *SetAutorefillReply) Reset()                    { *m = SetAutorefillReply{} }
func (m *SetAutorefillReply) String() string            { return proto.CompactTextString(m) }
func (*SetAutorefillReply) ProtoMessage()               {}
func (*SetAutorefillReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *SetAutorefillReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetProductRequest struct {
	// Types that are valid to be assigned to SearchBy:
	//	*GetProductRequest_Id
	//	*GetProductRequest_Code
	//	*GetProductRequest_MediaId
	SearchBy    isGetProductRequest_SearchBy `protobuf_oneof:"search_by"`
	WithDeleted bool                         `protobuf:"varint,4,opt,name=with_deleted,json=withDeleted" json:"with_deleted,omitempty"`
	// optional user id, we want to know if user liked this product before
	UserId uint64 `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetProductRequest) Reset()                    { *m = GetProductRequest{} }
func (m *GetProductRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProductRequest) ProtoMessage()               {}
func (*GetProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

type isGetProductRequest_SearchBy interface {
	isGetProductRequest_SearchBy()
}

type GetProductRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,oneof"`
}
type GetProductRequest_Code struct {
	Code string `protobuf:"bytes,2,opt,name=code,oneof"`
}
type GetProductRequest_MediaId struct {
	MediaId string `protobuf:"bytes,3,opt,name=media_id,json=mediaId,oneof"`
}

func (*GetProductRequest_Id) isGetProductRequest_SearchBy()      {}
func (*GetProductRequest_Code) isGetProductRequest_SearchBy()    {}
func (*GetProductRequest_MediaId) isGetProductRequest_SearchBy() {}

func (m *GetProductRequest) GetSearchBy() isGetProductRequest_SearchBy {
	if m != nil {
		return m.SearchBy
	}
	return nil
}

func (m *GetProductRequest) GetId() int64 {
	if x, ok := m.GetSearchBy().(*GetProductRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (m *GetProductRequest) GetCode() string {
	if x, ok := m.GetSearchBy().(*GetProductRequest_Code); ok {
		return x.Code
	}
	return ""
}

func (m *GetProductRequest) GetMediaId() string {
	if x, ok := m.GetSearchBy().(*GetProductRequest_MediaId); ok {
		return x.MediaId
	}
	return ""
}

func (m *GetProductRequest) GetWithDeleted() bool {
	if m != nil {
		return m.WithDeleted
	}
	return false
}

func (m *GetProductRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetProductRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetProductRequest_OneofMarshaler, _GetProductRequest_OneofUnmarshaler, _GetProductRequest_OneofSizer, []interface{}{
		(*GetProductRequest_Id)(nil),
		(*GetProductRequest_Code)(nil),
		(*GetProductRequest_MediaId)(nil),
	}
}

func _GetProductRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetProductRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *GetProductRequest_Id:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Id))
	case *GetProductRequest_Code:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Code)
	case *GetProductRequest_MediaId:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.MediaId)
	case nil:
	default:
		return fmt.Errorf("GetProductRequest.SearchBy has unexpected type %T", x)
	}
	return nil
}

func _GetProductRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetProductRequest)
	switch tag {
	case 1: // search_by.id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SearchBy = &GetProductRequest_Id{int64(x)}
		return true, err
	case 2: // search_by.code
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.SearchBy = &GetProductRequest_Code{x}
		return true, err
	case 3: // search_by.media_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.SearchBy = &GetProductRequest_MediaId{x}
		return true, err
	default:
		return false, nil
	}
}

func _GetProductRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetProductRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *GetProductRequest_Id:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Id))
	case *GetProductRequest_Code:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Code)))
		n += len(x.Code)
	case *GetProductRequest_MediaId:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.MediaId)))
		n += len(x.MediaId)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SearchProductRequest struct {
	Keyword string  `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	Tags    []int64 `protobuf:"varint,2,rep,packed,name=tags" json:"tags,omitempty"`
	Limit   int64   `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// Types that are valid to be assigned to OffsetBy:
	//	*SearchProductRequest_Offset
	//	*SearchProductRequest_FromId
	OffsetBy   isSearchProductRequest_OffsetBy `protobuf_oneof:"offset_by"`
	IsSaleOnly bool                            `protobuf:"varint,6,opt,name=is_sale_only,json=isSaleOnly" json:"is_sale_only,omitempty"`
	// false - desc, true - asc
	OffsetDirection bool `protobuf:"varint,7,opt,name=offset_direction,json=offsetDirection" json:"offset_direction,omitempty"`
	// that was one-of once
	UserId uint64 `protobuf:"varint,8,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ShopId uint64 `protobuf:"varint,9,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	// user or shop instagram_name
	InstagramName string `protobuf:"bytes,10,opt,name=instagram_name,json=instagramName" json:"instagram_name,omitempty"`
}

func (m *SearchProductRequest) Reset()                    { *m = SearchProductRequest{} }
func (m *SearchProductRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchProductRequest) ProtoMessage()               {}
func (*SearchProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type isSearchProductRequest_OffsetBy interface {
	isSearchProductRequest_OffsetBy()
}

type SearchProductRequest_Offset struct {
	Offset int64 `protobuf:"varint,4,opt,name=offset,oneof"`
}
type SearchProductRequest_FromId struct {
	FromId uint64 `protobuf:"varint,5,opt,name=from_id,json=fromId,oneof"`
}

func (*SearchProductRequest_Offset) isSearchProductRequest_OffsetBy() {}
func (*SearchProductRequest_FromId) isSearchProductRequest_OffsetBy() {}

func (m *SearchProductRequest) GetOffsetBy() isSearchProductRequest_OffsetBy {
	if m != nil {
		return m.OffsetBy
	}
	return nil
}

func (m *SearchProductRequest) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SearchProductRequest) GetTags() []int64 {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SearchProductRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchProductRequest) GetOffset() int64 {
	if x, ok := m.GetOffsetBy().(*SearchProductRequest_Offset); ok {
		return x.Offset
	}
	return 0
}

func (m *SearchProductRequest) GetFromId() uint64 {
	if x, ok := m.GetOffsetBy().(*SearchProductRequest_FromId); ok {
		return x.FromId
	}
	return 0
}

func (m *SearchProductRequest) GetIsSaleOnly() bool {
	if m != nil {
		return m.IsSaleOnly
	}
	return false
}

func (m *SearchProductRequest) GetOffsetDirection() bool {
	if m != nil {
		return m.OffsetDirection
	}
	return false
}

func (m *SearchProductRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SearchProductRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *SearchProductRequest) GetInstagramName() string {
	if m != nil {
		return m.InstagramName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SearchProductRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SearchProductRequest_OneofMarshaler, _SearchProductRequest_OneofUnmarshaler, _SearchProductRequest_OneofSizer, []interface{}{
		(*SearchProductRequest_Offset)(nil),
		(*SearchProductRequest_FromId)(nil),
	}
}

func _SearchProductRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SearchProductRequest)
	// offset_by
	switch x := m.OffsetBy.(type) {
	case *SearchProductRequest_Offset:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Offset))
	case *SearchProductRequest_FromId:
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.FromId))
	case nil:
	default:
		return fmt.Errorf("SearchProductRequest.OffsetBy has unexpected type %T", x)
	}
	return nil
}

func _SearchProductRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SearchProductRequest)
	switch tag {
	case 4: // offset_by.offset
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.OffsetBy = &SearchProductRequest_Offset{int64(x)}
		return true, err
	case 5: // offset_by.from_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.OffsetBy = &SearchProductRequest_FromId{x}
		return true, err
	default:
		return false, nil
	}
}

func _SearchProductRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SearchProductRequest)
	// offset_by
	switch x := m.OffsetBy.(type) {
	case *SearchProductRequest_Offset:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Offset))
	case *SearchProductRequest_FromId:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.FromId))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ProductSearchResult struct {
	Result []*Product `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *ProductSearchResult) Reset()                    { *m = ProductSearchResult{} }
func (m *ProductSearchResult) String() string            { return proto.CompactTextString(m) }
func (*ProductSearchResult) ProtoMessage()               {}
func (*ProductSearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ProductSearchResult) GetResult() []*Product {
	if m != nil {
		return m.Result
	}
	return nil
}

type ProductReadResult struct {
	Id      int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Deleted bool  `protobuf:"varint,2,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *ProductReadResult) Reset()                    { *m = ProductReadResult{} }
func (m *ProductReadResult) String() string            { return proto.CompactTextString(m) }
func (*ProductReadResult) ProtoMessage()               {}
func (*ProductReadResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *ProductReadResult) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ProductReadResult) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type CreateProductRequest struct {
	Product     *Product `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	MentionedBy uint64   `protobuf:"varint,2,opt,name=mentioned_by,json=mentionedBy" json:"mentioned_by,omitempty"`
}

func (m *CreateProductRequest) Reset()                    { *m = CreateProductRequest{} }
func (m *CreateProductRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateProductRequest) ProtoMessage()               {}
func (*CreateProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *CreateProductRequest) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *CreateProductRequest) GetMentionedBy() uint64 {
	if m != nil {
		return m.MentionedBy
	}
	return 0
}

type CreateProductResult struct {
	Id     int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Exists bool   `protobuf:"varint,2,opt,name=exists" json:"exists,omitempty"`
	Code   string `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
}

func (m *CreateProductResult) Reset()                    { *m = CreateProductResult{} }
func (m *CreateProductResult) String() string            { return proto.CompactTextString(m) }
func (*CreateProductResult) ProtoMessage()               {}
func (*CreateProductResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *CreateProductResult) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreateProductResult) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *CreateProductResult) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// representation of product model
type Product struct {
	Id                      int64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title                   string            `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Code                    string            `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
	InstagramImageCaption   string            `protobuf:"bytes,4,opt,name=instagram_image_caption,json=instagramImageCaption" json:"instagram_image_caption,omitempty"`
	InstagramImageId        string            `protobuf:"bytes,5,opt,name=instagram_image_id,json=instagramImageId" json:"instagram_image_id,omitempty"`
	InstagramImageUrl       string            `protobuf:"bytes,6,opt,name=instagram_image_url,json=instagramImageUrl" json:"instagram_image_url,omitempty"`
	InstagramLink           string            `protobuf:"bytes,7,opt,name=instagram_link,json=instagramLink" json:"instagram_link,omitempty"`
	InstagramImageWidth     uint32            `protobuf:"varint,16,opt,name=instagram_image_width,json=instagramImageWidth" json:"instagram_image_width,omitempty"`
	InstagramImageHeight    uint32            `protobuf:"varint,17,opt,name=instagram_image_height,json=instagramImageHeight" json:"instagram_image_height,omitempty"`
	InstagramPublishedAt    int64             `protobuf:"varint,8,opt,name=instagram_published_at,json=instagramPublishedAt" json:"instagram_published_at,omitempty"`
	InstagramLikesCount     int32             `protobuf:"varint,9,opt,name=instagram_likes_count,json=instagramLikesCount" json:"instagram_likes_count,omitempty"`
	SupplierId              int64             `protobuf:"varint,10,opt,name=supplier_id,json=supplierId" json:"supplier_id,omitempty"`
	Supplier                *Shop             `protobuf:"bytes,11,opt,name=supplier" json:"supplier,omitempty"`
	MentionedId             int64             `protobuf:"varint,12,opt,name=mentioned_id,json=mentionedId" json:"mentioned_id,omitempty"`
	Mentioned               *User             `protobuf:"bytes,13,opt,name=mentioned" json:"mentioned,omitempty"`
	IsSale                  bool              `protobuf:"varint,14,opt,name=isSale" json:"isSale,omitempty"`
	Items                   []*ProductItem    `protobuf:"bytes,15,rep,name=items" json:"items,omitempty"`
	InstagramImages         []*ImageCandidate `protobuf:"bytes,18,rep,name=instagram_images,json=instagramImages" json:"instagram_images,omitempty"`
	LikedBy                 []*User           `protobuf:"bytes,19,rep,name=liked_by,json=likedBy" json:"liked_by,omitempty"`
	InstagramPublishedAtAgo int64             `protobuf:"varint,20,opt,name=instagram_published_at_ago,json=instagramPublishedAtAgo" json:"instagram_published_at_ago,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *Product) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Product) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Product) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Product) GetInstagramImageCaption() string {
	if m != nil {
		return m.InstagramImageCaption
	}
	return ""
}

func (m *Product) GetInstagramImageId() string {
	if m != nil {
		return m.InstagramImageId
	}
	return ""
}

func (m *Product) GetInstagramImageUrl() string {
	if m != nil {
		return m.InstagramImageUrl
	}
	return ""
}

func (m *Product) GetInstagramLink() string {
	if m != nil {
		return m.InstagramLink
	}
	return ""
}

func (m *Product) GetInstagramImageWidth() uint32 {
	if m != nil {
		return m.InstagramImageWidth
	}
	return 0
}

func (m *Product) GetInstagramImageHeight() uint32 {
	if m != nil {
		return m.InstagramImageHeight
	}
	return 0
}

func (m *Product) GetInstagramPublishedAt() int64 {
	if m != nil {
		return m.InstagramPublishedAt
	}
	return 0
}

func (m *Product) GetInstagramLikesCount() int32 {
	if m != nil {
		return m.InstagramLikesCount
	}
	return 0
}

func (m *Product) GetSupplierId() int64 {
	if m != nil {
		return m.SupplierId
	}
	return 0
}

func (m *Product) GetSupplier() *Shop {
	if m != nil {
		return m.Supplier
	}
	return nil
}

func (m *Product) GetMentionedId() int64 {
	if m != nil {
		return m.MentionedId
	}
	return 0
}

func (m *Product) GetMentioned() *User {
	if m != nil {
		return m.Mentioned
	}
	return nil
}

func (m *Product) GetIsSale() bool {
	if m != nil {
		return m.IsSale
	}
	return false
}

func (m *Product) GetItems() []*ProductItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Product) GetInstagramImages() []*ImageCandidate {
	if m != nil {
		return m.InstagramImages
	}
	return nil
}

func (m *Product) GetLikedBy() []*User {
	if m != nil {
		return m.LikedBy
	}
	return nil
}

func (m *Product) GetInstagramPublishedAtAgo() int64 {
	if m != nil {
		return m.InstagramPublishedAtAgo
	}
	return 0
}

type ProductItem struct {
	Id            int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Price         uint64 `protobuf:"varint,10,opt,name=price" json:"price,omitempty"`
	DiscountPrice uint64 `protobuf:"varint,11,opt,name=discount_price,json=discountPrice" json:"discount_price,omitempty"`
	Tags          []*Tag `protobuf:"bytes,13,rep,name=tags" json:"tags,omitempty"`
}

func (m *ProductItem) Reset()                    { *m = ProductItem{} }
func (m *ProductItem) String() string            { return proto.CompactTextString(m) }
func (*ProductItem) ProtoMessage()               {}
func (*ProductItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *ProductItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ProductItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProductItem) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ProductItem) GetDiscountPrice() uint64 {
	if m != nil {
		return m.DiscountPrice
	}
	return 0
}

func (m *ProductItem) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ImageCandidate struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *ImageCandidate) Reset()                    { *m = ImageCandidate{} }
func (m *ImageCandidate) String() string            { return proto.CompactTextString(m) }
func (*ImageCandidate) ProtoMessage()               {}
func (*ImageCandidate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *ImageCandidate) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ImageCandidate) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ImageCandidate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetLikedByRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetLikedByRequest) Reset()                    { *m = GetLikedByRequest{} }
func (m *GetLikedByRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLikedByRequest) ProtoMessage()               {}
func (*GetLikedByRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *GetLikedByRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetLikedByReply struct {
	ProductIds []uint64 `protobuf:"varint,1,rep,packed,name=product_ids,json=productIds" json:"product_ids,omitempty"`
}

func (m *GetLikedByReply) Reset()                    { *m = GetLikedByReply{} }
func (m *GetLikedByReply) String() string            { return proto.CompactTextString(m) }
func (*GetLikedByReply) ProtoMessage()               {}
func (*GetLikedByReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *GetLikedByReply) GetProductIds() []uint64 {
	if m != nil {
		return m.ProductIds
	}
	return nil
}

type LikeProductRequest struct {
	UserId    uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ProductId uint64 `protobuf:"varint,2,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	// set false to remove like
	Like bool `protobuf:"varint,3,opt,name=like" json:"like,omitempty"`
}

func (m *LikeProductRequest) Reset()                    { *m = LikeProductRequest{} }
func (m *LikeProductRequest) String() string            { return proto.CompactTextString(m) }
func (*LikeProductRequest) ProtoMessage()               {}
func (*LikeProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *LikeProductRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *LikeProductRequest) GetProductId() uint64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *LikeProductRequest) GetLike() bool {
	if m != nil {
		return m.Like
	}
	return false
}

type LikeProductReply struct {
}

func (m *LikeProductReply) Reset()                    { *m = LikeProductReply{} }
func (m *LikeProductReply) String() string            { return proto.CompactTextString(m) }
func (*LikeProductReply) ProtoMessage()               {}
func (*LikeProductReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

type GetSpecialProductsRequest struct {
}

func (m *GetSpecialProductsRequest) Reset()                    { *m = GetSpecialProductsRequest{} }
func (m *GetSpecialProductsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSpecialProductsRequest) ProtoMessage()               {}
func (*GetSpecialProductsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

type SpecialProductInfo struct {
	Id    uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *SpecialProductInfo) Reset()                    { *m = SpecialProductInfo{} }
func (m *SpecialProductInfo) String() string            { return proto.CompactTextString(m) }
func (*SpecialProductInfo) ProtoMessage()               {}
func (*SpecialProductInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *SpecialProductInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SpecialProductInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type GetSpecialProductsReply struct {
	List []*SpecialProductInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Err  string                `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *GetSpecialProductsReply) Reset()                    { *m = GetSpecialProductsReply{} }
func (m *GetSpecialProductsReply) String() string            { return proto.CompactTextString(m) }
func (*GetSpecialProductsReply) ProtoMessage()               {}
func (*GetSpecialProductsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *GetSpecialProductsReply) GetList() []*SpecialProductInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *GetSpecialProductsReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type TokenInfo struct {
	Id     uint64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId uint64    `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Type   TokenType `protobuf:"varint,3,opt,name=type,enum=core.TokenType" json:"type,omitempty"`
	Token  string    `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
	About  string    `protobuf:"bytes,5,opt,name=about" json:"about,omitempty"`
}

func (m *TokenInfo) Reset()                    { *m = TokenInfo{} }
func (m *TokenInfo) String() string            { return proto.CompactTextString(m) }
func (*TokenInfo) ProtoMessage()               {}
func (*TokenInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *TokenInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TokenInfo) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TokenInfo) GetType() TokenType {
	if m != nil {
		return m.Type
	}
	return TokenType_Android
}

func (m *TokenInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenInfo) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

type AddTokenRequest struct {
	Token *TokenInfo `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AddTokenRequest) Reset()                    { *m = AddTokenRequest{} }
func (m *AddTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTokenRequest) ProtoMessage()               {}
func (*AddTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *AddTokenRequest) GetToken() *TokenInfo {
	if m != nil {
		return m.Token
	}
	return nil
}

type DelTokenRequest struct {
	TokenId uint64 `protobuf:"varint,1,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	// user_id should be same as in token. Error will be returned otherwise
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *DelTokenRequest) Reset()                    { *m = DelTokenRequest{} }
func (m *DelTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*DelTokenRequest) ProtoMessage()               {}
func (*DelTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *DelTokenRequest) GetTokenId() uint64 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

func (m *DelTokenRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type ErrorResult struct {
	// empty if there was no errors
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *ErrorResult) Reset()                    { *m = ErrorResult{} }
func (m *ErrorResult) String() string            { return proto.CompactTextString(m) }
func (*ErrorResult) ProtoMessage()               {}
func (*ErrorResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *ErrorResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetTokensRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetTokensRequest) Reset()                    { *m = GetTokensRequest{} }
func (m *GetTokensRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTokensRequest) ProtoMessage()               {}
func (*GetTokensRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *GetTokensRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetTokensResult struct {
	Tokens []*TokenInfo `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
	Error  string       `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *GetTokensResult) Reset()                    { *m = GetTokensResult{} }
func (m *GetTokensResult) String() string            { return proto.CompactTextString(m) }
func (*GetTokensResult) ProtoMessage()               {}
func (*GetTokensResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *GetTokensResult) GetTokens() []*TokenInfo {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *GetTokensResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type InvalidateTokensRequest struct {
	Type   TokenType `protobuf:"varint,1,opt,name=type,enum=core.TokenType" json:"type,omitempty"`
	Tokens []string  `protobuf:"bytes,2,rep,name=tokens" json:"tokens,omitempty"`
}

func (m *InvalidateTokensRequest) Reset()                    { *m = InvalidateTokensRequest{} }
func (m *InvalidateTokensRequest) String() string            { return proto.CompactTextString(m) }
func (*InvalidateTokensRequest) ProtoMessage()               {}
func (*InvalidateTokensRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *InvalidateTokensRequest) GetType() TokenType {
	if m != nil {
		return m.Type
	}
	return TokenType_Android
}

func (m *InvalidateTokensRequest) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type InvalidateTokensResult struct {
}

func (m *InvalidateTokensResult) Reset()                    { *m = InvalidateTokensResult{} }
func (m *InvalidateTokensResult) String() string            { return proto.CompactTextString(m) }
func (*InvalidateTokensResult) ProtoMessage()               {}
func (*InvalidateTokensResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

type UpdateTokenRequest struct {
	Type     TokenType `protobuf:"varint,1,opt,name=type,enum=core.TokenType" json:"type,omitempty"`
	OldToken string    `protobuf:"bytes,2,opt,name=old_token,json=oldToken" json:"old_token,omitempty"`
	NewToken string    `protobuf:"bytes,3,opt,name=new_token,json=newToken" json:"new_token,omitempty"`
}

func (m *UpdateTokenRequest) Reset()                    { *m = UpdateTokenRequest{} }
func (m *UpdateTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTokenRequest) ProtoMessage()               {}
func (*UpdateTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *UpdateTokenRequest) GetType() TokenType {
	if m != nil {
		return m.Type
	}
	return TokenType_Android
}

func (m *UpdateTokenRequest) GetOldToken() string {
	if m != nil {
		return m.OldToken
	}
	return ""
}

func (m *UpdateTokenRequest) GetNewToken() string {
	if m != nil {
		return m.NewToken
	}
	return ""
}

type UpdateTokenResult struct {
}

func (m *UpdateTokenResult) Reset()                    { *m = UpdateTokenResult{} }
func (m *UpdateTokenResult) String() string            { return proto.CompactTextString(m) }
func (*UpdateTokenResult) ProtoMessage()               {}
func (*UpdateTokenResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

type ShopCard struct {
	Id     uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ShopId uint64 `protobuf:"varint,2,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Number string `protobuf:"bytes,4,opt,name=number" json:"number,omitempty"`
	UserId uint64 `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ShopCard) Reset()                    { *m = ShopCard{} }
func (m *ShopCard) String() string            { return proto.CompactTextString(m) }
func (*ShopCard) ProtoMessage()               {}
func (*ShopCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *ShopCard) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ShopCard) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *ShopCard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ShopCard) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *ShopCard) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CreateCardRequest struct {
	Card *ShopCard `protobuf:"bytes,2,opt,name=card" json:"card,omitempty"`
}

func (m *CreateCardRequest) Reset()                    { *m = CreateCardRequest{} }
func (m *CreateCardRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCardRequest) ProtoMessage()               {}
func (*CreateCardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *CreateCardRequest) GetCard() *ShopCard {
	if m != nil {
		return m.Card
	}
	return nil
}

type CreateCardReply struct {
	Id   uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *CreateCardReply) Reset()                    { *m = CreateCardReply{} }
func (m *CreateCardReply) String() string            { return proto.CompactTextString(m) }
func (*CreateCardReply) ProtoMessage()               {}
func (*CreateCardReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *CreateCardReply) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreateCardReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteCardRequest struct {
	Id     uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *DeleteCardRequest) Reset()                    { *m = DeleteCardRequest{} }
func (m *DeleteCardRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCardRequest) ProtoMessage()               {}
func (*DeleteCardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *DeleteCardRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteCardRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type DeleteCardReply struct {
}

func (m *DeleteCardReply) Reset()                    { *m = DeleteCardReply{} }
func (m *DeleteCardReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteCardReply) ProtoMessage()               {}
func (*DeleteCardReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

type GetCardsRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ShopId uint64 `protobuf:"varint,2,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
}

func (m *GetCardsRequest) Reset()                    { *m = GetCardsRequest{} }
func (m *GetCardsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCardsRequest) ProtoMessage()               {}
func (*GetCardsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *GetCardsRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetCardsRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

type GetCardsReply struct {
	Cards []*ShopCard `protobuf:"bytes,1,rep,name=cards" json:"cards,omitempty"`
}

func (m *GetCardsReply) Reset()                    { *m = GetCardsReply{} }
func (m *GetCardsReply) String() string            { return proto.CompactTextString(m) }
func (*GetCardsReply) ProtoMessage()               {}
func (*GetCardsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *GetCardsReply) GetCards() []*ShopCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

type GetCardByIDRequest struct {
	Id     uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetCardByIDRequest) Reset()                    { *m = GetCardByIDRequest{} }
func (m *GetCardByIDRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCardByIDRequest) ProtoMessage()               {}
func (*GetCardByIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *GetCardByIDRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetCardByIDRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetCardReply struct {
	Card *ShopCard `protobuf:"bytes,1,opt,name=card" json:"card,omitempty"`
}

func (m *GetCardReply) Reset()                    { *m = GetCardReply{} }
func (m *GetCardReply) String() string            { return proto.CompactTextString(m) }
func (*GetCardReply) ProtoMessage()               {}
func (*GetCardReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *GetCardReply) GetCard() *ShopCard {
	if m != nil {
		return m.Card
	}
	return nil
}

// representation of shop model
type Shop struct {
	Id         int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SupplierId int64 `protobuf:"varint,2,opt,name=supplier_id,json=supplierId" json:"supplier_id,omitempty"`
	// @TODO most of data below will filled from this struct for compability
	// we need to update front and remove duplicate fields after it
	Supplier           *User   `protobuf:"bytes,3,opt,name=supplier" json:"supplier,omitempty"`
	InstagramId        uint64  `protobuf:"varint,4,opt,name=instagram_id,json=instagramId" json:"instagram_id,omitempty"`
	InstagramUsername  string  `protobuf:"bytes,5,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	InstagramFullname  string  `protobuf:"bytes,6,opt,name=instagram_fullname,json=instagramFullname" json:"instagram_fullname,omitempty"`
	InstagramAvatarUrl string  `protobuf:"bytes,7,opt,name=instagram_avatar_url,json=instagramAvatarUrl" json:"instagram_avatar_url,omitempty"`
	InstagramCaption   string  `protobuf:"bytes,8,opt,name=instagram_caption,json=instagramCaption" json:"instagram_caption,omitempty"`
	InstagramWebsite   string  `protobuf:"bytes,9,opt,name=instagram_website,json=instagramWebsite" json:"instagram_website,omitempty"`
	PaymentRules       string  `protobuf:"bytes,10,opt,name=payment_rules,json=paymentRules" json:"payment_rules,omitempty"`
	ShippingRules      string  `protobuf:"bytes,11,opt,name=shipping_rules,json=shippingRules" json:"shipping_rules,omitempty"`
	Caption            string  `protobuf:"bytes,12,opt,name=caption" json:"caption,omitempty"`
	Sellers            []*User `protobuf:"bytes,13,rep,name=sellers" json:"sellers,omitempty"`
	AvatarUrl          string  `protobuf:"bytes,14,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	Slogan             string  `protobuf:"bytes,15,opt,name=slogan" json:"slogan,omitempty"`
	Available          bool    `protobuf:"varint,16,opt,name=available" json:"available,omitempty"`
	// unix time, seconds
	CreatedAt uint64 `protobuf:"varint,17,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// true if shop has no active monetization plan
	Suspended bool   `protobuf:"varint,18,opt,name=suspended" json:"suspended,omitempty"`
	PlanId    uint64 `protobuf:"varint,19,opt,name=plan_id,json=planId" json:"plan_id,omitempty"`
	// may be zero for plans without expiration
	// DO NOT use this field to determinate whether shop has active plan, check "suspended" field instead
	PlanExpiresAt int64 `protobuf:"varint,20,opt,name=plan_expires_at,json=planExpiresAt" json:"plan_expires_at,omitempty"`
	AutoRenewal   bool  `protobuf:"varint,21,opt,name=auto_renewal,json=autoRenewal" json:"auto_renewal,omitempty"`
}

func (m *Shop) Reset()                    { *m = Shop{} }
func (m *Shop) String() string            { return proto.CompactTextString(m) }
func (*Shop) ProtoMessage()               {}
func (*Shop) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *Shop) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Shop) GetSupplierId() int64 {
	if m != nil {
		return m.SupplierId
	}
	return 0
}

func (m *Shop) GetSupplier() *User {
	if m != nil {
		return m.Supplier
	}
	return nil
}

func (m *Shop) GetInstagramId() uint64 {
	if m != nil {
		return m.InstagramId
	}
	return 0
}

func (m *Shop) GetInstagramUsername() string {
	if m != nil {
		return m.InstagramUsername
	}
	return ""
}

func (m *Shop) GetInstagramFullname() string {
	if m != nil {
		return m.InstagramFullname
	}
	return ""
}

func (m *Shop) GetInstagramAvatarUrl() string {
	if m != nil {
		return m.InstagramAvatarUrl
	}
	return ""
}

func (m *Shop) GetInstagramCaption() string {
	if m != nil {
		return m.InstagramCaption
	}
	return ""
}

func (m *Shop) GetInstagramWebsite() string {
	if m != nil {
		return m.InstagramWebsite
	}
	return ""
}

func (m *Shop) GetPaymentRules() string {
	if m != nil {
		return m.PaymentRules
	}
	return ""
}

func (m *Shop) GetShippingRules() string {
	if m != nil {
		return m.ShippingRules
	}
	return ""
}

func (m *Shop) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *Shop) GetSellers() []*User {
	if m != nil {
		return m.Sellers
	}
	return nil
}

func (m *Shop) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *Shop) GetSlogan() string {
	if m != nil {
		return m.Slogan
	}
	return ""
}

func (m *Shop) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *Shop) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Shop) GetSuspended() bool {
	if m != nil {
		return m.Suspended
	}
	return false
}

func (m *Shop) GetPlanId() uint64 {
	if m != nil {
		return m.PlanId
	}
	return 0
}

func (m *Shop) GetPlanExpiresAt() int64 {
	if m != nil {
		return m.PlanExpiresAt
	}
	return 0
}

func (m *Shop) GetAutoRenewal() bool {
	if m != nil {
		return m.AutoRenewal
	}
	return false
}

type ShopProfileRequest struct {
	// Types that are valid to be assigned to SearchBy:
	//	*ShopProfileRequest_InstagramName
	//	*ShopProfileRequest_Id
	SearchBy isShopProfileRequest_SearchBy `protobuf_oneof:"search_by"`
}

func (m *ShopProfileRequest) Reset()                    { *m = ShopProfileRequest{} }
func (m *ShopProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*ShopProfileRequest) ProtoMessage()               {}
func (*ShopProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

type isShopProfileRequest_SearchBy interface {
	isShopProfileRequest_SearchBy()
}

type ShopProfileRequest_InstagramName struct {
	InstagramName string `protobuf:"bytes,1,opt,name=instagram_name,json=instagramName,oneof"`
}
type ShopProfileRequest_Id struct {
	Id uint64 `protobuf:"varint,2,opt,name=id,oneof"`
}

func (*ShopProfileRequest_InstagramName) isShopProfileRequest_SearchBy() {}
func (*ShopProfileRequest_Id) isShopProfileRequest_SearchBy()            {}

func (m *ShopProfileRequest) GetSearchBy() isShopProfileRequest_SearchBy {
	if m != nil {
		return m.SearchBy
	}
	return nil
}

func (m *ShopProfileRequest) GetInstagramName() string {
	if x, ok := m.GetSearchBy().(*ShopProfileRequest_InstagramName); ok {
		return x.InstagramName
	}
	return ""
}

func (m *ShopProfileRequest) GetId() uint64 {
	if x, ok := m.GetSearchBy().(*ShopProfileRequest_Id); ok {
		return x.Id
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ShopProfileRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ShopProfileRequest_OneofMarshaler, _ShopProfileRequest_OneofUnmarshaler, _ShopProfileRequest_OneofSizer, []interface{}{
		(*ShopProfileRequest_InstagramName)(nil),
		(*ShopProfileRequest_Id)(nil),
	}
}

func _ShopProfileRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ShopProfileRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *ShopProfileRequest_InstagramName:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.InstagramName)
	case *ShopProfileRequest_Id:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Id))
	case nil:
	default:
		return fmt.Errorf("ShopProfileRequest.SearchBy has unexpected type %T", x)
	}
	return nil
}

func _ShopProfileRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ShopProfileRequest)
	switch tag {
	case 1: // search_by.instagram_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.SearchBy = &ShopProfileRequest_InstagramName{x}
		return true, err
	case 2: // search_by.id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SearchBy = &ShopProfileRequest_Id{x}
		return true, err
	default:
		return false, nil
	}
}

func _ShopProfileRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ShopProfileRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *ShopProfileRequest_InstagramName:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.InstagramName)))
		n += len(x.InstagramName)
	case *ShopProfileRequest_Id:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Id))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ShopProfileReply struct {
	Shop *Shop `protobuf:"bytes,1,opt,name=shop" json:"shop,omitempty"`
}

func (m *ShopProfileReply) Reset()                    { *m = ShopProfileReply{} }
func (m *ShopProfileReply) String() string            { return proto.CompactTextString(m) }
func (*ShopProfileReply) ProtoMessage()               {}
func (*ShopProfileReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *ShopProfileReply) GetShop() *Shop {
	if m != nil {
		return m.Shop
	}
	return nil
}

type FindOrCreateShopForSupplierRequest struct {
	SupplierId uint64 `protobuf:"varint,1,opt,name=supplier_id,json=supplierId" json:"supplier_id,omitempty"`
	// when false shop will not be recreated if it was deleted
	RecreateDeleted bool `protobuf:"varint,2,opt,name=recreate_deleted,json=recreateDeleted" json:"recreate_deleted,omitempty"`
}

func (m *FindOrCreateShopForSupplierRequest) Reset()         { *m = FindOrCreateShopForSupplierRequest{} }
func (m *FindOrCreateShopForSupplierRequest) String() string { return proto.CompactTextString(m) }
func (*FindOrCreateShopForSupplierRequest) ProtoMessage()    {}
func (*FindOrCreateShopForSupplierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{71}
}

func (m *FindOrCreateShopForSupplierRequest) GetSupplierId() uint64 {
	if m != nil {
		return m.SupplierId
	}
	return 0
}

func (m *FindOrCreateShopForSupplierRequest) GetRecreateDeleted() bool {
	if m != nil {
		return m.RecreateDeleted
	}
	return false
}

type FindOrCreateShopForSupplierReply struct {
	ShopId  uint64 `protobuf:"varint,1,opt,name=shop_id,json=shopId" json:"shop_id,omitempty"`
	Deleted bool   `protobuf:"varint,2,opt,name=deleted" json:"deleted,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *FindOrCreateShopForSupplierReply) Reset()         { *m = FindOrCreateShopForSupplierReply{} }
func (m *FindOrCreateShopForSupplierReply) String() string { return proto.CompactTextString(m) }
func (*FindOrCreateShopForSupplierReply) ProtoMessage()    {}
func (*FindOrCreateShopForSupplierReply) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{72}
}

func (m *FindOrCreateShopForSupplierReply) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *FindOrCreateShopForSupplierReply) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *FindOrCreateShopForSupplierReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetMainTagsRequest struct {
	Limit int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
}

func (m *GetMainTagsRequest) Reset()                    { *m = GetMainTagsRequest{} }
func (m *GetMainTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMainTagsRequest) ProtoMessage()               {}
func (*GetMainTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *GetMainTagsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetRelatedTagsRequest struct {
	// tag list
	Tags  []int64 `protobuf:"varint,1,rep,packed,name=tags" json:"tags,omitempty"`
	Limit int64   `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *GetRelatedTagsRequest) Reset()                    { *m = GetRelatedTagsRequest{} }
func (m *GetRelatedTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRelatedTagsRequest) ProtoMessage()               {}
func (*GetRelatedTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *GetRelatedTagsRequest) GetTags() []int64 {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *GetRelatedTagsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// tag object list
type TagSearchResult struct {
	Result []*Tag `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *TagSearchResult) Reset()                    { *m = TagSearchResult{} }
func (m *TagSearchResult) String() string            { return proto.CompactTextString(m) }
func (*TagSearchResult) ProtoMessage()               {}
func (*TagSearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *TagSearchResult) GetResult() []*Tag {
	if m != nil {
		return m.Result
	}
	return nil
}

// tag model representation
type Tag struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *Tag) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateUserRequest struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *CreateUserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

// where instagram_id = ? OR phone = ? OR instagram_username = ? OR name = ?
type ReadUserRequest struct {
	InstagramId       uint64 `protobuf:"varint,1,opt,name=instagram_id,json=instagramId" json:"instagram_id,omitempty"`
	Phone             string `protobuf:"bytes,2,opt,name=phone" json:"phone,omitempty"`
	InstagramUsername string `protobuf:"bytes,3,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	Name              string `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	// direct by user.id
	Id uint64 `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
	// if true PuclicEncode will be used(phone/mail will be empty)
	Public bool `protobuf:"varint,5,opt,name=public" json:"public,omitempty"`
	// if true list of relared shops will be provided
	GetShops bool `protobuf:"varint,6,opt,name=get_shops,json=getShops" json:"get_shops,omitempty"`
}

func (m *ReadUserRequest) Reset()                    { *m = ReadUserRequest{} }
func (m *ReadUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadUserRequest) ProtoMessage()               {}
func (*ReadUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *ReadUserRequest) GetInstagramId() uint64 {
	if m != nil {
		return m.InstagramId
	}
	return 0
}

func (m *ReadUserRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ReadUserRequest) GetInstagramUsername() string {
	if m != nil {
		return m.InstagramUsername
	}
	return ""
}

func (m *ReadUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReadUserRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReadUserRequest) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *ReadUserRequest) GetGetShops() bool {
	if m != nil {
		return m.GetShops
	}
	return false
}

type SearchUserReply struct {
	Result []*User `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *SearchUserReply) Reset()                    { *m = SearchUserReply{} }
func (m *SearchUserReply) String() string            { return proto.CompactTextString(m) }
func (*SearchUserReply) ProtoMessage()               {}
func (*SearchUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *SearchUserReply) GetResult() []*User {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadUserReply struct {
	Id   int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	User *User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *ReadUserReply) Reset()                    { *m = ReadUserReply{} }
func (m *ReadUserReply) String() string            { return proto.CompactTextString(m) }
func (*ReadUserReply) ProtoMessage()               {}
func (*ReadUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *ReadUserReply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReadUserReply) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

// representation of user model
type User struct {
	Id                 int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email              string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Phone              string `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	Website            string `protobuf:"bytes,5,opt,name=website" json:"website,omitempty"`
	Caption            string `protobuf:"bytes,13,opt,name=caption" json:"caption,omitempty"`
	AvatarUrl          string `protobuf:"bytes,17,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	Slogan             string `protobuf:"bytes,18,opt,name=slogan" json:"slogan,omitempty"`
	InstagramId        uint64 `protobuf:"varint,6,opt,name=instagram_id,json=instagramId" json:"instagram_id,omitempty"`
	InstagramUsername  string `protobuf:"bytes,7,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	InstagramFullname  string `protobuf:"bytes,8,opt,name=instagram_fullname,json=instagramFullname" json:"instagram_fullname,omitempty"`
	InstagramAvatarUrl string `protobuf:"bytes,9,opt,name=instagram_avatar_url,json=instagramAvatarUrl" json:"instagram_avatar_url,omitempty"`
	InstagramCaption   string `protobuf:"bytes,10,opt,name=instagram_caption,json=instagramCaption" json:"instagram_caption,omitempty"`
	OptOut             bool   `protobuf:"varint,11,opt,name=opt_out,json=optOut" json:"opt_out,omitempty"`
	SuperSeller        bool   `protobuf:"varint,12,opt,name=super_seller,json=superSeller" json:"super_seller,omitempty"`
	HasEmail           bool   `protobuf:"varint,14,opt,name=has_email,json=hasEmail" json:"has_email,omitempty"`
	HasPhone           bool   `protobuf:"varint,15,opt,name=has_phone,json=hasPhone" json:"has_phone,omitempty"`
	Confirmed          bool   `protobuf:"varint,21,opt,name=confirmed" json:"confirmed,omitempty"`
	IsFake             bool   `protobuf:"varint,22,opt,name=is_fake,json=isFake" json:"is_fake,omitempty"`
	Seller             bool   `protobuf:"varint,16,opt,name=seller" json:"seller,omitempty"`
	// list of shops where user is a supplier
	SupplierOf []uint64 `protobuf:"varint,19,rep,packed,name=supplier_of,json=supplierOf" json:"supplier_of,omitempty"`
	// list of shops where user is a seller
	SellerOf []uint64 `protobuf:"varint,20,rep,packed,name=seller_of,json=sellerOf" json:"seller_of,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *User) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *User) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *User) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *User) GetSlogan() string {
	if m != nil {
		return m.Slogan
	}
	return ""
}

func (m *User) GetInstagramId() uint64 {
	if m != nil {
		return m.InstagramId
	}
	return 0
}

func (m *User) GetInstagramUsername() string {
	if m != nil {
		return m.InstagramUsername
	}
	return ""
}

func (m *User) GetInstagramFullname() string {
	if m != nil {
		return m.InstagramFullname
	}
	return ""
}

func (m *User) GetInstagramAvatarUrl() string {
	if m != nil {
		return m.InstagramAvatarUrl
	}
	return ""
}

func (m *User) GetInstagramCaption() string {
	if m != nil {
		return m.InstagramCaption
	}
	return ""
}

func (m *User) GetOptOut() bool {
	if m != nil {
		return m.OptOut
	}
	return false
}

func (m *User) GetSuperSeller() bool {
	if m != nil {
		return m.SuperSeller
	}
	return false
}

func (m *User) GetHasEmail() bool {
	if m != nil {
		return m.HasEmail
	}
	return false
}

func (m *User) GetHasPhone() bool {
	if m != nil {
		return m.HasPhone
	}
	return false
}

func (m *User) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *User) GetIsFake() bool {
	if m != nil {
		return m.IsFake
	}
	return false
}

func (m *User) GetSeller() bool {
	if m != nil {
		return m.Seller
	}
	return false
}

func (m *User) GetSupplierOf() []uint64 {
	if m != nil {
		return m.SupplierOf
	}
	return nil
}

func (m *User) GetSellerOf() []uint64 {
	if m != nil {
		return m.SellerOf
	}
	return nil
}

type SetEmailRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Email  string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (m *SetEmailRequest) Reset()                    { *m = SetEmailRequest{} }
func (m *SetEmailRequest) String() string            { return proto.CompactTextString(m) }
func (*SetEmailRequest) ProtoMessage()               {}
func (*SetEmailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *SetEmailRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetEmailRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type SetEmailReply struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *SetEmailReply) Reset()                    { *m = SetEmailReply{} }
func (m *SetEmailReply) String() string            { return proto.CompactTextString(m) }
func (*SetEmailReply) ProtoMessage()               {}
func (*SetEmailReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *SetEmailReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SetDataRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Phone  string `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`
}

func (m *SetDataRequest) Reset()                    { *m = SetDataRequest{} }
func (m *SetDataRequest) String() string            { return proto.CompactTextString(m) }
func (*SetDataRequest) ProtoMessage()               {}
func (*SetDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *SetDataRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetDataRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetDataRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type SetDataReply struct {
}

func (m *SetDataReply) Reset()                    { *m = SetDataReply{} }
func (m *SetDataReply) String() string            { return proto.CompactTextString(m) }
func (*SetDataReply) ProtoMessage()               {}
func (*SetDataReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func init() {
	proto.RegisterType((*ReadLeadRequest)(nil), "core.ReadLeadRequest")
	proto.RegisterType((*ReadLeadResult)(nil), "core.ReadLeadResult")
	proto.RegisterType((*Lead)(nil), "core.Lead")
	proto.RegisterType((*CreateLeadResult)(nil), "core.CreateLeadResult")
	proto.RegisterType((*UserLeadsRequest)(nil), "core.UserLeadsRequest")
	proto.RegisterType((*UserLeadsReply)(nil), "core.UserLeadsReply")
	proto.RegisterType((*LeadInfo)(nil), "core.LeadInfo")
	proto.RegisterType((*LeadEventMessage)(nil), "core.LeadEventMessage")
	proto.RegisterType((*SetLeadStatusRequest)(nil), "core.SetLeadStatusRequest")
	proto.RegisterType((*SetLeadStatusReply)(nil), "core.SetLeadStatusReply")
	proto.RegisterType((*CallSupplierRequest)(nil), "core.CallSupplierRequest")
	proto.RegisterType((*CallSupplierReply)(nil), "core.CallSupplierReply")
	proto.RegisterType((*CallCustomerRequest)(nil), "core.CallCustomerRequest")
	proto.RegisterType((*CallCustomerReply)(nil), "core.CallCustomerReply")
	proto.RegisterType((*GetLeadRequest)(nil), "core.GetLeadRequest")
	proto.RegisterType((*GetLeadReply)(nil), "core.GetLeadReply")
	proto.RegisterType((*GetCancelReasonsRequest)(nil), "core.GetCancelReasonsRequest")
	proto.RegisterType((*CancelReason)(nil), "core.CancelReason")
	proto.RegisterType((*GetCancelReasonsReply)(nil), "core.GetCancelReasonsReply")
	proto.RegisterType((*GetUserRoleRequest)(nil), "core.GetUserRoleRequest")
	proto.RegisterType((*GetUserRoleReply)(nil), "core.GetUserRoleReply")
	proto.RegisterType((*GetPlanRequest)(nil), "core.GetPlanRequest")
	proto.RegisterType((*GetPlansListRequest)(nil), "core.GetPlansListRequest")
	proto.RegisterType((*MonezationPlan)(nil), "core.MonezationPlan")
	proto.RegisterType((*GetPlanReply)(nil), "core.GetPlanReply")
	proto.RegisterType((*GetPlansListReply)(nil), "core.GetPlansListReply")
	proto.RegisterType((*CoinsOffer)(nil), "core.CoinsOffer")
	proto.RegisterType((*GetCoinsOffersRequest)(nil), "core.GetCoinsOffersRequest")
	proto.RegisterType((*GetCoinsOffersReply)(nil), "core.GetCoinsOffersReply")
	proto.RegisterType((*SubscribeRequest)(nil), "core.SubscribeRequest")
	proto.RegisterType((*SubscribeReply)(nil), "core.SubscribeReply")
	proto.RegisterType((*SetAutorefillRequest)(nil), "core.SetAutorefillRequest")
	proto.RegisterType((*SetAutorefillReply)(nil), "core.SetAutorefillReply")
	proto.RegisterType((*GetProductRequest)(nil), "core.GetProductRequest")
	proto.RegisterType((*SearchProductRequest)(nil), "core.SearchProductRequest")
	proto.RegisterType((*ProductSearchResult)(nil), "core.ProductSearchResult")
	proto.RegisterType((*ProductReadResult)(nil), "core.ProductReadResult")
	proto.RegisterType((*CreateProductRequest)(nil), "core.CreateProductRequest")
	proto.RegisterType((*CreateProductResult)(nil), "core.CreateProductResult")
	proto.RegisterType((*Product)(nil), "core.Product")
	proto.RegisterType((*ProductItem)(nil), "core.ProductItem")
	proto.RegisterType((*ImageCandidate)(nil), "core.ImageCandidate")
	proto.RegisterType((*GetLikedByRequest)(nil), "core.GetLikedByRequest")
	proto.RegisterType((*GetLikedByReply)(nil), "core.GetLikedByReply")
	proto.RegisterType((*LikeProductRequest)(nil), "core.LikeProductRequest")
	proto.RegisterType((*LikeProductReply)(nil), "core.LikeProductReply")
	proto.RegisterType((*GetSpecialProductsRequest)(nil), "core.GetSpecialProductsRequest")
	proto.RegisterType((*SpecialProductInfo)(nil), "core.SpecialProductInfo")
	proto.RegisterType((*GetSpecialProductsReply)(nil), "core.GetSpecialProductsReply")
	proto.RegisterType((*TokenInfo)(nil), "core.TokenInfo")
	proto.RegisterType((*AddTokenRequest)(nil), "core.AddTokenRequest")
	proto.RegisterType((*DelTokenRequest)(nil), "core.DelTokenRequest")
	proto.RegisterType((*ErrorResult)(nil), "core.ErrorResult")
	proto.RegisterType((*GetTokensRequest)(nil), "core.GetTokensRequest")
	proto.RegisterType((*GetTokensResult)(nil), "core.GetTokensResult")
	proto.RegisterType((*InvalidateTokensRequest)(nil), "core.InvalidateTokensRequest")
	proto.RegisterType((*InvalidateTokensResult)(nil), "core.InvalidateTokensResult")
	proto.RegisterType((*UpdateTokenRequest)(nil), "core.UpdateTokenRequest")
	proto.RegisterType((*UpdateTokenResult)(nil), "core.UpdateTokenResult")
	proto.RegisterType((*ShopCard)(nil), "core.ShopCard")
	proto.RegisterType((*CreateCardRequest)(nil), "core.CreateCardRequest")
	proto.RegisterType((*CreateCardReply)(nil), "core.CreateCardReply")
	proto.RegisterType((*DeleteCardRequest)(nil), "core.DeleteCardRequest")
	proto.RegisterType((*DeleteCardReply)(nil), "core.DeleteCardReply")
	proto.RegisterType((*GetCardsRequest)(nil), "core.GetCardsRequest")
	proto.RegisterType((*GetCardsReply)(nil), "core.GetCardsReply")
	proto.RegisterType((*GetCardByIDRequest)(nil), "core.GetCardByIDRequest")
	proto.RegisterType((*GetCardReply)(nil), "core.GetCardReply")
	proto.RegisterType((*Shop)(nil), "core.Shop")
	proto.RegisterType((*ShopProfileRequest)(nil), "core.ShopProfileRequest")
	proto.RegisterType((*ShopProfileReply)(nil), "core.ShopProfileReply")
	proto.RegisterType((*FindOrCreateShopForSupplierRequest)(nil), "core.FindOrCreateShopForSupplierRequest")
	proto.RegisterType((*FindOrCreateShopForSupplierReply)(nil), "core.FindOrCreateShopForSupplierReply")
	proto.RegisterType((*GetMainTagsRequest)(nil), "core.GetMainTagsRequest")
	proto.RegisterType((*GetRelatedTagsRequest)(nil), "core.GetRelatedTagsRequest")
	proto.RegisterType((*TagSearchResult)(nil), "core.TagSearchResult")
	proto.RegisterType((*Tag)(nil), "core.Tag")
	proto.RegisterType((*CreateUserRequest)(nil), "core.CreateUserRequest")
	proto.RegisterType((*ReadUserRequest)(nil), "core.ReadUserRequest")
	proto.RegisterType((*SearchUserReply)(nil), "core.SearchUserReply")
	proto.RegisterType((*ReadUserReply)(nil), "core.ReadUserReply")
	proto.RegisterType((*User)(nil), "core.User")
	proto.RegisterType((*SetEmailRequest)(nil), "core.SetEmailRequest")
	proto.RegisterType((*SetEmailReply)(nil), "core.SetEmailReply")
	proto.RegisterType((*SetDataRequest)(nil), "core.SetDataRequest")
	proto.RegisterType((*SetDataReply)(nil), "core.SetDataReply")
	proto.RegisterEnum("core.LeadAction", LeadAction_name, LeadAction_value)
	proto.RegisterEnum("core.LeadUserRole", LeadUserRole_name, LeadUserRole_value)
	proto.RegisterEnum("core.LeadStatus", LeadStatus_name, LeadStatus_value)
	proto.RegisterEnum("core.LeadStatusEvent", LeadStatusEvent_name, LeadStatusEvent_value)
	proto.RegisterEnum("core.TokenType", TokenType_name, TokenType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LeadService service

type LeadServiceClient interface {
	// Create lead. ID of created lead is returned
	CreateLead(ctx context.Context, in *Lead, opts ...grpc.CallOption) (*CreateLeadResult, error)
	// Find lead id
	ReadLead(ctx context.Context, in *ReadLeadRequest, opts ...grpc.CallOption) (*ReadLeadResult, error)
	// returns user leads filtred by user's roles
	GetUserLeads(ctx context.Context, in *UserLeadsRequest, opts ...grpc.CallOption) (*UserLeadsReply, error)
	// returns full lead info
	GetLead(ctx context.Context, in *GetLeadRequest, opts ...grpc.CallOption) (*GetLeadReply, error)
	// changes lead state
	SetLeadStatus(ctx context.Context, in *SetLeadStatusRequest, opts ...grpc.CallOption) (*SetLeadStatusReply, error)
	CallSupplier(ctx context.Context, in *CallSupplierRequest, opts ...grpc.CallOption) (*CallSupplierReply, error)
	CallCustomer(ctx context.Context, in *CallCustomerRequest, opts ...grpc.CallOption) (*CallCustomerReply, error)
	GetCancelReasons(ctx context.Context, in *GetCancelReasonsRequest, opts ...grpc.CallOption) (*GetCancelReasonsReply, error)
	GetUserRole(ctx context.Context, in *GetUserRoleRequest, opts ...grpc.CallOption) (*GetUserRoleReply, error)
}

type leadServiceClient struct {
	cc *grpc.ClientConn
}

func NewLeadServiceClient(cc *grpc.ClientConn) LeadServiceClient {
	return &leadServiceClient{cc}
}

func (c *leadServiceClient) CreateLead(ctx context.Context, in *Lead, opts ...grpc.CallOption) (*CreateLeadResult, error) {
	out := new(CreateLeadResult)
	err := grpc.Invoke(ctx, "/core.LeadService/CreateLead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadServiceClient) ReadLead(ctx context.Context, in *ReadLeadRequest, opts ...grpc.CallOption) (*ReadLeadResult, error) {
	out := new(ReadLeadResult)
	err := grpc.Invoke(ctx, "/core.LeadService/ReadLead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadServiceClient) GetUserLeads(ctx context.Context, in *UserLeadsRequest, opts ...grpc.CallOption) (*UserLeadsReply, error) {
	out := new(UserLeadsReply)
	err := grpc.Invoke(ctx, "/core.LeadService/GetUserLeads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadServiceClient) GetLead(ctx context.Context, in *GetLeadRequest, opts ...grpc.CallOption) (*GetLeadReply, error) {
	out := new(GetLeadReply)
	err := grpc.Invoke(ctx, "/core.LeadService/GetLead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadServiceClient) SetLeadStatus(ctx context.Context, in *SetLeadStatusRequest, opts ...grpc.CallOption) (*SetLeadStatusReply, error) {
	out := new(SetLeadStatusReply)
	err := grpc.Invoke(ctx, "/core.LeadService/SetLeadStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadServiceClient) CallSupplier(ctx context.Context, in *CallSupplierRequest, opts ...grpc.CallOption) (*CallSupplierReply, error) {
	out := new(CallSupplierReply)
	err := grpc.Invoke(ctx, "/core.LeadService/CallSupplier", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadServiceClient) CallCustomer(ctx context.Context, in *CallCustomerRequest, opts ...grpc.CallOption) (*CallCustomerReply, error) {
	out := new(CallCustomerReply)
	err := grpc.Invoke(ctx, "/core.LeadService/CallCustomer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadServiceClient) GetCancelReasons(ctx context.Context, in *GetCancelReasonsRequest, opts ...grpc.CallOption) (*GetCancelReasonsReply, error) {
	out := new(GetCancelReasonsReply)
	err := grpc.Invoke(ctx, "/core.LeadService/GetCancelReasons", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadServiceClient) GetUserRole(ctx context.Context, in *GetUserRoleRequest, opts ...grpc.CallOption) (*GetUserRoleReply, error) {
	out := new(GetUserRoleReply)
	err := grpc.Invoke(ctx, "/core.LeadService/GetUserRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LeadService service

type LeadServiceServer interface {
	// Create lead. ID of created lead is returned
	CreateLead(context.Context, *Lead) (*CreateLeadResult, error)
	// Find lead id
	ReadLead(context.Context, *ReadLeadRequest) (*ReadLeadResult, error)
	// returns user leads filtred by user's roles
	GetUserLeads(context.Context, *UserLeadsRequest) (*UserLeadsReply, error)
	// returns full lead info
	GetLead(context.Context, *GetLeadRequest) (*GetLeadReply, error)
	// changes lead state
	SetLeadStatus(context.Context, *SetLeadStatusRequest) (*SetLeadStatusReply, error)
	CallSupplier(context.Context, *CallSupplierRequest) (*CallSupplierReply, error)
	CallCustomer(context.Context, *CallCustomerRequest) (*CallCustomerReply, error)
	GetCancelReasons(context.Context, *GetCancelReasonsRequest) (*GetCancelReasonsReply, error)
	GetUserRole(context.Context, *GetUserRoleRequest) (*GetUserRoleReply, error)
}

func RegisterLeadServiceServer(s *grpc.Server, srv LeadServiceServer) {
	s.RegisterService(&_LeadService_serviceDesc, srv)
}

func _LeadService_CreateLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lead)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).CreateLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/CreateLead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).CreateLead(ctx, req.(*Lead))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadService_ReadLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadLeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).ReadLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/ReadLead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).ReadLead(ctx, req.(*ReadLeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadService_GetUserLeads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLeadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).GetUserLeads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/GetUserLeads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).GetUserLeads(ctx, req.(*UserLeadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadService_GetLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).GetLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/GetLead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).GetLead(ctx, req.(*GetLeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadService_SetLeadStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLeadStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).SetLeadStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/SetLeadStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).SetLeadStatus(ctx, req.(*SetLeadStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadService_CallSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).CallSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/CallSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).CallSupplier(ctx, req.(*CallSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadService_CallCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).CallCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/CallCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).CallCustomer(ctx, req.(*CallCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadService_GetCancelReasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCancelReasonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).GetCancelReasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/GetCancelReasons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).GetCancelReasons(ctx, req.(*GetCancelReasonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadService_GetUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).GetUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/GetUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).GetUserRole(ctx, req.(*GetUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LeadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.LeadService",
	HandlerType: (*LeadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLead",
			Handler:    _LeadService_CreateLead_Handler,
		},
		{
			MethodName: "ReadLead",
			Handler:    _LeadService_ReadLead_Handler,
		},
		{
			MethodName: "GetUserLeads",
			Handler:    _LeadService_GetUserLeads_Handler,
		},
		{
			MethodName: "GetLead",
			Handler:    _LeadService_GetLead_Handler,
		},
		{
			MethodName: "SetLeadStatus",
			Handler:    _LeadService_SetLeadStatus_Handler,
		},
		{
			MethodName: "CallSupplier",
			Handler:    _LeadService_CallSupplier_Handler,
		},
		{
			MethodName: "CallCustomer",
			Handler:    _LeadService_CallCustomer_Handler,
		},
		{
			MethodName: "GetCancelReasons",
			Handler:    _LeadService_GetCancelReasons_Handler,
		},
		{
			MethodName: "GetUserRole",
			Handler:    _LeadService_GetUserRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

// Client API for MonetizationService service

type MonetizationServiceClient interface {
	// get plan by id
	GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*GetPlanReply, error)
	// returns list of public plans
	GetPlansList(ctx context.Context, in *GetPlansListRequest, opts ...grpc.CallOption) (*GetPlansListReply, error)
	GetCoinsOffers(ctx context.Context, in *GetCoinsOffersRequest, opts ...grpc.CallOption) (*GetCoinsOffersReply, error)
	// subscribe shop to plan
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeReply, error)
	// sets autorefill coins offer for user
	SetAutorefill(ctx context.Context, in *SetAutorefillRequest, opts ...grpc.CallOption) (*SetAutorefillReply, error)
}

type monetizationServiceClient struct {
	cc *grpc.ClientConn
}

func NewMonetizationServiceClient(cc *grpc.ClientConn) MonetizationServiceClient {
	return &monetizationServiceClient{cc}
}

func (c *monetizationServiceClient) GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*GetPlanReply, error) {
	out := new(GetPlanReply)
	err := grpc.Invoke(ctx, "/core.MonetizationService/GetPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monetizationServiceClient) GetPlansList(ctx context.Context, in *GetPlansListRequest, opts ...grpc.CallOption) (*GetPlansListReply, error) {
	out := new(GetPlansListReply)
	err := grpc.Invoke(ctx, "/core.MonetizationService/GetPlansList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monetizationServiceClient) GetCoinsOffers(ctx context.Context, in *GetCoinsOffersRequest, opts ...grpc.CallOption) (*GetCoinsOffersReply, error) {
	out := new(GetCoinsOffersReply)
	err := grpc.Invoke(ctx, "/core.MonetizationService/GetCoinsOffers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monetizationServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeReply, error) {
	out := new(SubscribeReply)
	err := grpc.Invoke(ctx, "/core.MonetizationService/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monetizationServiceClient) SetAutorefill(ctx context.Context, in *SetAutorefillRequest, opts ...grpc.CallOption) (*SetAutorefillReply, error) {
	out := new(SetAutorefillReply)
	err := grpc.Invoke(ctx, "/core.MonetizationService/SetAutorefill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MonetizationService service

type MonetizationServiceServer interface {
	// get plan by id
	GetPlan(context.Context, *GetPlanRequest) (*GetPlanReply, error)
	// returns list of public plans
	GetPlansList(context.Context, *GetPlansListRequest) (*GetPlansListReply, error)
	GetCoinsOffers(context.Context, *GetCoinsOffersRequest) (*GetCoinsOffersReply, error)
	// subscribe shop to plan
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeReply, error)
	// sets autorefill coins offer for user
	SetAutorefill(context.Context, *SetAutorefillRequest) (*SetAutorefillReply, error)
}

func RegisterMonetizationServiceServer(s *grpc.Server, srv MonetizationServiceServer) {
	s.RegisterService(&_MonetizationService_serviceDesc, srv)
}

func _MonetizationService_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonetizationServiceServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.MonetizationService/GetPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonetizationServiceServer).GetPlan(ctx, req.(*GetPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonetizationService_GetPlansList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlansListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonetizationServiceServer).GetPlansList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.MonetizationService/GetPlansList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonetizationServiceServer).GetPlansList(ctx, req.(*GetPlansListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonetizationService_GetCoinsOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinsOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonetizationServiceServer).GetCoinsOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.MonetizationService/GetCoinsOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonetizationServiceServer).GetCoinsOffers(ctx, req.(*GetCoinsOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonetizationService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonetizationServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.MonetizationService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonetizationServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonetizationService_SetAutorefill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAutorefillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonetizationServiceServer).SetAutorefill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.MonetizationService/SetAutorefill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonetizationServiceServer).SetAutorefill(ctx, req.(*SetAutorefillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonetizationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.MonetizationService",
	HandlerType: (*MonetizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlan",
			Handler:    _MonetizationService_GetPlan_Handler,
		},
		{
			MethodName: "GetPlansList",
			Handler:    _MonetizationService_GetPlansList_Handler,
		},
		{
			MethodName: "GetCoinsOffers",
			Handler:    _MonetizationService_GetCoinsOffers_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _MonetizationService_Subscribe_Handler,
		},
		{
			MethodName: "SetAutorefill",
			Handler:    _MonetizationService_SetAutorefill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

// Client API for ProductService service

type ProductServiceClient interface {
	// Get product by id
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductSearchResult, error)
	// Same search, but return only id
	ReadProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductReadResult, error)
	// Search products
	SearchProducts(ctx context.Context, in *SearchProductRequest, opts ...grpc.CallOption) (*ProductSearchResult, error)
	// Create product
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResult, error)
	LikeProduct(ctx context.Context, in *LikeProductRequest, opts ...grpc.CallOption) (*LikeProductReply, error)
	// returns list of product ids that are liked by user
	GetLikedBy(ctx context.Context, in *GetLikedByRequest, opts ...grpc.CallOption) (*GetLikedByReply, error)
	// Method returns list of product with non-default chat templates
	GetSpecialProducts(ctx context.Context, in *GetSpecialProductsRequest, opts ...grpc.CallOption) (*GetSpecialProductsReply, error)
}

type productServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductServiceClient(cc *grpc.ClientConn) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductSearchResult, error) {
	out := new(ProductSearchResult)
	err := grpc.Invoke(ctx, "/core.ProductService/GetProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ReadProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductReadResult, error) {
	out := new(ProductReadResult)
	err := grpc.Invoke(ctx, "/core.ProductService/ReadProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SearchProducts(ctx context.Context, in *SearchProductRequest, opts ...grpc.CallOption) (*ProductSearchResult, error) {
	out := new(ProductSearchResult)
	err := grpc.Invoke(ctx, "/core.ProductService/SearchProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResult, error) {
	out := new(CreateProductResult)
	err := grpc.Invoke(ctx, "/core.ProductService/CreateProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) LikeProduct(ctx context.Context, in *LikeProductRequest, opts ...grpc.CallOption) (*LikeProductReply, error) {
	out := new(LikeProductReply)
	err := grpc.Invoke(ctx, "/core.ProductService/LikeProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetLikedBy(ctx context.Context, in *GetLikedByRequest, opts ...grpc.CallOption) (*GetLikedByReply, error) {
	out := new(GetLikedByReply)
	err := grpc.Invoke(ctx, "/core.ProductService/GetLikedBy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetSpecialProducts(ctx context.Context, in *GetSpecialProductsRequest, opts ...grpc.CallOption) (*GetSpecialProductsReply, error) {
	out := new(GetSpecialProductsReply)
	err := grpc.Invoke(ctx, "/core.ProductService/GetSpecialProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceServer interface {
	// Get product by id
	GetProduct(context.Context, *GetProductRequest) (*ProductSearchResult, error)
	// Same search, but return only id
	ReadProduct(context.Context, *GetProductRequest) (*ProductReadResult, error)
	// Search products
	SearchProducts(context.Context, *SearchProductRequest) (*ProductSearchResult, error)
	// Create product
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResult, error)
	LikeProduct(context.Context, *LikeProductRequest) (*LikeProductReply, error)
	// returns list of product ids that are liked by user
	GetLikedBy(context.Context, *GetLikedByRequest) (*GetLikedByReply, error)
	// Method returns list of product with non-default chat templates
	GetSpecialProducts(context.Context, *GetSpecialProductsRequest) (*GetSpecialProductsReply, error)
}

func RegisterProductServiceServer(s *grpc.Server, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ProductService/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ReadProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ReadProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ProductService/ReadProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ReadProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SearchProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SearchProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ProductService/SearchProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SearchProducts(ctx, req.(*SearchProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ProductService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_LikeProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).LikeProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ProductService/LikeProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).LikeProduct(ctx, req.(*LikeProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetLikedBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikedByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetLikedBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ProductService/GetLikedBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetLikedBy(ctx, req.(*GetLikedByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetSpecialProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecialProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetSpecialProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ProductService/GetSpecialProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetSpecialProducts(ctx, req.(*GetSpecialProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _ProductService_GetProduct_Handler,
		},
		{
			MethodName: "ReadProduct",
			Handler:    _ProductService_ReadProduct_Handler,
		},
		{
			MethodName: "SearchProducts",
			Handler:    _ProductService_SearchProducts_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _ProductService_CreateProduct_Handler,
		},
		{
			MethodName: "LikeProduct",
			Handler:    _ProductService_LikeProduct_Handler,
		},
		{
			MethodName: "GetLikedBy",
			Handler:    _ProductService_GetLikedBy_Handler,
		},
		{
			MethodName: "GetSpecialProducts",
			Handler:    _ProductService_GetSpecialProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

// Client API for PushTokensService service

type PushTokensServiceClient interface {
	AddToken(ctx context.Context, in *AddTokenRequest, opts ...grpc.CallOption) (*ErrorResult, error)
	DelToken(ctx context.Context, in *DelTokenRequest, opts ...grpc.CallOption) (*ErrorResult, error)
	GetTokens(ctx context.Context, in *GetTokensRequest, opts ...grpc.CallOption) (*GetTokensResult, error)
	InvalidateTokens(ctx context.Context, in *InvalidateTokensRequest, opts ...grpc.CallOption) (*InvalidateTokensResult, error)
	UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*UpdateTokenResult, error)
}

type pushTokensServiceClient struct {
	cc *grpc.ClientConn
}

func NewPushTokensServiceClient(cc *grpc.ClientConn) PushTokensServiceClient {
	return &pushTokensServiceClient{cc}
}

func (c *pushTokensServiceClient) AddToken(ctx context.Context, in *AddTokenRequest, opts ...grpc.CallOption) (*ErrorResult, error) {
	out := new(ErrorResult)
	err := grpc.Invoke(ctx, "/core.PushTokensService/AddToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushTokensServiceClient) DelToken(ctx context.Context, in *DelTokenRequest, opts ...grpc.CallOption) (*ErrorResult, error) {
	out := new(ErrorResult)
	err := grpc.Invoke(ctx, "/core.PushTokensService/DelToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushTokensServiceClient) GetTokens(ctx context.Context, in *GetTokensRequest, opts ...grpc.CallOption) (*GetTokensResult, error) {
	out := new(GetTokensResult)
	err := grpc.Invoke(ctx, "/core.PushTokensService/GetTokens", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushTokensServiceClient) InvalidateTokens(ctx context.Context, in *InvalidateTokensRequest, opts ...grpc.CallOption) (*InvalidateTokensResult, error) {
	out := new(InvalidateTokensResult)
	err := grpc.Invoke(ctx, "/core.PushTokensService/InvalidateTokens", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushTokensServiceClient) UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*UpdateTokenResult, error) {
	out := new(UpdateTokenResult)
	err := grpc.Invoke(ctx, "/core.PushTokensService/UpdateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PushTokensService service

type PushTokensServiceServer interface {
	AddToken(context.Context, *AddTokenRequest) (*ErrorResult, error)
	DelToken(context.Context, *DelTokenRequest) (*ErrorResult, error)
	GetTokens(context.Context, *GetTokensRequest) (*GetTokensResult, error)
	InvalidateTokens(context.Context, *InvalidateTokensRequest) (*InvalidateTokensResult, error)
	UpdateToken(context.Context, *UpdateTokenRequest) (*UpdateTokenResult, error)
}

func RegisterPushTokensServiceServer(s *grpc.Server, srv PushTokensServiceServer) {
	s.RegisterService(&_PushTokensService_serviceDesc, srv)
}

func _PushTokensService_AddToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushTokensServiceServer).AddToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PushTokensService/AddToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushTokensServiceServer).AddToken(ctx, req.(*AddTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushTokensService_DelToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushTokensServiceServer).DelToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PushTokensService/DelToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushTokensServiceServer).DelToken(ctx, req.(*DelTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushTokensService_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushTokensServiceServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PushTokensService/GetTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushTokensServiceServer).GetTokens(ctx, req.(*GetTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushTokensService_InvalidateTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushTokensServiceServer).InvalidateTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PushTokensService/InvalidateTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushTokensServiceServer).InvalidateTokens(ctx, req.(*InvalidateTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushTokensService_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushTokensServiceServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PushTokensService/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushTokensServiceServer).UpdateToken(ctx, req.(*UpdateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PushTokensService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.PushTokensService",
	HandlerType: (*PushTokensServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToken",
			Handler:    _PushTokensService_AddToken_Handler,
		},
		{
			MethodName: "DelToken",
			Handler:    _PushTokensService_DelToken_Handler,
		},
		{
			MethodName: "GetTokens",
			Handler:    _PushTokensService_GetTokens_Handler,
		},
		{
			MethodName: "InvalidateTokens",
			Handler:    _PushTokensService_InvalidateTokens_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _PushTokensService_UpdateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

// Client API for ShopCardService service

type ShopCardServiceClient interface {
	// cards api
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardReply, error)
	DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*DeleteCardReply, error)
	GetCards(ctx context.Context, in *GetCardsRequest, opts ...grpc.CallOption) (*GetCardsReply, error)
	GetCardByID(ctx context.Context, in *GetCardByIDRequest, opts ...grpc.CallOption) (*GetCardReply, error)
}

type shopCardServiceClient struct {
	cc *grpc.ClientConn
}

func NewShopCardServiceClient(cc *grpc.ClientConn) ShopCardServiceClient {
	return &shopCardServiceClient{cc}
}

func (c *shopCardServiceClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardReply, error) {
	out := new(CreateCardReply)
	err := grpc.Invoke(ctx, "/core.ShopCardService/CreateCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCardServiceClient) DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*DeleteCardReply, error) {
	out := new(DeleteCardReply)
	err := grpc.Invoke(ctx, "/core.ShopCardService/DeleteCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCardServiceClient) GetCards(ctx context.Context, in *GetCardsRequest, opts ...grpc.CallOption) (*GetCardsReply, error) {
	out := new(GetCardsReply)
	err := grpc.Invoke(ctx, "/core.ShopCardService/GetCards", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCardServiceClient) GetCardByID(ctx context.Context, in *GetCardByIDRequest, opts ...grpc.CallOption) (*GetCardReply, error) {
	out := new(GetCardReply)
	err := grpc.Invoke(ctx, "/core.ShopCardService/GetCardByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShopCardService service

type ShopCardServiceServer interface {
	// cards api
	CreateCard(context.Context, *CreateCardRequest) (*CreateCardReply, error)
	DeleteCard(context.Context, *DeleteCardRequest) (*DeleteCardReply, error)
	GetCards(context.Context, *GetCardsRequest) (*GetCardsReply, error)
	GetCardByID(context.Context, *GetCardByIDRequest) (*GetCardReply, error)
}

func RegisterShopCardServiceServer(s *grpc.Server, srv ShopCardServiceServer) {
	s.RegisterService(&_ShopCardService_serviceDesc, srv)
}

func _ShopCardService_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCardServiceServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ShopCardService/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCardServiceServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCardService_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCardServiceServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ShopCardService/DeleteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCardServiceServer).DeleteCard(ctx, req.(*DeleteCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCardService_GetCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCardServiceServer).GetCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ShopCardService/GetCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCardServiceServer).GetCards(ctx, req.(*GetCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCardService_GetCardByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCardServiceServer).GetCardByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ShopCardService/GetCardByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCardServiceServer).GetCardByID(ctx, req.(*GetCardByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShopCardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.ShopCardService",
	HandlerType: (*ShopCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCard",
			Handler:    _ShopCardService_CreateCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _ShopCardService_DeleteCard_Handler,
		},
		{
			MethodName: "GetCards",
			Handler:    _ShopCardService_GetCards_Handler,
		},
		{
			MethodName: "GetCardByID",
			Handler:    _ShopCardService_GetCardByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

// Client API for ShopService service

type ShopServiceClient interface {
	// returns a public profile of the shop
	GetShopProfile(ctx context.Context, in *ShopProfileRequest, opts ...grpc.CallOption) (*ShopProfileReply, error)
	FindOrCreateShopForSupplier(ctx context.Context, in *FindOrCreateShopForSupplierRequest, opts ...grpc.CallOption) (*FindOrCreateShopForSupplierReply, error)
}

type shopServiceClient struct {
	cc *grpc.ClientConn
}

func NewShopServiceClient(cc *grpc.ClientConn) ShopServiceClient {
	return &shopServiceClient{cc}
}

func (c *shopServiceClient) GetShopProfile(ctx context.Context, in *ShopProfileRequest, opts ...grpc.CallOption) (*ShopProfileReply, error) {
	out := new(ShopProfileReply)
	err := grpc.Invoke(ctx, "/core.ShopService/GetShopProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) FindOrCreateShopForSupplier(ctx context.Context, in *FindOrCreateShopForSupplierRequest, opts ...grpc.CallOption) (*FindOrCreateShopForSupplierReply, error) {
	out := new(FindOrCreateShopForSupplierReply)
	err := grpc.Invoke(ctx, "/core.ShopService/FindOrCreateShopForSupplier", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShopService service

type ShopServiceServer interface {
	// returns a public profile of the shop
	GetShopProfile(context.Context, *ShopProfileRequest) (*ShopProfileReply, error)
	FindOrCreateShopForSupplier(context.Context, *FindOrCreateShopForSupplierRequest) (*FindOrCreateShopForSupplierReply, error)
}

func RegisterShopServiceServer(s *grpc.Server, srv ShopServiceServer) {
	s.RegisterService(&_ShopService_serviceDesc, srv)
}

func _ShopService_GetShopProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetShopProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ShopService/GetShopProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetShopProfile(ctx, req.(*ShopProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_FindOrCreateShopForSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOrCreateShopForSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).FindOrCreateShopForSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ShopService/FindOrCreateShopForSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).FindOrCreateShopForSupplier(ctx, req.(*FindOrCreateShopForSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShopService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.ShopService",
	HandlerType: (*ShopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShopProfile",
			Handler:    _ShopService_GetShopProfile_Handler,
		},
		{
			MethodName: "FindOrCreateShopForSupplier",
			Handler:    _ShopService_FindOrCreateShopForSupplier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

// Client API for TagService service

type TagServiceClient interface {
	// get tags that should be displayed in main page
	GetMainTags(ctx context.Context, in *GetMainTagsRequest, opts ...grpc.CallOption) (*TagSearchResult, error)
	// get tags that should be displayed near selected tags (GetRelatedTagsRequest.Tags)
	GetRelatedTags(ctx context.Context, in *GetRelatedTagsRequest, opts ...grpc.CallOption) (*TagSearchResult, error)
}

type tagServiceClient struct {
	cc *grpc.ClientConn
}

func NewTagServiceClient(cc *grpc.ClientConn) TagServiceClient {
	return &tagServiceClient{cc}
}

func (c *tagServiceClient) GetMainTags(ctx context.Context, in *GetMainTagsRequest, opts ...grpc.CallOption) (*TagSearchResult, error) {
	out := new(TagSearchResult)
	err := grpc.Invoke(ctx, "/core.TagService/GetMainTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) GetRelatedTags(ctx context.Context, in *GetRelatedTagsRequest, opts ...grpc.CallOption) (*TagSearchResult, error) {
	out := new(TagSearchResult)
	err := grpc.Invoke(ctx, "/core.TagService/GetRelatedTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TagService service

type TagServiceServer interface {
	// get tags that should be displayed in main page
	GetMainTags(context.Context, *GetMainTagsRequest) (*TagSearchResult, error)
	// get tags that should be displayed near selected tags (GetRelatedTagsRequest.Tags)
	GetRelatedTags(context.Context, *GetRelatedTagsRequest) (*TagSearchResult, error)
}

func RegisterTagServiceServer(s *grpc.Server, srv TagServiceServer) {
	s.RegisterService(&_TagService_serviceDesc, srv)
}

func _TagService_GetMainTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMainTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetMainTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TagService/GetMainTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetMainTags(ctx, req.(*GetMainTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_GetRelatedTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelatedTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetRelatedTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TagService/GetRelatedTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetRelatedTags(ctx, req.(*GetRelatedTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TagService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.TagService",
	HandlerType: (*TagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMainTags",
			Handler:    _TagService_GetMainTags_Handler,
		},
		{
			MethodName: "GetRelatedTags",
			Handler:    _TagService_GetRelatedTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

// Client API for UserService service

type UserServiceClient interface {
	// returns a user with a specific email. If not exists, creates it
	FindOrCreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*ReadUserReply, error)
	CreateFakeUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*ReadUserReply, error)
	// returns a user that mathes request options
	ReadUser(ctx context.Context, in *ReadUserRequest, opts ...grpc.CallOption) (*ReadUserReply, error)
	SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*SetEmailReply, error)
	SetData(ctx context.Context, in *SetDataRequest, opts ...grpc.CallOption) (*SetDataReply, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) FindOrCreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*ReadUserReply, error) {
	out := new(ReadUserReply)
	err := grpc.Invoke(ctx, "/core.UserService/FindOrCreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateFakeUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*ReadUserReply, error) {
	out := new(ReadUserReply)
	err := grpc.Invoke(ctx, "/core.UserService/CreateFakeUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ReadUser(ctx context.Context, in *ReadUserRequest, opts ...grpc.CallOption) (*ReadUserReply, error) {
	out := new(ReadUserReply)
	err := grpc.Invoke(ctx, "/core.UserService/ReadUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*SetEmailReply, error) {
	out := new(SetEmailReply)
	err := grpc.Invoke(ctx, "/core.UserService/SetEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetData(ctx context.Context, in *SetDataRequest, opts ...grpc.CallOption) (*SetDataReply, error) {
	out := new(SetDataReply)
	err := grpc.Invoke(ctx, "/core.UserService/SetData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	// returns a user with a specific email. If not exists, creates it
	FindOrCreateUser(context.Context, *CreateUserRequest) (*ReadUserReply, error)
	CreateFakeUser(context.Context, *CreateUserRequest) (*ReadUserReply, error)
	// returns a user that mathes request options
	ReadUser(context.Context, *ReadUserRequest) (*ReadUserReply, error)
	SetEmail(context.Context, *SetEmailRequest) (*SetEmailReply, error)
	SetData(context.Context, *SetDataRequest) (*SetDataReply, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_FindOrCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindOrCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.UserService/FindOrCreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindOrCreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateFakeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateFakeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.UserService/CreateFakeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateFakeUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.UserService/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ReadUser(ctx, req.(*ReadUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.UserService/SetEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetEmail(ctx, req.(*SetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.UserService/SetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetData(ctx, req.(*SetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindOrCreateUser",
			Handler:    _UserService_FindOrCreateUser_Handler,
		},
		{
			MethodName: "CreateFakeUser",
			Handler:    _UserService_CreateFakeUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _UserService_ReadUser_Handler,
		},
		{
			MethodName: "SetEmail",
			Handler:    _UserService_SetEmail_Handler,
		},
		{
			MethodName: "SetData",
			Handler:    _UserService_SetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}

func init() { proto.RegisterFile("core.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 4143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x5b, 0xcd, 0x6f, 0xe3, 0x48,
	0x76, 0x17, 0x25, 0xca, 0x92, 0x9e, 0x6c, 0x49, 0x2e, 0x7f, 0xa9, 0xdd, 0x33, 0xdb, 0x5e, 0xf6,
	0xf4, 0x97, 0x67, 0x32, 0x9b, 0x78, 0x77, 0x26, 0x93, 0xec, 0xcc, 0xee, 0xf8, 0x43, 0xdd, 0xad,
	0x8d, 0xdb, 0xf6, 0xd2, 0xf6, 0x34, 0x06, 0x08, 0xa0, 0xd0, 0x62, 0xd9, 0x26, 0x4c, 0x93, 0x5a,
	0x92, 0xea, 0x1e, 0xe7, 0xb4, 0x97, 0x20, 0x40, 0x80, 0x5c, 0x73, 0xc9, 0x29, 0x40, 0xfe, 0x8e,
	0x04, 0xb9, 0x2c, 0x72, 0x0c, 0x82, 0x1c, 0x72, 0xc9, 0x2d, 0xe7, 0xfc, 0x05, 0x39, 0x04, 0xef,
	0x55, 0x15, 0x59, 0xa4, 0x24, 0xdb, 0xbd, 0xc8, 0x4d, 0xf5, 0x5e, 0xd5, 0xab, 0xaa, 0x57, 0xaf,
	0xde, 0xc7, 0xaf, 0x28, 0x80, 0x61, 0x18, 0xf1, 0xcf, 0x47, 0x51, 0x98, 0x84, 0xcc, 0xc4, 0xdf,
	0xd6, 0x6f, 0x0d, 0x68, 0xdb, 0xdc, 0x71, 0xf7, 0xb9, 0xe3, 0xda, 0xfc, 0x37, 0x63, 0x1e, 0x27,
	0xac, 0x03, 0x65, 0xcf, 0xed, 0x1a, 0x1b, 0xc6, 0xf3, 0xca, 0xeb, 0x92, 0x5d, 0xf6, 0x5c, 0xf6,
	0x18, 0xe6, 0xbd, 0x20, 0x4e, 0x9c, 0x8b, 0xc8, 0xb9, 0x1e, 0x8c, 0xae, 0xba, 0xe5, 0x0d, 0xe3,
	0x79, 0xe3, 0x75, 0xc9, 0x6e, 0xa6, 0xd4, 0xa3, 0x2b, 0xf6, 0x02, 0xda, 0xc3, 0x30, 0x78, 0xc7,
	0xa3, 0xd8, 0x49, 0xbc, 0x30, 0x18, 0x78, 0x6e, 0xb7, 0xb2, 0x61, 0x3c, 0x37, 0x5f, 0x97, 0xec,
	0x96, 0xce, 0xe8, 0xbb, 0x3b, 0x4d, 0x68, 0xc4, 0xdc, 0x89, 0x86, 0x97, 0x83, 0xb3, 0x1b, 0x6b,
	0x03, 0x5a, 0xd9, 0x0a, 0xe2, 0xb1, 0x9f, 0xb0, 0x56, 0xb6, 0x00, 0x9c, 0xde, 0xfa, 0x5f, 0x03,
	0x4c, 0x64, 0x17, 0x19, 0x6c, 0x15, 0xe6, 0xe2, 0x70, 0x1c, 0x0d, 0xb9, 0x58, 0x91, 0x2d, 0x5b,
	0xac, 0x0b, 0xb5, 0x61, 0x78, 0x7d, 0xcd, 0x83, 0x84, 0x96, 0xd0, 0xb0, 0x55, 0x93, 0x3d, 0x82,
	0xe6, 0x70, 0x1c, 0x27, 0xe1, 0x35, 0x8f, 0x70, 0x81, 0x26, 0x89, 0x02, 0x45, 0xea, 0xbb, 0xec,
	0xc7, 0x85, 0xad, 0x56, 0x69, 0x7c, 0x6e, 0xa3, 0x4f, 0xa0, 0x95, 0x75, 0xf1, 0xbd, 0xe0, 0xaa,
	0x5b, 0xa3, 0x4e, 0x0b, 0x29, 0x75, 0xdf, 0x0b, 0xae, 0xd8, 0xc7, 0x00, 0xa3, 0x28, 0x74, 0xc7,
	0xc3, 0x04, 0x67, 0x9a, 0xa3, 0x99, 0x1a, 0x92, 0xd2, 0x77, 0xd9, 0x73, 0x98, 0x73, 0x86, 0xa8,
	0x8f, 0x6e, 0x7d, 0xc3, 0x78, 0xde, 0xda, 0xea, 0x7c, 0x4e, 0x87, 0x83, 0xfb, 0xdc, 0x26, 0xba,
	0x2d, 0xf9, 0xd6, 0x4b, 0xe8, 0xec, 0x46, 0xdc, 0x49, 0xf8, 0x6c, 0x15, 0x31, 0x0b, 0x4c, 0x9f,
	0x3b, 0x2e, 0xe9, 0xa1, 0xb9, 0xd5, 0xca, 0x64, 0xf5, 0x83, 0xf3, 0xd0, 0x26, 0x9e, 0xf5, 0xaf,
	0x06, 0x74, 0x4e, 0x63, 0x1e, 0x21, 0x39, 0x56, 0x87, 0xbd, 0x06, 0xb5, 0x71, 0x2c, 0x94, 0x81,
	0xd2, 0x4c, 0x7b, 0x0e, 0x9b, 0x7d, 0x97, 0x3d, 0x05, 0x33, 0x0a, 0x7d, 0xd4, 0x6c, 0xe5, 0x79,
	0x6b, 0x8b, 0x65, 0x12, 0x51, 0x84, 0x1d, 0xfa, 0xdc, 0x26, 0x3e, 0x0a, 0x40, 0xe9, 0xe9, 0x71,
	0xdb, 0x73, 0xd8, 0xec, 0xbb, 0x6c, 0x19, 0xaa, 0xbe, 0x77, 0xed, 0x25, 0xa4, 0x64, 0xd3, 0x16,
	0x0d, 0xf6, 0x11, 0x34, 0x5c, 0x2f, 0xe2, 0x62, 0xe7, 0xa8, 0xdc, 0xba, 0x9d, 0x11, 0xd8, 0x53,
	0x68, 0x9f, 0x47, 0xe1, 0xf5, 0x60, 0x3c, 0x72, 0x9d, 0x84, 0xbb, 0x03, 0x27, 0x91, 0x8a, 0x5b,
	0x40, 0xf2, 0xa9, 0xa0, 0x6e, 0x27, 0xd6, 0x97, 0xd0, 0xd2, 0x76, 0x32, 0xf2, 0x6f, 0xd8, 0x27,
	0x50, 0xc5, 0x79, 0xe3, 0xae, 0xb1, 0x51, 0x99, 0xa2, 0x01, 0xc1, 0xb4, 0xfe, 0xd9, 0x84, 0xba,
	0xa2, 0x69, 0x3a, 0x34, 0xff, 0xff, 0xac, 0xc9, 0xcc, 0x59, 0xd3, 0x0b, 0xa8, 0xcb, 0x13, 0x8f,
	0xbb, 0x55, 0x5a, 0xd8, 0x82, 0x58, 0xd8, 0x91, 0xa0, 0xda, 0x29, 0x7b, 0xc2, 0xf0, 0x6a, 0xf7,
	0x31, 0xbc, 0xd6, 0x34, 0xc3, 0x7b, 0x0a, 0x75, 0xb5, 0x04, 0xb2, 0xad, 0xe6, 0x16, 0x88, 0x49,
	0xe9, 0xe4, 0x52, 0x1e, 0x5a, 0x60, 0x9c, 0x38, 0xc9, 0x38, 0xee, 0x36, 0x8a, 0x16, 0x78, 0x4c,
	0x74, 0x5b, 0xf2, 0xd9, 0x4f, 0xa0, 0x41, 0x46, 0x42, 0x06, 0x01, 0xd4, 0x79, 0x9a, 0x41, 0xd4,
	0xc7, 0xf2, 0x17, 0x7b, 0x36, 0xe9, 0x0b, 0x9a, 0xa4, 0x9c, 0x82, 0x27, 0x60, 0x3f, 0x02, 0x33,
	0xbe, 0x0c, 0x47, 0xdd, 0x79, 0x7d, 0x9d, 0xc7, 0x97, 0xe1, 0xc8, 0x26, 0x3a, 0x5e, 0x22, 0xcd,
	0x16, 0x16, 0xc4, 0x25, 0x1a, 0x2b, 0x3b, 0x60, 0x8f, 0x61, 0x61, 0xe8, 0x04, 0x43, 0xee, 0x0f,
	0x22, 0xee, 0xc4, 0x61, 0xd0, 0x6d, 0xd3, 0x2c, 0xf3, 0x82, 0x68, 0x13, 0x0d, 0xd5, 0x26, 0xf6,
	0x31, 0x50, 0xc7, 0xd8, 0x11, 0x6a, 0x13, 0xd4, 0x5d, 0x79, 0x98, 0x9f, 0x40, 0x2b, 0x9b, 0x6a,
	0xe0, 0x5c, 0x84, 0xdd, 0x45, 0x9a, 0x6e, 0x3e, 0x9d, 0x6e, 0xfb, 0x22, 0xb4, 0xde, 0x42, 0x07,
	0xf7, 0xdc, 0x7b, 0xc7, 0x83, 0xe4, 0x0d, 0x8f, 0x63, 0xe7, 0x22, 0x77, 0x05, 0x8c, 0xe2, 0x15,
	0xe0, 0xd8, 0x51, 0x1a, 0x94, 0x68, 0x20, 0x15, 0x15, 0x15, 0x77, 0x2b, 0x1b, 0x15, 0xbc, 0x18,
	0xd4, 0xb0, 0xfe, 0xc5, 0x80, 0xe5, 0x63, 0x9e, 0x68, 0xda, 0xcf, 0x6e, 0xe8, 0x74, 0xe9, 0x9f,
	0xea, 0xd2, 0x5b, 0x5b, 0x2b, 0xc5, 0xe3, 0xa3, 0x35, 0xaa, 0x49, 0xb5, 0x7b, 0x5e, 0xc9, 0xdd,
	0xf3, 0x09, 0x15, 0x9a, 0xf7, 0x52, 0x61, 0x75, 0x8a, 0x0a, 0xad, 0xaf, 0x80, 0x15, 0xb6, 0x80,
	0x57, 0x53, 0xf9, 0x26, 0xe3, 0x16, 0xdf, 0xf4, 0x39, 0x2c, 0xed, 0x3a, 0xbe, 0x7f, 0x3c, 0x1e,
	0x8d, 0x7c, 0x8f, 0x47, 0x77, 0xed, 0xdd, 0x5a, 0x82, 0xc5, 0x7c, 0xff, 0x91, 0x7f, 0xa3, 0x84,
	0xec, 0x4a, 0x03, 0xbf, 0xaf, 0x90, 0xac, 0x3f, 0x0a, 0x89, 0xa1, 0xf5, 0x4a, 0xec, 0xe1, 0x4e,
	0x17, 0x29, 0x02, 0x65, 0x59, 0x06, 0x39, 0x74, 0x21, 0xbf, 0x6f, 0x0c, 0xdc, 0x82, 0xf9, 0x74,
	0xd2, 0xfb, 0xaa, 0xec, 0x01, 0xac, 0xbd, 0xe2, 0xc9, 0xae, 0x76, 0x4c, 0xca, 0x64, 0x50, 0x9c,
	0x4e, 0x9f, 0xf0, 0x74, 0x0c, 0xcc, 0xc0, 0xb9, 0x56, 0x7e, 0x8e, 0x7e, 0x5b, 0x3d, 0x58, 0x99,
	0x14, 0x87, 0x6b, 0xf9, 0x0c, 0x6a, 0xc2, 0x32, 0x94, 0x6f, 0x95, 0x57, 0x5f, 0xef, 0x6a, 0xab,
	0x2e, 0xd6, 0xdf, 0x1b, 0xc0, 0x5e, 0xf1, 0x24, 0xf5, 0x09, 0x77, 0xe9, 0x70, 0x13, 0x16, 0x33,
	0x9f, 0xa6, 0xba, 0x90, 0x4a, 0xed, 0x76, 0xca, 0x38, 0x15, 0x7d, 0xb5, 0x83, 0xac, 0xe6, 0x6e,
	0xc2, 0x14, 0x77, 0x33, 0x37, 0xcd, 0xdd, 0x58, 0x47, 0xd0, 0xc9, 0x2d, 0x0e, 0xf7, 0xa7, 0x02,
	0x9d, 0x31, 0xd3, 0xaf, 0x89, 0x40, 0x87, 0x97, 0x39, 0x8a, 0xc2, 0x28, 0xbd, 0xcc, 0xd8, 0xc0,
	0xec, 0xe5, 0x15, 0x4f, 0x8e, 0x7c, 0x27, 0x50, 0x5b, 0x2d, 0x28, 0xdb, 0xfa, 0x23, 0x58, 0x92,
	0x3d, 0xe2, 0x7d, 0x2f, 0x4e, 0x54, 0xb7, 0x75, 0xf4, 0xd2, 0x51, 0xc4, 0x83, 0xe1, 0x0d, 0x75,
	0x6e, 0xd8, 0x69, 0xdb, 0xfa, 0x8f, 0x32, 0xb4, 0xde, 0x84, 0x01, 0xff, 0x4b, 0x5a, 0x37, 0x0e,
	0xbd, 0xcf, 0x11, 0xe2, 0x0a, 0x9d, 0xb3, 0x70, 0xac, 0xc2, 0x94, 0x68, 0xb0, 0x17, 0xd0, 0x19,
	0x45, 0xde, 0xb5, 0x13, 0xdd, 0x0c, 0xd2, 0x09, 0x4d, 0xea, 0xd0, 0x96, 0xf4, 0x5d, 0x49, 0x66,
	0x3f, 0x81, 0xa5, 0x78, 0x7c, 0x16, 0x0f, 0x23, 0x6f, 0x44, 0x7a, 0x1c, 0xf1, 0xc8, 0x0b, 0x95,
	0xb2, 0x99, 0xce, 0x3a, 0x22, 0x0e, 0xfb, 0x03, 0x60, 0xf9, 0x01, 0x91, 0x37, 0xe4, 0x52, 0xf7,
	0x8b, 0xb9, 0xfe, 0xc8, 0x60, 0x5f, 0xc0, 0x6a, 0x12, 0x39, 0x41, 0x2c, 0x12, 0x1b, 0xf2, 0x25,
	0x5e, 0x1c, 0x63, 0x26, 0x80, 0xd1, 0xce, 0xb0, 0x57, 0x34, 0xee, 0x6e, 0xca, 0x64, 0x9f, 0xc3,
	0xd2, 0x30, 0xf4, 0x82, 0x78, 0xc0, 0x7f, 0x18, 0x5e, 0x3a, 0xc1, 0x05, 0x1f, 0x44, 0x4e, 0xc2,
	0x29, 0xb6, 0x19, 0xf6, 0x22, 0xb1, 0x7a, 0x92, 0x63, 0x3b, 0x09, 0xc7, 0x40, 0x3e, 0x1a, 0x9f,
	0xf9, 0xde, 0x90, 0x02, 0x5b, 0xdd, 0x96, 0x2d, 0xeb, 0x80, 0x6e, 0x99, 0x38, 0x2b, 0x3c, 0xf9,
	0xe7, 0x60, 0x8e, 0x7c, 0x27, 0x90, 0xb7, 0x6c, 0x59, 0x9c, 0x7c, 0x5e, 0xef, 0x36, 0xf5, 0x98,
	0x71, 0xf6, 0xa7, 0xb0, 0x98, 0x3f, 0x59, 0x14, 0xba, 0x09, 0x55, 0x1c, 0xa2, 0x2e, 0xcb, 0x74,
	0xa9, 0xa2, 0xcb, 0x0c, 0xb1, 0xe7, 0x00, 0xbb, 0xb8, 0xa7, 0xc3, 0xf3, 0x73, 0x1e, 0x4d, 0xcb,
	0x52, 0x9c, 0xeb, 0x70, 0x2c, 0xdd, 0xbe, 0x69, 0xcb, 0x16, 0xca, 0x12, 0xda, 0x17, 0xee, 0x5d,
	0x34, 0x72, 0x56, 0x66, 0x16, 0xac, 0xec, 0x40, 0xdc, 0xf8, 0x74, 0xaa, 0xf8, 0x1e, 0xa6, 0xc9,
	0x1e, 0x40, 0x3d, 0xc4, 0xce, 0xd9, 0x35, 0xad, 0x51, 0xbb, 0xef, 0x5a, 0xa7, 0x64, 0xe8, 0x39,
	0x79, 0x42, 0xcb, 0x73, 0xd4, 0x43, 0x69, 0x44, 0xa6, 0x19, 0x59, 0x3f, 0x5b, 0xf2, 0x67, 0xa8,
	0xe3, 0xb7, 0x06, 0x74, 0x8e, 0x85, 0x29, 0x9d, 0xe9, 0xfe, 0x04, 0xf3, 0x03, 0xcd, 0x9f, 0x60,
	0x53, 0xf8, 0x88, 0xbc, 0x17, 0x51, 0x8e, 0x66, 0x0d, 0x6a, 0xa8, 0x74, 0x2d, 0x00, 0x62, 0x53,
	0x64, 0xfc, 0xce, 0x38, 0x09, 0x07, 0x11, 0x0f, 0xf8, 0x7b, 0xc7, 0x27, 0x35, 0xd5, 0xed, 0x26,
	0xd2, 0x6c, 0x41, 0xc2, 0x74, 0x53, 0x5b, 0x01, 0x6e, 0xaa, 0x05, 0xe5, 0xf0, 0x8a, 0xa6, 0xae,
	0xdb, 0xe5, 0xf0, 0x6a, 0xc6, 0xd2, 0x7f, 0x45, 0x21, 0x7d, 0x7b, 0x9c, 0x84, 0x11, 0x3f, 0xf7,
	0x7c, 0xff, 0x4e, 0x6f, 0x78, 0x8b, 0x76, 0x37, 0x29, 0xb6, 0xea, 0xb2, 0x70, 0x1d, 0xe9, 0xbc,
	0x86, 0x3e, 0xef, 0x3f, 0x18, 0xc2, 0x32, 0x65, 0x92, 0x39, 0xb3, 0xae, 0x5b, 0x06, 0x73, 0x18,
	0xba, 0x3c, 0xad, 0xe7, 0xa8, 0xc5, 0x1e, 0x42, 0xfd, 0x9a, 0xbb, 0x9e, 0xa3, 0x54, 0x85, 0x9c,
	0x1a, 0x51, 0x84, 0xb6, 0xde, 0x7b, 0xc9, 0xe5, 0xc0, 0xe5, 0x3e, 0x4f, 0xb8, 0xab, 0xb4, 0x85,
	0xb4, 0x3d, 0x41, 0xd2, 0x77, 0x57, 0xd5, 0x77, 0x97, 0x0f, 0x79, 0xbf, 0x2b, 0xa3, 0x72, 0xb0,
	0x55, 0x58, 0x66, 0x17, 0x6a, 0x57, 0xfc, 0xe6, 0x7d, 0x18, 0xb9, 0x72, 0x53, 0xaa, 0xc9, 0x56,
	0xc1, 0x4c, 0x9c, 0x8b, 0x98, 0x4a, 0x92, 0xca, 0x4e, 0xb9, 0x63, 0xd8, 0xd4, 0xce, 0x2a, 0x8d,
	0x0a, 0x25, 0x6c, 0xb2, 0xd2, 0xe8, 0x92, 0xdd, 0xc5, 0x5c, 0x14, 0x20, 0xb8, 0x65, 0xd9, 0x66,
	0x0f, 0xa0, 0x46, 0x55, 0x86, 0x5a, 0x20, 0xb2, 0x90, 0xd0, 0x77, 0xd9, 0x06, 0xcc, 0x7b, 0xf1,
	0x20, 0x76, 0x7c, 0x3e, 0x08, 0x03, 0xff, 0x86, 0x5c, 0x59, 0xdd, 0x06, 0x2f, 0x3e, 0x76, 0x7c,
	0x7e, 0x18, 0xf8, 0x37, 0xe8, 0x4e, 0x85, 0x98, 0x41, 0x56, 0xc7, 0xd4, 0xa8, 0x57, 0x5b, 0xd0,
	0xf7, 0xd2, 0x6a, 0x46, 0x53, 0x44, 0xbd, 0x68, 0x8b, 0xca, 0x7a, 0x1b, 0x39, 0xeb, 0xcd, 0x65,
	0xf8, 0xe4, 0xdf, 0xa1, 0x90, 0xe1, 0x1f, 0x38, 0xd7, 0x1c, 0x15, 0x29, 0xd7, 0x70, 0x76, 0x63,
	0x7d, 0x0d, 0x4b, 0x52, 0x83, 0x42, 0x9d, 0xb2, 0x42, 0x7c, 0x02, 0x73, 0x11, 0xfd, 0x92, 0xd7,
	0xae, 0x50, 0x78, 0x48, 0xa6, 0xf5, 0x0d, 0x2c, 0xa6, 0xfa, 0x9f, 0x59, 0x5d, 0x76, 0xa1, 0xa6,
	0xce, 0xbb, 0x4c, 0x5b, 0x55, 0x4d, 0xeb, 0x0c, 0x96, 0x45, 0x6d, 0x5a, 0x38, 0xc4, 0x67, 0x50,
	0x93, 0x95, 0x8d, 0xf4, 0xae, 0x85, 0xe9, 0x15, 0x17, 0xed, 0x09, 0x53, 0x47, 0x2f, 0x0c, 0xb8,
	0x3b, 0x38, 0xbb, 0x91, 0x56, 0xdf, 0x4c, 0x69, 0x3b, 0x37, 0xd6, 0xaf, 0x61, 0xa9, 0x30, 0xc7,
	0xd4, 0x45, 0xae, 0xc2, 0x1c, 0xff, 0xc1, 0x8b, 0x93, 0x58, 0xae, 0x51, 0xb6, 0x30, 0x52, 0x92,
	0x91, 0x8b, 0xa0, 0x48, 0xbf, 0xad, 0x7f, 0x9b, 0x83, 0x9a, 0x94, 0x36, 0x21, 0x67, 0x19, 0xaa,
	0x89, 0x97, 0xf8, 0x2a, 0xb4, 0x8a, 0xc6, 0x34, 0x29, 0xec, 0x4b, 0x58, 0xcb, 0x4e, 0xcb, 0xbb,
	0x76, 0x2e, 0xf8, 0x60, 0xe8, 0x50, 0xb8, 0x93, 0xbe, 0x76, 0x25, 0x65, 0xf7, 0x91, 0xbb, 0x2b,
	0x98, 0xec, 0x33, 0x60, 0xc5, 0x71, 0xd2, 0x14, 0x1b, 0x76, 0x27, 0x3f, 0xa4, 0xef, 0x62, 0xf4,
	0x2b, 0xf6, 0x1e, 0x47, 0x3e, 0x59, 0x66, 0xc3, 0x5e, 0xcc, 0x77, 0x3f, 0x8d, 0xfc, 0xfb, 0xc2,
	0x13, 0x5b, 0xb0, 0x52, 0x14, 0xfb, 0xde, 0x73, 0x93, 0x4b, 0x2a, 0x8e, 0x16, 0xec, 0xa5, 0xbc,
	0xe0, 0xb7, 0xc8, 0x62, 0x3f, 0x83, 0xd5, 0xe2, 0x98, 0x4b, 0xee, 0x5d, 0x5c, 0x26, 0x54, 0x2a,
	0x2d, 0xd8, 0xcb, 0xf9, 0x41, 0xaf, 0x89, 0x97, 0x1f, 0x45, 0xa1, 0x38, 0xbe, 0x14, 0xf5, 0x5c,
	0x9d, 0x94, 0x9e, 0x8d, 0x3a, 0x52, 0xcc, 0xed, 0x24, 0xbf, 0x3e, 0xdf, 0xbb, 0xe2, 0x58, 0x7b,
	0x60, 0xd8, 0xc3, 0x1b, 0x53, 0xd5, 0xd6, 0xb7, 0x8f, 0xbc, 0x5d, 0x8a, 0x81, 0x8f, 0xa0, 0x19,
	0xcb, 0x8a, 0x00, 0x35, 0x0a, 0x02, 0xdd, 0x51, 0x24, 0x02, 0x35, 0xea, 0xaa, 0x45, 0x05, 0x69,
	0xbe, 0xe4, 0x4c, 0x79, 0x79, 0xab, 0xf4, 0x5c, 0x2a, 0x4f, 0x2b, 0x9a, 0x55, 0x12, 0x7e, 0xd3,
	0x48, 0x9b, 0x54, 0x98, 0xe6, 0xcb, 0xec, 0x8c, 0x89, 0x86, 0x29, 0xfc, 0x07, 0x95, 0xeb, 0x75,
	0x5b, 0xb6, 0xd8, 0x33, 0xa8, 0x7a, 0x09, 0xbf, 0x8e, 0xbb, 0x6d, 0xba, 0xa0, 0x8b, 0xb9, 0x1b,
	0xd2, 0x4f, 0xf8, 0xb5, 0x2d, 0xf8, 0xec, 0x97, 0xd0, 0x29, 0xa8, 0x3d, 0xee, 0x32, 0x3d, 0xbb,
	0x90, 0xd6, 0x15, 0xb8, 0x1e, 0x56, 0xaa, 0x5a, 0xe2, 0x4c, 0x8c, 0x98, 0x3d, 0x81, 0x3a, 0x6a,
	0x90, 0x2e, 0xd8, 0x12, 0x0d, 0xd4, 0x97, 0x5a, 0x23, 0xde, 0xce, 0x0d, 0xfb, 0x39, 0xac, 0x4f,
	0x3f, 0x28, 0xaa, 0x86, 0x97, 0x49, 0x07, 0x6b, 0xd3, 0x0e, 0x0b, 0x0b, 0xe3, 0xbf, 0x35, 0xa0,
	0xa9, 0xad, 0x7d, 0xe2, 0x5a, 0xcd, 0x48, 0x58, 0x45, 0xce, 0x02, 0x7a, 0xce, 0xf2, 0x04, 0x5a,
	0xae, 0x17, 0xd3, 0x61, 0xcb, 0x84, 0x52, 0x60, 0x07, 0x0b, 0x8a, 0x2a, 0x92, 0xc9, 0x8f, 0x65,
	0x34, 0x58, 0xa0, 0x0d, 0x35, 0xc4, 0x86, 0x4e, 0x9c, 0x0b, 0x11, 0x14, 0xac, 0x97, 0xd0, 0xca,
	0xab, 0x65, 0x62, 0x45, 0x1d, 0xa8, 0xe0, 0x45, 0x12, 0x0b, 0xc2, 0x9f, 0xe9, 0x1a, 0x2b, 0x5a,
	0x5d, 0xf4, 0x19, 0x85, 0xd2, 0x7d, 0xa1, 0xa2, 0xbb, 0x02, 0xb8, 0xb5, 0x05, 0x6d, 0xbd, 0x37,
	0x86, 0xe8, 0x47, 0xd0, 0xcc, 0x70, 0x40, 0x91, 0x04, 0x99, 0x36, 0xa4, 0x40, 0x60, 0x6c, 0xfd,
	0x05, 0x30, 0x1c, 0x50, 0xf0, 0xa0, 0x33, 0x73, 0x84, 0x3c, 0xae, 0x28, 0xfc, 0xa5, 0x86, 0x2b,
	0x32, 0x30, 0xf1, 0x3c, 0x69, 0x0f, 0x75, 0x9b, 0x7e, 0x5b, 0x0c, 0x3a, 0xb9, 0x19, 0xb0, 0xce,
	0x7d, 0x08, 0x0f, 0x5e, 0xf1, 0xe4, 0x78, 0xc4, 0x87, 0x9e, 0xe3, 0x4b, 0x4e, 0x5a, 0x40, 0xfe,
	0x29, 0xb0, 0x3c, 0x67, 0x2a, 0x60, 0x36, 0xd5, 0x53, 0x5a, 0xdf, 0x53, 0x5d, 0x3a, 0x21, 0x58,
	0x94, 0x92, 0xa6, 0xef, 0xc5, 0x2a, 0x22, 0x75, 0xe5, 0xd5, 0x9b, 0x98, 0xc8, 0xa6, 0x5e, 0x78,
	0x3e, 0x3c, 0x52, 0x19, 0x15, 0xfe, 0xb4, 0xfe, 0xca, 0x80, 0xc6, 0x49, 0x78, 0xc5, 0x83, 0xa9,
	0xcb, 0x99, 0x99, 0xfa, 0x3d, 0x06, 0x33, 0xb9, 0x19, 0x09, 0x95, 0xb4, 0xb6, 0xda, 0xd2, 0x52,
	0x50, 0xce, 0xc9, 0xcd, 0x88, 0xdb, 0xc4, 0xa4, 0xcd, 0x20, 0x49, 0xba, 0x6e, 0xd1, 0xc8, 0x4a,
	0xaa, 0xaa, 0x56, 0x52, 0x59, 0x5f, 0x41, 0x7b, 0xdb, 0x75, 0x49, 0x82, 0x3a, 0xae, 0x27, 0x6a,
	0xb8, 0x08, 0x77, 0xfa, 0x24, 0x02, 0x80, 0x24, 0xae, 0xd5, 0x83, 0xf6, 0x1e, 0xf7, 0x73, 0x23,
	0x1f, 0x40, 0x9d, 0x78, 0xd9, 0x49, 0xd7, 0xa8, 0x7d, 0x4b, 0x32, 0x6b, 0x3d, 0x86, 0x66, 0x0f,
	0x33, 0x3d, 0x19, 0x0a, 0xa7, 0x67, 0x81, 0x9f, 0x52, 0xb1, 0x4b, 0x73, 0xdd, 0x09, 0xf7, 0x5a,
	0x47, 0x64, 0xb8, 0xaa, 0x33, 0x49, 0x7d, 0x06, 0x73, 0xb4, 0x10, 0x95, 0xb8, 0x4f, 0xec, 0x49,
	0xb2, 0x67, 0x24, 0xbf, 0xdf, 0xc1, 0x5a, 0x3f, 0x78, 0xe7, 0xf8, 0x74, 0xf9, 0xf2, 0xab, 0x50,
	0x07, 0x62, 0xdc, 0x76, 0x20, 0xab, 0xe9, 0xf4, 0x98, 0xef, 0x35, 0xd4, 0x6c, 0x56, 0x17, 0x56,
	0x27, 0xe5, 0x52, 0x2e, 0x13, 0x03, 0x13, 0x10, 0x71, 0x4e, 0xbf, 0xf7, 0x9a, 0xec, 0x21, 0x34,
	0x42, 0xdf, 0x1d, 0x88, 0x23, 0x14, 0xdb, 0xa8, 0x87, 0xbe, 0x38, 0x62, 0x64, 0x06, 0xfc, 0xbd,
	0x64, 0x0a, 0xdf, 0x50, 0x0f, 0xf8, 0x7b, 0x62, 0x5a, 0x4b, 0xb0, 0x98, 0x9b, 0x94, 0x56, 0xf2,
	0x03, 0xd4, 0x31, 0xa2, 0xec, 0x3a, 0x91, 0x3b, 0xcd, 0x4c, 0x55, 0xf2, 0x57, 0xce, 0x25, 0x7f,
	0x53, 0xbc, 0x0f, 0x2a, 0x21, 0x18, 0x5f, 0x9f, 0xf1, 0x48, 0x9a, 0xa5, 0x6c, 0xcd, 0xcc, 0xb1,
	0xad, 0x3f, 0x86, 0x45, 0x91, 0x2c, 0xe1, 0xdc, 0x4a, 0x05, 0x16, 0x98, 0x43, 0x27, 0x2a, 0xbc,
	0x0e, 0xa8, 0x05, 0xda, 0xc4, 0xb3, 0xbe, 0x80, 0xb6, 0x3e, 0x50, 0x16, 0x39, 0x77, 0xc2, 0x46,
	0x5f, 0xc3, 0xa2, 0xc8, 0xfb, 0xf5, 0xf9, 0xee, 0x7b, 0x33, 0xad, 0x45, 0xba, 0x0e, 0x5c, 0x9b,
	0xd4, 0xda, 0x25, 0x43, 0xc4, 0xf6, 0xdd, 0x6f, 0x14, 0xb3, 0x54, 0x69, 0x7d, 0x01, 0x0b, 0x99,
	0x10, 0xf9, 0x3c, 0x80, 0xbb, 0x2c, 0x3c, 0x0f, 0xa4, 0x2a, 0x10, 0x4c, 0xeb, 0x1b, 0xc2, 0xae,
	0x90, 0xb2, 0x73, 0xd3, 0xdf, 0xfb, 0xe0, 0xdd, 0x08, 0x14, 0x2f, 0xd3, 0x9f, 0x52, 0xbb, 0x71,
	0x8b, 0xda, 0xff, 0xa7, 0x0a, 0x26, 0x92, 0x26, 0xa2, 0x53, 0x21, 0x97, 0x29, 0xdf, 0x9a, 0xcb,
	0x54, 0x26, 0x61, 0x7e, 0x3d, 0x97, 0xd1, 0xb2, 0x07, 0xf5, 0x4a, 0x91, 0x3d, 0x2c, 0xf4, 0x09,
	0xc6, 0xc9, 0x83, 0x70, 0x74, 0xcc, 0xd5, 0x42, 0x86, 0x79, 0x2a, 0x19, 0xf9, 0xee, 0xe7, 0x63,
	0xdf, 0xa7, 0xee, 0xc5, 0x84, 0xf4, 0xa5, 0x64, 0xb0, 0x3f, 0x84, 0x2c, 0xc3, 0x1b, 0x38, 0xef,
	0x9c, 0xc4, 0x89, 0x28, 0x83, 0x15, 0x69, 0x69, 0x26, 0x6a, 0x9b, 0x58, 0x98, 0xc2, 0x7e, 0xaa,
	0x83, 0x82, 0x2a, 0xa5, 0xae, 0x17, 0xf2, 0x63, 0x95, 0x4d, 0xe7, 0x3a, 0xbf, 0xe7, 0x67, 0xb1,
	0x97, 0x70, 0x4a, 0x12, 0xf5, 0xce, 0x6f, 0x05, 0x9d, 0x3d, 0x86, 0x85, 0x91, 0x73, 0x83, 0xb9,
	0xd9, 0x20, 0x1a, 0xfb, 0x3c, 0x96, 0xf5, 0xd5, 0xbc, 0x24, 0xda, 0x48, 0x23, 0xb4, 0xfb, 0xd2,
	0x1b, 0x8d, 0xbc, 0xe0, 0x42, 0xf6, 0x6a, 0x4a, 0xb4, 0x5b, 0x52, 0x45, 0xb7, 0x2e, 0xd4, 0xd4,
	0xda, 0xe6, 0xe5, 0xbb, 0x90, 0x5c, 0xd2, 0x27, 0x50, 0x8b, 0xb9, 0xef, 0xf3, 0x48, 0x65, 0x27,
	0xb9, 0x74, 0x4b, 0xb2, 0x30, 0x90, 0x6b, 0xda, 0x10, 0x4f, 0x39, 0x0d, 0x27, 0x55, 0xc2, 0x2a,
	0xcc, 0xc5, 0x7e, 0x78, 0xe1, 0x88, 0x47, 0x8d, 0x86, 0x2d, 0x5b, 0xec, 0x23, 0xc0, 0x4e, 0x9e,
	0xef, 0x9c, 0xf9, 0x9c, 0x92, 0xf5, 0xba, 0x9d, 0x11, 0x50, 0xe8, 0x90, 0xae, 0x31, 0x25, 0xd8,
	0x8b, 0x22, 0x3b, 0x90, 0x94, 0x6d, 0x7a, 0x7e, 0x8b, 0xc7, 0xf1, 0x88, 0x07, 0x2e, 0x77, 0xbb,
	0x4c, 0x0c, 0x4e, 0x09, 0x3a, 0x46, 0xb2, 0x94, 0xc3, 0x48, 0x9e, 0x42, 0x9b, 0x18, 0xfc, 0x87,
	0x91, 0x17, 0xf1, 0x18, 0x45, 0x8b, 0x74, 0x70, 0x01, 0xc9, 0x3d, 0x41, 0xdd, 0x4e, 0x26, 0xb0,
	0x94, 0x95, 0x49, 0x2c, 0xe5, 0xcf, 0x81, 0xa1, 0xbd, 0x1f, 0x45, 0xe1, 0xb9, 0x97, 0xe1, 0xc3,
	0xcf, 0x26, 0x0a, 0x5f, 0x43, 0x22, 0x0f, 0xf9, 0xd2, 0x77, 0x12, 0x73, 0x2f, 0x02, 0xe9, 0x9d,
	0x9c, 0x74, 0xbc, 0x86, 0xea, 0x8d, 0xc9, 0x98, 0xfe, 0xc6, 0x64, 0x8d, 0xc0, 0x7a, 0xe9, 0x05,
	0xee, 0x61, 0x24, 0xfc, 0x1f, 0x72, 0x5e, 0x86, 0x51, 0xf1, 0x29, 0xa2, 0x70, 0x1f, 0x85, 0x3b,
	0xd0, 0xef, 0xe3, 0x0b, 0xe8, 0x44, 0x5c, 0x68, 0x7a, 0x90, 0xaf, 0x96, 0xdb, 0x8a, 0x2e, 0x11,
	0x12, 0xeb, 0x0a, 0x36, 0x6e, 0x9d, 0x11, 0x57, 0x3d, 0x13, 0xe1, 0x9a, 0x59, 0x8c, 0x67, 0x71,
	0xb8, 0xa2, 0xc7, 0xe1, 0x4d, 0x72, 0x6a, 0x6f, 0x1c, 0x2f, 0x38, 0x71, 0x2e, 0x52, 0x9f, 0x9a,
	0x62, 0x26, 0x86, 0x86, 0x99, 0xc8, 0x47, 0x00, 0x9b, 0xfb, 0x68, 0x2e, 0x7a, 0x77, 0x05, 0xbd,
	0x18, 0xb3, 0xa0, 0x97, 0xb2, 0x2e, 0xe6, 0x67, 0xd0, 0x3e, 0x71, 0x2e, 0x72, 0x70, 0xc4, 0x8f,
	0x0b, 0x70, 0x84, 0x96, 0xaf, 0x2b, 0x28, 0xe2, 0x05, 0x54, 0x4e, 0x9c, 0x8b, 0xfb, 0x14, 0x0e,
	0xd6, 0x4f, 0x55, 0x94, 0xa3, 0x1b, 0x25, 0xd7, 0xf8, 0x23, 0x30, 0xd1, 0x77, 0xe5, 0xcf, 0x99,
	0x3a, 0x10, 0xdd, 0xfa, 0x77, 0xf9, 0xad, 0x83, 0x3e, 0xa6, 0xe8, 0x1c, 0x8d, 0x49, 0xe7, 0x88,
	0x45, 0xca, 0x65, 0x18, 0xa4, 0x59, 0x2e, 0x35, 0x66, 0xb8, 0xcc, 0xca, 0x2c, 0x97, 0xa9, 0x36,
	0x51, 0xd3, 0x62, 0xbb, 0xd8, 0xa8, 0xa9, 0x23, 0xbb, 0x12, 0xb6, 0xae, 0xea, 0xb0, 0x35, 0xa6,
	0x1f, 0x17, 0x3c, 0x19, 0xe0, 0xf1, 0xc7, 0x12, 0x90, 0xaa, 0x5f, 0xf0, 0x04, 0xad, 0x26, 0xc6,
	0xb0, 0x2d, 0xf4, 0x2c, 0x76, 0x25, 0xc2, 0x4e, 0x5e, 0xd5, 0xba, 0x26, 0x94, 0xae, 0x7f, 0x09,
	0x0b, 0x99, 0x2a, 0xf2, 0xb1, 0x5e, 0x68, 0x5d, 0x29, 0xb3, 0x3c, 0x43, 0x99, 0xff, 0x58, 0x05,
	0x13, 0x9b, 0xf7, 0xad, 0xf3, 0xf8, 0xb5, 0xe3, 0xf9, 0xa9, 0x61, 0x62, 0x23, 0x53, 0xac, 0xa9,
	0x2b, 0xb6, 0x0b, 0x35, 0xe5, 0xc4, 0x45, 0x00, 0x52, 0x4d, 0xdd, 0xdf, 0x2e, 0xe4, 0xfd, 0x6d,
	0xde, 0x93, 0x2e, 0xce, 0xf6, 0xa4, 0x2c, 0xe7, 0x49, 0x8b, 0x87, 0x3f, 0x77, 0xdf, 0xc8, 0x58,
	0xfb, 0xb0, 0xc8, 0x58, 0xff, 0xd0, 0xc8, 0xd8, 0xf8, 0xb0, 0xc8, 0x08, 0x33, 0x22, 0xe3, 0x1a,
	0xd4, 0xc2, 0x51, 0x32, 0xc0, 0xf2, 0xa5, 0x29, 0x2c, 0x2a, 0x1c, 0x25, 0x87, 0x63, 0xb2, 0xfa,
	0x78, 0x3c, 0xe2, 0xd1, 0x40, 0x84, 0x22, 0x0a, 0x5f, 0x75, 0xbb, 0x49, 0xb4, 0x63, 0x22, 0xa1,
	0xd1, 0x5d, 0x3a, 0xf1, 0x40, 0x1c, 0x9b, 0xc0, 0x2d, 0xea, 0x97, 0x4e, 0xdc, 0xa3, 0x93, 0x93,
	0x4c, 0x71, 0x7a, 0xed, 0x94, 0x79, 0x44, 0x07, 0xf8, 0x11, 0x34, 0x86, 0x61, 0x70, 0xee, 0x45,
	0xd7, 0xdc, 0x95, 0x01, 0x20, 0x23, 0xe0, 0x9a, 0xbc, 0x78, 0x70, 0xee, 0x5c, 0xf1, 0xee, 0xaa,
	0x42, 0x43, 0x5e, 0x3a, 0x57, 0x94, 0xe9, 0xca, 0xd5, 0x88, 0x98, 0x26, 0x5b, 0x39, 0xbf, 0x1b,
	0x9e, 0x13, 0x7c, 0xa1, 0xf9, 0xdd, 0xc3, 0x73, 0x5c, 0x8c, 0xe8, 0x8a, 0xec, 0x65, 0x62, 0xd7,
	0x05, 0xe1, 0xf0, 0xdc, 0xfa, 0x16, 0xaf, 0x47, 0x42, 0xab, 0xbe, 0x33, 0x9b, 0x4c, 0xad, 0xb4,
	0xac, 0x59, 0xa9, 0xf5, 0x04, 0x16, 0x32, 0x09, 0xb3, 0x21, 0xf7, 0x63, 0x68, 0x1d, 0xf3, 0x64,
	0xcf, 0x49, 0x9c, 0x3b, 0xe7, 0x99, 0x85, 0x84, 0x90, 0x36, 0x2b, 0xda, 0x5d, 0xb0, 0x5a, 0x30,
	0x9f, 0x0a, 0x1d, 0xf9, 0x37, 0x9b, 0x8f, 0x00, 0xb2, 0xef, 0x83, 0x58, 0x0d, 0x2a, 0x3b, 0xa7,
	0xdf, 0x77, 0x4a, 0xac, 0x0e, 0x66, 0xff, 0xe0, 0xe5, 0x61, 0xc7, 0xd8, 0x3c, 0x85, 0x79, 0xfd,
	0xe5, 0x92, 0x35, 0xa1, 0x76, 0x7a, 0xf0, 0x67, 0x07, 0x87, 0x6f, 0x0f, 0x3a, 0x25, 0x36, 0x0f,
	0xf5, 0xdd, 0xd3, 0xe3, 0x93, 0xc3, 0x37, 0x3d, 0xbb, 0x63, 0x60, 0xeb, 0xf8, 0xf4, 0xe8, 0x68,
	0xbf, 0xdf, 0xb3, 0x3b, 0x65, 0x06, 0x30, 0x77, 0xdc, 0xdb, 0xdf, 0xef, 0xd9, 0x9d, 0x0a, 0xeb,
	0xc0, 0xfc, 0xf1, 0xe9, 0x51, 0xcf, 0x1e, 0x48, 0x8a, 0xb9, 0x19, 0x8a, 0x79, 0xc5, 0xa3, 0x3e,
	0x6b, 0x40, 0xb5, 0xf7, 0xe6, 0xe8, 0x04, 0x67, 0xae, 0x41, 0xe5, 0xa0, 0xf7, 0xb6, 0x63, 0xb0,
	0x36, 0x34, 0xfb, 0x07, 0x83, 0x23, 0xfb, 0xf0, 0x95, 0xdd, 0x3b, 0x3e, 0xee, 0x94, 0xd9, 0x02,
	0x34, 0x8e, 0x4f, 0x77, 0xde, 0xf4, 0x4f, 0x4e, 0x7a, 0x7b, 0x9d, 0x0a, 0xf2, 0x0f, 0x0f, 0x06,
	0x7b, 0xbd, 0xfd, 0xfe, 0x77, 0x3d, 0xfb, 0xfb, 0x8e, 0x89, 0xfc, 0xdd, 0xc3, 0x37, 0x47, 0xfb,
	0x3d, 0xe4, 0x57, 0xa9, 0xb9, 0x7d, 0xb0, 0x8b, 0x13, 0xee, 0x75, 0xe6, 0x36, 0x07, 0xd0, 0x2e,
	0x7c, 0xc7, 0x80, 0x2b, 0xdc, 0xb5, 0x7b, 0xdb, 0x27, 0x3d, 0xb1, 0x93, 0x74, 0x2a, 0x83, 0xd6,
	0x4e, 0x53, 0x75, 0xca, 0xc8, 0x49, 0x27, 0xa9, 0xd0, 0x8e, 0xe5, 0x24, 0x1d, 0x93, 0x24, 0xd0,
	0x1c, 0x9d, 0xea, 0xe6, 0x27, 0x12, 0x48, 0xc0, 0x12, 0x10, 0xb5, 0xb4, 0x1d, 0xb8, 0x51, 0xe8,
	0xb9, 0x9d, 0x12, 0xf6, 0xea, 0x93, 0xf6, 0x3b, 0xc6, 0xd6, 0x7f, 0x99, 0xd0, 0xa4, 0x75, 0xf0,
	0xe8, 0x9d, 0x37, 0xe4, 0x6c, 0x0b, 0x20, 0xfb, 0x12, 0x8b, 0x41, 0xf6, 0x54, 0xbc, 0xbe, 0x2a,
	0x1f, 0xb5, 0x0a, 0xdf, 0x69, 0x59, 0x25, 0xf6, 0x27, 0x50, 0x57, 0x9f, 0xb7, 0x31, 0xf9, 0x89,
	0x46, 0xe1, 0x83, 0xbb, 0xf5, 0xe5, 0x22, 0x59, 0x0e, 0xfd, 0x05, 0xd5, 0x13, 0xe9, 0x87, 0x4e,
	0x6c, 0x35, 0xf3, 0xc2, 0xfa, 0x37, 0x5c, 0x6a, 0x7c, 0xfe, 0x8b, 0x28, 0xab, 0xc4, 0xbe, 0x80,
	0x9a, 0xfc, 0xaa, 0x80, 0xc9, 0x2e, 0xf9, 0x2f, 0x1b, 0xd6, 0x59, 0x81, 0x2a, 0x86, 0xbd, 0x22,
	0x8b, 0xd7, 0x0e, 0x7c, 0x5d, 0xa6, 0x4c, 0x53, 0xbe, 0x4e, 0x59, 0xef, 0x4e, 0xe5, 0x09, 0x41,
	0x7b, 0x30, 0xaf, 0x7f, 0xa4, 0xc1, 0x1e, 0xa8, 0x0f, 0x07, 0x26, 0x3e, 0xf4, 0x58, 0x5f, 0x9b,
	0xc6, 0xca, 0x49, 0x51, 0x5f, 0x69, 0xe8, 0x52, 0x0a, 0x5f, 0x7a, 0xe8, 0x52, 0xf2, 0x1f, 0x75,
	0x94, 0x98, 0x78, 0xf9, 0xcf, 0x7d, 0xde, 0xc0, 0x3e, 0x4e, 0xb7, 0x3f, 0xed, 0x2b, 0x8a, 0xf5,
	0x87, 0xb3, 0xd8, 0x42, 0xe2, 0x36, 0x34, 0xb5, 0x6f, 0x09, 0x58, 0x37, 0xed, 0x5d, 0xf8, 0xf6,
	0x41, 0xd9, 0x46, 0xf1, 0xc3, 0x03, 0xab, 0xb4, 0xf5, 0xdf, 0x65, 0x58, 0x7a, 0x13, 0x06, 0x3c,
	0xf1, 0xc4, 0xdb, 0xb0, 0xb2, 0x33, 0x71, 0x70, 0xf4, 0xee, 0x9f, 0x1d, 0x9c, 0xf6, 0x8d, 0x81,
	0x76, 0x70, 0xe9, 0x6b, 0xb6, 0xd0, 0x94, 0xfe, 0x1e, 0xad, 0x34, 0x35, 0xe5, 0xeb, 0x03, 0xa5,
	0xa9, 0x89, 0xe7, 0x6b, 0xab, 0xc4, 0x7e, 0x45, 0x5f, 0x34, 0x68, 0xcf, 0xb8, 0x4c, 0x53, 0xc4,
	0xc4, 0x63, 0xf1, 0xfa, 0x83, 0xe9, 0x4c, 0x21, 0xeb, 0xe7, 0xd0, 0x48, 0x1f, 0x4e, 0x95, 0xf9,
	0x16, 0xdf, 0x72, 0x95, 0xf9, 0xe6, 0x5f, 0x58, 0x53, 0x3b, 0xcc, 0x5e, 0x3c, 0x35, 0x3b, 0x9c,
	0x78, 0x52, 0xd5, 0xec, 0xb0, 0xf0, 0x44, 0x6a, 0x95, 0xb6, 0xfe, 0xda, 0x84, 0x56, 0xfa, 0x44,
	0x26, 0x34, 0xbc, 0x03, 0x90, 0x3d, 0x90, 0x32, 0x4d, 0x1b, 0x39, 0x10, 0x56, 0x6d, 0x6e, 0xca,
	0xfb, 0x9a, 0x30, 0x00, 0xbc, 0xb2, 0x77, 0x0a, 0x59, 0xcb, 0x3f, 0x7d, 0xe9, 0x37, 0xbc, 0x8f,
	0x51, 0x43, 0x7b, 0x03, 0xd5, 0xee, 0xda, 0xe4, 0xcb, 0xe8, 0xed, 0xab, 0x79, 0x0d, 0x0b, 0xb9,
	0x57, 0x32, 0x25, 0x69, 0xda, 0xf3, 0x9c, 0x92, 0x34, 0xe5, 0x59, 0x4d, 0xec, 0x4b, 0x43, 0x8b,
	0x95, 0x61, 0x4f, 0x42, 0xd4, 0xca, 0xb0, 0x27, 0xa0, 0x65, 0xf4, 0x5c, 0x90, 0xc1, 0xe0, 0x9a,
	0x66, 0xf2, 0x30, 0xfa, 0xfa, 0xca, 0x24, 0x43, 0x8c, 0xff, 0x8e, 0x6a, 0x96, 0x02, 0x86, 0xcc,
	0x1e, 0xa5, 0xdd, 0xa7, 0xc3, 0xd6, 0xeb, 0x1f, 0xcf, 0xee, 0x20, 0x2c, 0xe1, 0x3f, 0xcb, 0xb0,
	0x78, 0x34, 0x8e, 0x2f, 0x05, 0x6c, 0xa8, 0x8c, 0xe1, 0x4b, 0xa8, 0x2b, 0x38, 0x57, 0xb9, 0xe8,
	0x02, 0xbc, 0xbb, 0x2e, 0x1f, 0x67, 0x34, 0xd0, 0xd5, 0x2a, 0xe1, 0x38, 0x05, 0xe6, 0xaa, 0x71,
	0x05, 0x70, 0x77, 0xfa, 0xb8, 0xaf, 0xa1, 0x91, 0x62, 0xad, 0x2c, 0xf3, 0x0e, 0x39, 0x8c, 0x54,
	0xd3, 0x4d, 0x0e, 0xe3, 0x2c, 0xb1, 0x5f, 0x43, 0xa7, 0x88, 0x7f, 0x2a, 0x4f, 0x36, 0x03, 0x6f,
	0x5d, 0xff, 0x68, 0x16, 0x5b, 0x8a, 0xdc, 0x81, 0xa6, 0x86, 0x61, 0xaa, 0x13, 0x9f, 0xc4, 0x52,
	0x95, 0x29, 0x4f, 0x02, 0x9e, 0xa5, 0xad, 0xbf, 0x29, 0x43, 0x5b, 0x61, 0x5b, 0x4a, 0xb1, 0xbf,
	0x50, 0xf1, 0x92, 0x80, 0xd0, 0x35, 0xdd, 0xe8, 0x34, 0xb8, 0x50, 0x6d, 0xb5, 0x00, 0x3f, 0x0a,
	0x33, 0xca, 0xe0, 0x41, 0x35, 0x7e, 0x02, 0x6e, 0x5c, 0x5f, 0x99, 0x64, 0x88, 0xf1, 0x5f, 0x41,
	0x5d, 0xc1, 0x80, 0x6c, 0x45, 0xf3, 0xe6, 0x19, 0xb6, 0xb8, 0xbe, 0x54, 0x24, 0x8b, 0x91, 0xdf,
	0x90, 0x73, 0x57, 0x48, 0xa0, 0xe6, 0xdc, 0x0b, 0xe0, 0xa0, 0xe6, 0x89, 0xb5, 0x89, 0xb7, 0x7e,
	0x67, 0x40, 0x13, 0x95, 0xa1, 0x14, 0xb1, 0x47, 0x3e, 0x55, 0x43, 0x26, 0x94, 0xc4, 0x49, 0x28,
	0x44, 0xdd, 0xaa, 0x22, 0x8c, 0x61, 0x95, 0xd8, 0x6f, 0xe0, 0xe1, 0x2d, 0xb0, 0x01, 0x7b, 0x2e,
	0x06, 0xde, 0x8d, 0x65, 0xac, 0x3f, 0xbd, 0x47, 0x4f, 0xb1, 0x91, 0xbf, 0x33, 0x00, 0xa8, 0x94,
	0x17, 0xfb, 0xf8, 0x96, 0xd4, 0xa2, 0xb0, 0x04, 0x4d, 0x2d, 0x05, 0x78, 0x41, 0x1d, 0x49, 0x01,
	0x05, 0xb0, 0x4a, 0xec, 0x25, 0x69, 0x42, 0x43, 0x18, 0xb4, 0xe8, 0x32, 0x89, 0x3b, 0xcc, 0x94,
	0xb3, 0xf5, 0x4f, 0x65, 0x68, 0x62, 0x38, 0xcd, 0x1c, 0x7a, 0x47, 0xdf, 0x0e, 0x95, 0xa6, 0x39,
	0x83, 0xd3, 0xaa, 0x7e, 0x75, 0xe8, 0xb9, 0x0a, 0xd8, 0x2a, 0xb1, 0x6f, 0xa1, 0x25, 0xfa, 0x62,
	0x41, 0xf2, 0x7b, 0x49, 0xf8, 0x4a, 0x24, 0x7b, 0x34, 0x76, 0xa5, 0xd8, 0xe5, 0xae, 0x91, 0xaa,
	0xcc, 0x50, 0x23, 0x0b, 0x85, 0x8b, 0x1a, 0x99, 0xab, 0x46, 0x44, 0x96, 0x27, 0x8b, 0x04, 0x95,
	0x2c, 0xe4, 0x0b, 0x11, 0x65, 0xa2, 0x7a, 0x25, 0x61, 0x95, 0xce, 0xe6, 0xe8, 0x6f, 0x20, 0x3f,
	0xfd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x17, 0x2e, 0x0c, 0x14, 0x32, 0x00, 0x00,
}
