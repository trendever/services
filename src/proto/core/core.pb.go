// Code generated by protoc-gen-go.
// source: core.proto
// DO NOT EDIT!

/*
Package core is a generated protocol buffer package.

It is generated from these files:
	core.proto

It has these top-level messages:
	ReadLeadRequest
	ReadLeadResult
	Lead
	CreateLeadResult
	UserLeadsRequest
	UserLeadsReply
	LeadInfo
	SetLeadStatusRequest
	SetLeadStatusReply
	CallSupplierRequest
	CallSupplierReply
	CallCustomerRequest
	CallCustomerReply
	GetLeadRequest
	GetLeadReply
	GetProductRequest
	SearchProductRequest
	ProductSearchResult
	ProductReadResult
	CreateProductRequest
	CreateProductResult
	Product
	ProductItem
	ImageCandidate
	LikeProductRequest
	LikeProductReply
	GetSpecialProductsRequest
	SpecialProductInfo
	GetSpecialProductsReply
	ShopCard
	CreateCardRequest
	CreateCardReply
	DeleteCardRequest
	DeleteCardReply
	GetCardsRequest
	GetCardsReply
	ReadShopRequest
	CreateShopRequest
	ReadShopReply
	CreateShopReply
	Shop
	ShopProfileRequest
	ShopProfileReply
	GetMainTagsRequest
	GetRelatedTagsRequest
	TagSearchResult
	Tag
	CreateUserRequest
	ReadUserRequest
	SearchUserReply
	ReadUserReply
	User
	UserProfileRequest
	UserProfileReply
*/
package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LeadAction int32

const (
	LeadAction_BUY LeadAction = 0
	// we don't want add item to lead for now
	// just send info to conversation instead
	LeadAction_INFO LeadAction = 1
)

var LeadAction_name = map[int32]string{
	0: "BUY",
	1: "INFO",
}
var LeadAction_value = map[string]int32{
	"BUY":  0,
	"INFO": 1,
}

func (x LeadAction) String() string {
	return proto.EnumName(LeadAction_name, int32(x))
}
func (LeadAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LeadUserRole int32

const (
	LeadUserRole_UNKNOWN      LeadUserRole = 0
	LeadUserRole_CUSTOMER     LeadUserRole = 1
	LeadUserRole_SUPPLIER     LeadUserRole = 2
	LeadUserRole_SELLER       LeadUserRole = 3
	LeadUserRole_SUPER_SELLER LeadUserRole = 4
)

var LeadUserRole_name = map[int32]string{
	0: "UNKNOWN",
	1: "CUSTOMER",
	2: "SUPPLIER",
	3: "SELLER",
	4: "SUPER_SELLER",
}
var LeadUserRole_value = map[string]int32{
	"UNKNOWN":      0,
	"CUSTOMER":     1,
	"SUPPLIER":     2,
	"SELLER":       3,
	"SUPER_SELLER": 4,
}

func (x LeadUserRole) String() string {
	return proto.EnumName(LeadUserRole_name, int32(x))
}
func (LeadUserRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type LeadStatus int32

const (
	// this status means we created a lead in db, but did not perform any predefined actions
	LeadStatus_EMPTY       LeadStatus = 0
	LeadStatus_NEW         LeadStatus = 1
	LeadStatus_IN_PROGRESS LeadStatus = 2
	LeadStatus_SUBMITTED   LeadStatus = 3
	LeadStatus_ON_DELIVERY LeadStatus = 4
	LeadStatus_COMPLETED   LeadStatus = 5
	LeadStatus_CANCELLED   LeadStatus = 6
)

var LeadStatus_name = map[int32]string{
	0: "EMPTY",
	1: "NEW",
	2: "IN_PROGRESS",
	3: "SUBMITTED",
	4: "ON_DELIVERY",
	5: "COMPLETED",
	6: "CANCELLED",
}
var LeadStatus_value = map[string]int32{
	"EMPTY":       0,
	"NEW":         1,
	"IN_PROGRESS": 2,
	"SUBMITTED":   3,
	"ON_DELIVERY": 4,
	"COMPLETED":   5,
	"CANCELLED":   6,
}

func (x LeadStatus) String() string {
	return proto.EnumName(LeadStatus_name, int32(x))
}
func (LeadStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type LeadStatusEvent int32

const (
	LeadStatusEvent_CREATE   LeadStatusEvent = 0
	LeadStatusEvent_PROGRESS LeadStatusEvent = 1
	LeadStatusEvent_SUBMIT   LeadStatusEvent = 2
	LeadStatusEvent_DELIVERY LeadStatusEvent = 3
	LeadStatusEvent_COMPLETE LeadStatusEvent = 4
	LeadStatusEvent_CANCEL   LeadStatusEvent = 5
)

var LeadStatusEvent_name = map[int32]string{
	0: "CREATE",
	1: "PROGRESS",
	2: "SUBMIT",
	3: "DELIVERY",
	4: "COMPLETE",
	5: "CANCEL",
}
var LeadStatusEvent_value = map[string]int32{
	"CREATE":   0,
	"PROGRESS": 1,
	"SUBMIT":   2,
	"DELIVERY": 3,
	"COMPLETE": 4,
	"CANCEL":   5,
}

func (x LeadStatusEvent) String() string {
	return proto.EnumName(LeadStatusEvent_name, int32(x))
}
func (LeadStatusEvent) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ReadLeadRequest struct {
	// Types that are valid to be assigned to SearchBy:
	//	*ReadLeadRequest_Id
	//	*ReadLeadRequest_InstagramPk
	//	*ReadLeadRequest_ConversationId
	SearchBy isReadLeadRequest_SearchBy `protobuf_oneof:"search_by"`
}

func (m *ReadLeadRequest) Reset()                    { *m = ReadLeadRequest{} }
func (m *ReadLeadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadLeadRequest) ProtoMessage()               {}
func (*ReadLeadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isReadLeadRequest_SearchBy interface {
	isReadLeadRequest_SearchBy()
}

type ReadLeadRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,oneof"`
}
type ReadLeadRequest_InstagramPk struct {
	InstagramPk string `protobuf:"bytes,2,opt,name=instagram_pk,oneof"`
}
type ReadLeadRequest_ConversationId struct {
	ConversationId uint64 `protobuf:"varint,3,opt,name=conversation_id,oneof"`
}

func (*ReadLeadRequest_Id) isReadLeadRequest_SearchBy()             {}
func (*ReadLeadRequest_InstagramPk) isReadLeadRequest_SearchBy()    {}
func (*ReadLeadRequest_ConversationId) isReadLeadRequest_SearchBy() {}

func (m *ReadLeadRequest) GetSearchBy() isReadLeadRequest_SearchBy {
	if m != nil {
		return m.SearchBy
	}
	return nil
}

func (m *ReadLeadRequest) GetId() int64 {
	if x, ok := m.GetSearchBy().(*ReadLeadRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (m *ReadLeadRequest) GetInstagramPk() string {
	if x, ok := m.GetSearchBy().(*ReadLeadRequest_InstagramPk); ok {
		return x.InstagramPk
	}
	return ""
}

func (m *ReadLeadRequest) GetConversationId() uint64 {
	if x, ok := m.GetSearchBy().(*ReadLeadRequest_ConversationId); ok {
		return x.ConversationId
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReadLeadRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReadLeadRequest_OneofMarshaler, _ReadLeadRequest_OneofUnmarshaler, _ReadLeadRequest_OneofSizer, []interface{}{
		(*ReadLeadRequest_Id)(nil),
		(*ReadLeadRequest_InstagramPk)(nil),
		(*ReadLeadRequest_ConversationId)(nil),
	}
}

func _ReadLeadRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReadLeadRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *ReadLeadRequest_Id:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Id))
	case *ReadLeadRequest_InstagramPk:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.InstagramPk)
	case *ReadLeadRequest_ConversationId:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ConversationId))
	case nil:
	default:
		return fmt.Errorf("ReadLeadRequest.SearchBy has unexpected type %T", x)
	}
	return nil
}

func _ReadLeadRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReadLeadRequest)
	switch tag {
	case 1: // search_by.id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SearchBy = &ReadLeadRequest_Id{int64(x)}
		return true, err
	case 2: // search_by.instagram_pk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.SearchBy = &ReadLeadRequest_InstagramPk{x}
		return true, err
	case 3: // search_by.conversation_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SearchBy = &ReadLeadRequest_ConversationId{x}
		return true, err
	default:
		return false, nil
	}
}

func _ReadLeadRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReadLeadRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *ReadLeadRequest_Id:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Id))
	case *ReadLeadRequest_InstagramPk:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.InstagramPk)))
		n += len(x.InstagramPk)
	case *ReadLeadRequest_ConversationId:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ConversationId))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ReadLeadResult struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadLeadResult) Reset()                    { *m = ReadLeadResult{} }
func (m *ReadLeadResult) String() string            { return proto.CompactTextString(m) }
func (*ReadLeadResult) ProtoMessage()               {}
func (*ReadLeadResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// representation of lead model
type Lead struct {
	Id            int64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Source        string     `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Comment       string     `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	CustomerId    int64      `protobuf:"varint,4,opt,name=customer_id" json:"customer_id,omitempty"`
	InstagramPk   string     `protobuf:"bytes,5,opt,name=instagram_pk" json:"instagram_pk,omitempty"`
	InstagramLink string     `protobuf:"bytes,7,opt,name=instagram_link" json:"instagram_link,omitempty"`
	ProductId     int64      `protobuf:"varint,6,opt,name=product_id" json:"product_id,omitempty"`
	Action        LeadAction `protobuf:"varint,8,opt,name=action,enum=core.LeadAction" json:"action,omitempty"`
}

func (m *Lead) Reset()                    { *m = Lead{} }
func (m *Lead) String() string            { return proto.CompactTextString(m) }
func (*Lead) ProtoMessage()               {}
func (*Lead) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CreateLeadResult struct {
	Id   int64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Lead *LeadInfo `protobuf:"bytes,2,opt,name=lead" json:"lead,omitempty"`
}

func (m *CreateLeadResult) Reset()                    { *m = CreateLeadResult{} }
func (m *CreateLeadResult) String() string            { return proto.CompactTextString(m) }
func (*CreateLeadResult) ProtoMessage()               {}
func (*CreateLeadResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateLeadResult) GetLead() *LeadInfo {
	if m != nil {
		return m.Lead
	}
	return nil
}

type UserLeadsRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id" json:"user_id,omitempty"`
	// filter leads by user's role in the lead
	Role []LeadUserRole `protobuf:"varint,2,rep,packed,name=role,enum=core.LeadUserRole" json:"role,omitempty"`
	// todo: remove lead_id
	// also you can pass concrete lead_id
	LeadId uint64 `protobuf:"varint,3,opt,name=lead_id" json:"lead_id,omitempty"`
	Limit  uint64 `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	// if true - asc, false - desc
	Direction bool `protobuf:"varint,5,opt,name=direction" json:"direction,omitempty"`
	// shift to this time
	FromUpdatedAt int64 `protobuf:"varint,6,opt,name=from_updated_at" json:"from_updated_at,omitempty"`
}

func (m *UserLeadsRequest) Reset()                    { *m = UserLeadsRequest{} }
func (m *UserLeadsRequest) String() string            { return proto.CompactTextString(m) }
func (*UserLeadsRequest) ProtoMessage()               {}
func (*UserLeadsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type UserLeadsReply struct {
	Leads []*LeadInfo `protobuf:"bytes,1,rep,name=leads" json:"leads,omitempty"`
}

func (m *UserLeadsReply) Reset()                    { *m = UserLeadsReply{} }
func (m *UserLeadsReply) String() string            { return proto.CompactTextString(m) }
func (*UserLeadsReply) ProtoMessage()               {}
func (*UserLeadsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserLeadsReply) GetLeads() []*LeadInfo {
	if m != nil {
		return m.Leads
	}
	return nil
}

type LeadInfo struct {
	Id             uint64       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Source         string       `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Comment        string       `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	CustomerId     uint64       `protobuf:"varint,4,opt,name=customer_id" json:"customer_id,omitempty"`
	Products       []*Product   `protobuf:"bytes,5,rep,name=products" json:"products,omitempty"`
	InstagramPk    string       `protobuf:"bytes,7,opt,name=instagram_pk" json:"instagram_pk,omitempty"`
	InstagramLink  string       `protobuf:"bytes,14,opt,name=instagram_link" json:"instagram_link,omitempty"`
	Customer       *User        `protobuf:"bytes,8,opt,name=customer" json:"customer,omitempty"`
	Status         LeadStatus   `protobuf:"varint,9,opt,name=status,enum=core.LeadStatus" json:"status,omitempty"`
	UserRole       LeadUserRole `protobuf:"varint,10,opt,name=user_role,enum=core.LeadUserRole" json:"user_role,omitempty"`
	ConversationId uint64       `protobuf:"varint,11,opt,name=conversation_id" json:"conversation_id,omitempty"`
	Shop           *Shop        `protobuf:"bytes,12,opt,name=shop" json:"shop,omitempty"`
	UpdatedAt      int64        `protobuf:"varint,13,opt,name=updated_at" json:"updated_at,omitempty"`
}

func (m *LeadInfo) Reset()                    { *m = LeadInfo{} }
func (m *LeadInfo) String() string            { return proto.CompactTextString(m) }
func (*LeadInfo) ProtoMessage()               {}
func (*LeadInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LeadInfo) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

func (m *LeadInfo) GetCustomer() *User {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *LeadInfo) GetShop() *Shop {
	if m != nil {
		return m.Shop
	}
	return nil
}

type SetLeadStatusRequest struct {
	LeadId uint64          `protobuf:"varint,1,opt,name=lead_id" json:"lead_id,omitempty"`
	Event  LeadStatusEvent `protobuf:"varint,2,opt,name=event,enum=core.LeadStatusEvent" json:"event,omitempty"`
	UserId uint64          `protobuf:"varint,3,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *SetLeadStatusRequest) Reset()                    { *m = SetLeadStatusRequest{} }
func (m *SetLeadStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*SetLeadStatusRequest) ProtoMessage()               {}
func (*SetLeadStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type SetLeadStatusReply struct {
	Lead *LeadInfo `protobuf:"bytes,1,opt,name=lead" json:"lead,omitempty"`
}

func (m *SetLeadStatusReply) Reset()                    { *m = SetLeadStatusReply{} }
func (m *SetLeadStatusReply) String() string            { return proto.CompactTextString(m) }
func (*SetLeadStatusReply) ProtoMessage()               {}
func (*SetLeadStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SetLeadStatusReply) GetLead() *LeadInfo {
	if m != nil {
		return m.Lead
	}
	return nil
}

type CallSupplierRequest struct {
	LeadId uint64 `protobuf:"varint,1,opt,name=lead_id" json:"lead_id,omitempty"`
}

func (m *CallSupplierRequest) Reset()                    { *m = CallSupplierRequest{} }
func (m *CallSupplierRequest) String() string            { return proto.CompactTextString(m) }
func (*CallSupplierRequest) ProtoMessage()               {}
func (*CallSupplierRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type CallSupplierReply struct {
}

func (m *CallSupplierReply) Reset()                    { *m = CallSupplierReply{} }
func (m *CallSupplierReply) String() string            { return proto.CompactTextString(m) }
func (*CallSupplierReply) ProtoMessage()               {}
func (*CallSupplierReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type CallCustomerRequest struct {
	LeadId uint64 `protobuf:"varint,1,opt,name=lead_id" json:"lead_id,omitempty"`
}

func (m *CallCustomerRequest) Reset()                    { *m = CallCustomerRequest{} }
func (m *CallCustomerRequest) String() string            { return proto.CompactTextString(m) }
func (*CallCustomerRequest) ProtoMessage()               {}
func (*CallCustomerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type CallCustomerReply struct {
}

func (m *CallCustomerReply) Reset()                    { *m = CallCustomerReply{} }
func (m *CallCustomerReply) String() string            { return proto.CompactTextString(m) }
func (*CallCustomerReply) ProtoMessage()               {}
func (*CallCustomerReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type GetLeadRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id" json:"user_id,omitempty"`
	// Types that are valid to be assigned to SearchBy:
	//	*GetLeadRequest_Id
	//	*GetLeadRequest_ConversationId
	SearchBy isGetLeadRequest_SearchBy `protobuf_oneof:"search_by"`
}

func (m *GetLeadRequest) Reset()                    { *m = GetLeadRequest{} }
func (m *GetLeadRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLeadRequest) ProtoMessage()               {}
func (*GetLeadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type isGetLeadRequest_SearchBy interface {
	isGetLeadRequest_SearchBy()
}

type GetLeadRequest_Id struct {
	Id uint64 `protobuf:"varint,2,opt,name=id,oneof"`
}
type GetLeadRequest_ConversationId struct {
	ConversationId uint64 `protobuf:"varint,3,opt,name=conversation_id,oneof"`
}

func (*GetLeadRequest_Id) isGetLeadRequest_SearchBy()             {}
func (*GetLeadRequest_ConversationId) isGetLeadRequest_SearchBy() {}

func (m *GetLeadRequest) GetSearchBy() isGetLeadRequest_SearchBy {
	if m != nil {
		return m.SearchBy
	}
	return nil
}

func (m *GetLeadRequest) GetId() uint64 {
	if x, ok := m.GetSearchBy().(*GetLeadRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (m *GetLeadRequest) GetConversationId() uint64 {
	if x, ok := m.GetSearchBy().(*GetLeadRequest_ConversationId); ok {
		return x.ConversationId
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetLeadRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetLeadRequest_OneofMarshaler, _GetLeadRequest_OneofUnmarshaler, _GetLeadRequest_OneofSizer, []interface{}{
		(*GetLeadRequest_Id)(nil),
		(*GetLeadRequest_ConversationId)(nil),
	}
}

func _GetLeadRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetLeadRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *GetLeadRequest_Id:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Id))
	case *GetLeadRequest_ConversationId:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ConversationId))
	case nil:
	default:
		return fmt.Errorf("GetLeadRequest.SearchBy has unexpected type %T", x)
	}
	return nil
}

func _GetLeadRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetLeadRequest)
	switch tag {
	case 2: // search_by.id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SearchBy = &GetLeadRequest_Id{x}
		return true, err
	case 3: // search_by.conversation_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SearchBy = &GetLeadRequest_ConversationId{x}
		return true, err
	default:
		return false, nil
	}
}

func _GetLeadRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetLeadRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *GetLeadRequest_Id:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Id))
	case *GetLeadRequest_ConversationId:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ConversationId))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetLeadReply struct {
	Lead *LeadInfo `protobuf:"bytes,1,opt,name=lead" json:"lead,omitempty"`
}

func (m *GetLeadReply) Reset()                    { *m = GetLeadReply{} }
func (m *GetLeadReply) String() string            { return proto.CompactTextString(m) }
func (*GetLeadReply) ProtoMessage()               {}
func (*GetLeadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetLeadReply) GetLead() *LeadInfo {
	if m != nil {
		return m.Lead
	}
	return nil
}

type GetProductRequest struct {
	// Types that are valid to be assigned to SearchBy:
	//	*GetProductRequest_Id
	//	*GetProductRequest_Code
	//	*GetProductRequest_MediaId
	SearchBy    isGetProductRequest_SearchBy `protobuf_oneof:"search_by"`
	WithDeleted bool                         `protobuf:"varint,4,opt,name=with_deleted" json:"with_deleted,omitempty"`
	// optional user id, we want to know if user liked this product before
	UserId uint64 `protobuf:"varint,5,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *GetProductRequest) Reset()                    { *m = GetProductRequest{} }
func (m *GetProductRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProductRequest) ProtoMessage()               {}
func (*GetProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type isGetProductRequest_SearchBy interface {
	isGetProductRequest_SearchBy()
}

type GetProductRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,oneof"`
}
type GetProductRequest_Code struct {
	Code string `protobuf:"bytes,2,opt,name=code,oneof"`
}
type GetProductRequest_MediaId struct {
	MediaId string `protobuf:"bytes,3,opt,name=media_id,oneof"`
}

func (*GetProductRequest_Id) isGetProductRequest_SearchBy()      {}
func (*GetProductRequest_Code) isGetProductRequest_SearchBy()    {}
func (*GetProductRequest_MediaId) isGetProductRequest_SearchBy() {}

func (m *GetProductRequest) GetSearchBy() isGetProductRequest_SearchBy {
	if m != nil {
		return m.SearchBy
	}
	return nil
}

func (m *GetProductRequest) GetId() int64 {
	if x, ok := m.GetSearchBy().(*GetProductRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (m *GetProductRequest) GetCode() string {
	if x, ok := m.GetSearchBy().(*GetProductRequest_Code); ok {
		return x.Code
	}
	return ""
}

func (m *GetProductRequest) GetMediaId() string {
	if x, ok := m.GetSearchBy().(*GetProductRequest_MediaId); ok {
		return x.MediaId
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetProductRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetProductRequest_OneofMarshaler, _GetProductRequest_OneofUnmarshaler, _GetProductRequest_OneofSizer, []interface{}{
		(*GetProductRequest_Id)(nil),
		(*GetProductRequest_Code)(nil),
		(*GetProductRequest_MediaId)(nil),
	}
}

func _GetProductRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetProductRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *GetProductRequest_Id:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Id))
	case *GetProductRequest_Code:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Code)
	case *GetProductRequest_MediaId:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.MediaId)
	case nil:
	default:
		return fmt.Errorf("GetProductRequest.SearchBy has unexpected type %T", x)
	}
	return nil
}

func _GetProductRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetProductRequest)
	switch tag {
	case 1: // search_by.id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SearchBy = &GetProductRequest_Id{int64(x)}
		return true, err
	case 2: // search_by.code
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.SearchBy = &GetProductRequest_Code{x}
		return true, err
	case 3: // search_by.media_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.SearchBy = &GetProductRequest_MediaId{x}
		return true, err
	default:
		return false, nil
	}
}

func _GetProductRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetProductRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *GetProductRequest_Id:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Id))
	case *GetProductRequest_Code:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Code)))
		n += len(x.Code)
	case *GetProductRequest_MediaId:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.MediaId)))
		n += len(x.MediaId)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SearchProductRequest struct {
	Keyword string  `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	Tags    []int64 `protobuf:"varint,2,rep,packed,name=tags" json:"tags,omitempty"`
	Limit   int64   `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// Types that are valid to be assigned to OffsetBy:
	//	*SearchProductRequest_Offset
	//	*SearchProductRequest_FromId
	OffsetBy   isSearchProductRequest_OffsetBy `protobuf_oneof:"offset_by"`
	IsSaleOnly bool                            `protobuf:"varint,6,opt,name=is_sale_only" json:"is_sale_only,omitempty"`
	// false - desc, true - asc
	OffsetDirection bool `protobuf:"varint,7,opt,name=offset_direction" json:"offset_direction,omitempty"`
	// that was one-of once
	UserId uint64 `protobuf:"varint,8,opt,name=user_id" json:"user_id,omitempty"`
	ShopId uint64 `protobuf:"varint,9,opt,name=shop_id" json:"shop_id,omitempty"`
	// user or shop instagram_name
	InstagramName string `protobuf:"bytes,10,opt,name=instagram_name" json:"instagram_name,omitempty"`
}

func (m *SearchProductRequest) Reset()                    { *m = SearchProductRequest{} }
func (m *SearchProductRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchProductRequest) ProtoMessage()               {}
func (*SearchProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type isSearchProductRequest_OffsetBy interface {
	isSearchProductRequest_OffsetBy()
}

type SearchProductRequest_Offset struct {
	Offset int64 `protobuf:"varint,4,opt,name=offset,oneof"`
}
type SearchProductRequest_FromId struct {
	FromId uint64 `protobuf:"varint,5,opt,name=from_id,oneof"`
}

func (*SearchProductRequest_Offset) isSearchProductRequest_OffsetBy() {}
func (*SearchProductRequest_FromId) isSearchProductRequest_OffsetBy() {}

func (m *SearchProductRequest) GetOffsetBy() isSearchProductRequest_OffsetBy {
	if m != nil {
		return m.OffsetBy
	}
	return nil
}

func (m *SearchProductRequest) GetOffset() int64 {
	if x, ok := m.GetOffsetBy().(*SearchProductRequest_Offset); ok {
		return x.Offset
	}
	return 0
}

func (m *SearchProductRequest) GetFromId() uint64 {
	if x, ok := m.GetOffsetBy().(*SearchProductRequest_FromId); ok {
		return x.FromId
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SearchProductRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SearchProductRequest_OneofMarshaler, _SearchProductRequest_OneofUnmarshaler, _SearchProductRequest_OneofSizer, []interface{}{
		(*SearchProductRequest_Offset)(nil),
		(*SearchProductRequest_FromId)(nil),
	}
}

func _SearchProductRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SearchProductRequest)
	// offset_by
	switch x := m.OffsetBy.(type) {
	case *SearchProductRequest_Offset:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Offset))
	case *SearchProductRequest_FromId:
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.FromId))
	case nil:
	default:
		return fmt.Errorf("SearchProductRequest.OffsetBy has unexpected type %T", x)
	}
	return nil
}

func _SearchProductRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SearchProductRequest)
	switch tag {
	case 4: // offset_by.offset
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.OffsetBy = &SearchProductRequest_Offset{int64(x)}
		return true, err
	case 5: // offset_by.from_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.OffsetBy = &SearchProductRequest_FromId{x}
		return true, err
	default:
		return false, nil
	}
}

func _SearchProductRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SearchProductRequest)
	// offset_by
	switch x := m.OffsetBy.(type) {
	case *SearchProductRequest_Offset:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Offset))
	case *SearchProductRequest_FromId:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.FromId))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ProductSearchResult struct {
	Result []*Product `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *ProductSearchResult) Reset()                    { *m = ProductSearchResult{} }
func (m *ProductSearchResult) String() string            { return proto.CompactTextString(m) }
func (*ProductSearchResult) ProtoMessage()               {}
func (*ProductSearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ProductSearchResult) GetResult() []*Product {
	if m != nil {
		return m.Result
	}
	return nil
}

type ProductReadResult struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ProductReadResult) Reset()                    { *m = ProductReadResult{} }
func (m *ProductReadResult) String() string            { return proto.CompactTextString(m) }
func (*ProductReadResult) ProtoMessage()               {}
func (*ProductReadResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type CreateProductRequest struct {
	Product     *Product `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	MentionedBy uint64   `protobuf:"varint,2,opt,name=mentioned_by" json:"mentioned_by,omitempty"`
}

func (m *CreateProductRequest) Reset()                    { *m = CreateProductRequest{} }
func (m *CreateProductRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateProductRequest) ProtoMessage()               {}
func (*CreateProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CreateProductRequest) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

type CreateProductResult struct {
	Id     int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Exists bool   `protobuf:"varint,2,opt,name=exists" json:"exists,omitempty"`
	Code   string `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
}

func (m *CreateProductResult) Reset()                    { *m = CreateProductResult{} }
func (m *CreateProductResult) String() string            { return proto.CompactTextString(m) }
func (*CreateProductResult) ProtoMessage()               {}
func (*CreateProductResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

// representation of product model
type Product struct {
	Id                    int64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title                 string            `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Code                  string            `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
	InstagramImageCaption string            `protobuf:"bytes,4,opt,name=instagram_image_caption" json:"instagram_image_caption,omitempty"`
	InstagramImageId      string            `protobuf:"bytes,5,opt,name=instagram_image_id" json:"instagram_image_id,omitempty"`
	InstagramImageUrl     string            `protobuf:"bytes,6,opt,name=instagram_image_url" json:"instagram_image_url,omitempty"`
	InstagramLink         string            `protobuf:"bytes,7,opt,name=instagram_link" json:"instagram_link,omitempty"`
	InstagramImageWidth   uint32            `protobuf:"varint,16,opt,name=instagram_image_width" json:"instagram_image_width,omitempty"`
	InstagramImageHeight  uint32            `protobuf:"varint,17,opt,name=instagram_image_height" json:"instagram_image_height,omitempty"`
	InstagramPublishedAt  int64             `protobuf:"varint,8,opt,name=instagram_published_at" json:"instagram_published_at,omitempty"`
	InstagramLikesCount   int32             `protobuf:"varint,9,opt,name=instagram_likes_count" json:"instagram_likes_count,omitempty"`
	SupplierId            int64             `protobuf:"varint,10,opt,name=supplier_id" json:"supplier_id,omitempty"`
	Supplier              *Shop             `protobuf:"bytes,11,opt,name=supplier" json:"supplier,omitempty"`
	MentionedId           int64             `protobuf:"varint,12,opt,name=mentioned_id" json:"mentioned_id,omitempty"`
	Mentioned             *User             `protobuf:"bytes,13,opt,name=mentioned" json:"mentioned,omitempty"`
	IsSale                bool              `protobuf:"varint,14,opt,name=isSale" json:"isSale,omitempty"`
	Items                 []*ProductItem    `protobuf:"bytes,15,rep,name=items" json:"items,omitempty"`
	InstagramImages       []*ImageCandidate `protobuf:"bytes,18,rep,name=instagram_images" json:"instagram_images,omitempty"`
	LikedBy               []*User           `protobuf:"bytes,19,rep,name=liked_by" json:"liked_by,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Product) GetSupplier() *Shop {
	if m != nil {
		return m.Supplier
	}
	return nil
}

func (m *Product) GetMentioned() *User {
	if m != nil {
		return m.Mentioned
	}
	return nil
}

func (m *Product) GetItems() []*ProductItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Product) GetInstagramImages() []*ImageCandidate {
	if m != nil {
		return m.InstagramImages
	}
	return nil
}

func (m *Product) GetLikedBy() []*User {
	if m != nil {
		return m.LikedBy
	}
	return nil
}

type ProductItem struct {
	Id            int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Price         uint64 `protobuf:"varint,10,opt,name=price" json:"price,omitempty"`
	DiscountPrice uint64 `protobuf:"varint,11,opt,name=discount_price" json:"discount_price,omitempty"`
	Tags          []*Tag `protobuf:"bytes,13,rep,name=tags" json:"tags,omitempty"`
}

func (m *ProductItem) Reset()                    { *m = ProductItem{} }
func (m *ProductItem) String() string            { return proto.CompactTextString(m) }
func (*ProductItem) ProtoMessage()               {}
func (*ProductItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ProductItem) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ImageCandidate struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *ImageCandidate) Reset()                    { *m = ImageCandidate{} }
func (m *ImageCandidate) String() string            { return proto.CompactTextString(m) }
func (*ImageCandidate) ProtoMessage()               {}
func (*ImageCandidate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type LikeProductRequest struct {
	UserId    uint64 `protobuf:"varint,1,opt,name=user_id" json:"user_id,omitempty"`
	ProductId uint64 `protobuf:"varint,2,opt,name=product_id" json:"product_id,omitempty"`
	// set false to remove like
	Like bool `protobuf:"varint,3,opt,name=like" json:"like,omitempty"`
}

func (m *LikeProductRequest) Reset()                    { *m = LikeProductRequest{} }
func (m *LikeProductRequest) String() string            { return proto.CompactTextString(m) }
func (*LikeProductRequest) ProtoMessage()               {}
func (*LikeProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type LikeProductReply struct {
}

func (m *LikeProductReply) Reset()                    { *m = LikeProductReply{} }
func (m *LikeProductReply) String() string            { return proto.CompactTextString(m) }
func (*LikeProductReply) ProtoMessage()               {}
func (*LikeProductReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type GetSpecialProductsRequest struct {
}

func (m *GetSpecialProductsRequest) Reset()                    { *m = GetSpecialProductsRequest{} }
func (m *GetSpecialProductsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSpecialProductsRequest) ProtoMessage()               {}
func (*GetSpecialProductsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type SpecialProductInfo struct {
	Id    uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *SpecialProductInfo) Reset()                    { *m = SpecialProductInfo{} }
func (m *SpecialProductInfo) String() string            { return proto.CompactTextString(m) }
func (*SpecialProductInfo) ProtoMessage()               {}
func (*SpecialProductInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type GetSpecialProductsReply struct {
	List []*SpecialProductInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Err  string                `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *GetSpecialProductsReply) Reset()                    { *m = GetSpecialProductsReply{} }
func (m *GetSpecialProductsReply) String() string            { return proto.CompactTextString(m) }
func (*GetSpecialProductsReply) ProtoMessage()               {}
func (*GetSpecialProductsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *GetSpecialProductsReply) GetList() []*SpecialProductInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type ShopCard struct {
	Id     uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ShopId uint64 `protobuf:"varint,2,opt,name=shop_id" json:"shop_id,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Number string `protobuf:"bytes,4,opt,name=number" json:"number,omitempty"`
	UserId uint64 `protobuf:"varint,5,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *ShopCard) Reset()                    { *m = ShopCard{} }
func (m *ShopCard) String() string            { return proto.CompactTextString(m) }
func (*ShopCard) ProtoMessage()               {}
func (*ShopCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type CreateCardRequest struct {
	Card *ShopCard `protobuf:"bytes,2,opt,name=card" json:"card,omitempty"`
}

func (m *CreateCardRequest) Reset()                    { *m = CreateCardRequest{} }
func (m *CreateCardRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCardRequest) ProtoMessage()               {}
func (*CreateCardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CreateCardRequest) GetCard() *ShopCard {
	if m != nil {
		return m.Card
	}
	return nil
}

type CreateCardReply struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateCardReply) Reset()                    { *m = CreateCardReply{} }
func (m *CreateCardReply) String() string            { return proto.CompactTextString(m) }
func (*CreateCardReply) ProtoMessage()               {}
func (*CreateCardReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

type DeleteCardRequest struct {
	Id     uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId uint64 `protobuf:"varint,2,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *DeleteCardRequest) Reset()                    { *m = DeleteCardRequest{} }
func (m *DeleteCardRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCardRequest) ProtoMessage()               {}
func (*DeleteCardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

type DeleteCardReply struct {
}

func (m *DeleteCardReply) Reset()                    { *m = DeleteCardReply{} }
func (m *DeleteCardReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteCardReply) ProtoMessage()               {}
func (*DeleteCardReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

type GetCardsRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id" json:"user_id,omitempty"`
	ShopId uint64 `protobuf:"varint,2,opt,name=shop_id" json:"shop_id,omitempty"`
}

func (m *GetCardsRequest) Reset()                    { *m = GetCardsRequest{} }
func (m *GetCardsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCardsRequest) ProtoMessage()               {}
func (*GetCardsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type GetCardsReply struct {
	Cards []*ShopCard `protobuf:"bytes,1,rep,name=cards" json:"cards,omitempty"`
}

func (m *GetCardsReply) Reset()                    { *m = GetCardsReply{} }
func (m *GetCardsReply) String() string            { return proto.CompactTextString(m) }
func (*GetCardsReply) ProtoMessage()               {}
func (*GetCardsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *GetCardsReply) GetCards() []*ShopCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

type ReadShopRequest struct {
	// Types that are valid to be assigned to SearchBy:
	//	*ReadShopRequest_InstagramId
	SearchBy    isReadShopRequest_SearchBy `protobuf_oneof:"search_by"`
	WithDeleted bool                       `protobuf:"varint,2,opt,name=with_deleted" json:"with_deleted,omitempty"`
}

func (m *ReadShopRequest) Reset()                    { *m = ReadShopRequest{} }
func (m *ReadShopRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadShopRequest) ProtoMessage()               {}
func (*ReadShopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

type isReadShopRequest_SearchBy interface {
	isReadShopRequest_SearchBy()
}

type ReadShopRequest_InstagramId struct {
	InstagramId uint64 `protobuf:"varint,1,opt,name=instagram_id,oneof"`
}

func (*ReadShopRequest_InstagramId) isReadShopRequest_SearchBy() {}

func (m *ReadShopRequest) GetSearchBy() isReadShopRequest_SearchBy {
	if m != nil {
		return m.SearchBy
	}
	return nil
}

func (m *ReadShopRequest) GetInstagramId() uint64 {
	if x, ok := m.GetSearchBy().(*ReadShopRequest_InstagramId); ok {
		return x.InstagramId
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReadShopRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReadShopRequest_OneofMarshaler, _ReadShopRequest_OneofUnmarshaler, _ReadShopRequest_OneofSizer, []interface{}{
		(*ReadShopRequest_InstagramId)(nil),
	}
}

func _ReadShopRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReadShopRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *ReadShopRequest_InstagramId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.InstagramId))
	case nil:
	default:
		return fmt.Errorf("ReadShopRequest.SearchBy has unexpected type %T", x)
	}
	return nil
}

func _ReadShopRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReadShopRequest)
	switch tag {
	case 1: // search_by.instagram_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SearchBy = &ReadShopRequest_InstagramId{x}
		return true, err
	default:
		return false, nil
	}
}

func _ReadShopRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReadShopRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *ReadShopRequest_InstagramId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.InstagramId))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreateShopRequest struct {
	Shop *Shop `protobuf:"bytes,1,opt,name=shop" json:"shop,omitempty"`
}

func (m *CreateShopRequest) Reset()                    { *m = CreateShopRequest{} }
func (m *CreateShopRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateShopRequest) ProtoMessage()               {}
func (*CreateShopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *CreateShopRequest) GetShop() *Shop {
	if m != nil {
		return m.Shop
	}
	return nil
}

type ReadShopReply struct {
	Id        int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	IsDeleted bool  `protobuf:"varint,2,opt,name=is_deleted" json:"is_deleted,omitempty"`
}

func (m *ReadShopReply) Reset()                    { *m = ReadShopReply{} }
func (m *ReadShopReply) String() string            { return proto.CompactTextString(m) }
func (*ReadShopReply) ProtoMessage()               {}
func (*ReadShopReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

type CreateShopReply struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateShopReply) Reset()                    { *m = CreateShopReply{} }
func (m *CreateShopReply) String() string            { return proto.CompactTextString(m) }
func (*CreateShopReply) ProtoMessage()               {}
func (*CreateShopReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

// representation of shop model
type Shop struct {
	Id                 int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SupplierId         int64   `protobuf:"varint,2,opt,name=supplier_id" json:"supplier_id,omitempty"`
	Supplier           *User   `protobuf:"bytes,3,opt,name=supplier" json:"supplier,omitempty"`
	InstagramId        uint64  `protobuf:"varint,4,opt,name=instagram_id" json:"instagram_id,omitempty"`
	InstagramUsername  string  `protobuf:"bytes,5,opt,name=instagram_username" json:"instagram_username,omitempty"`
	InstagramFullname  string  `protobuf:"bytes,6,opt,name=instagram_fullname" json:"instagram_fullname,omitempty"`
	InstagramAvatarUrl string  `protobuf:"bytes,7,opt,name=instagram_avatar_url" json:"instagram_avatar_url,omitempty"`
	InstagramCaption   string  `protobuf:"bytes,8,opt,name=instagram_caption" json:"instagram_caption,omitempty"`
	InstagramWebsite   string  `protobuf:"bytes,9,opt,name=instagram_website" json:"instagram_website,omitempty"`
	PaymentRules       string  `protobuf:"bytes,10,opt,name=payment_rules" json:"payment_rules,omitempty"`
	ShippingRules      string  `protobuf:"bytes,11,opt,name=shipping_rules" json:"shipping_rules,omitempty"`
	Caption            string  `protobuf:"bytes,12,opt,name=caption" json:"caption,omitempty"`
	Sellers            []*User `protobuf:"bytes,13,rep,name=sellers" json:"sellers,omitempty"`
	AvatarUrl          string  `protobuf:"bytes,14,opt,name=avatar_url" json:"avatar_url,omitempty"`
	Slogan             string  `protobuf:"bytes,15,opt,name=slogan" json:"slogan,omitempty"`
	Available          bool    `protobuf:"varint,16,opt,name=available" json:"available,omitempty"`
}

func (m *Shop) Reset()                    { *m = Shop{} }
func (m *Shop) String() string            { return proto.CompactTextString(m) }
func (*Shop) ProtoMessage()               {}
func (*Shop) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *Shop) GetSupplier() *User {
	if m != nil {
		return m.Supplier
	}
	return nil
}

func (m *Shop) GetSellers() []*User {
	if m != nil {
		return m.Sellers
	}
	return nil
}

type ShopProfileRequest struct {
	// Types that are valid to be assigned to SearchBy:
	//	*ShopProfileRequest_InstagramName
	//	*ShopProfileRequest_Id
	SearchBy isShopProfileRequest_SearchBy `protobuf_oneof:"search_by"`
}

func (m *ShopProfileRequest) Reset()                    { *m = ShopProfileRequest{} }
func (m *ShopProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*ShopProfileRequest) ProtoMessage()               {}
func (*ShopProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

type isShopProfileRequest_SearchBy interface {
	isShopProfileRequest_SearchBy()
}

type ShopProfileRequest_InstagramName struct {
	InstagramName string `protobuf:"bytes,1,opt,name=instagram_name,oneof"`
}
type ShopProfileRequest_Id struct {
	Id uint64 `protobuf:"varint,2,opt,name=id,oneof"`
}

func (*ShopProfileRequest_InstagramName) isShopProfileRequest_SearchBy() {}
func (*ShopProfileRequest_Id) isShopProfileRequest_SearchBy()            {}

func (m *ShopProfileRequest) GetSearchBy() isShopProfileRequest_SearchBy {
	if m != nil {
		return m.SearchBy
	}
	return nil
}

func (m *ShopProfileRequest) GetInstagramName() string {
	if x, ok := m.GetSearchBy().(*ShopProfileRequest_InstagramName); ok {
		return x.InstagramName
	}
	return ""
}

func (m *ShopProfileRequest) GetId() uint64 {
	if x, ok := m.GetSearchBy().(*ShopProfileRequest_Id); ok {
		return x.Id
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ShopProfileRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ShopProfileRequest_OneofMarshaler, _ShopProfileRequest_OneofUnmarshaler, _ShopProfileRequest_OneofSizer, []interface{}{
		(*ShopProfileRequest_InstagramName)(nil),
		(*ShopProfileRequest_Id)(nil),
	}
}

func _ShopProfileRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ShopProfileRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *ShopProfileRequest_InstagramName:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.InstagramName)
	case *ShopProfileRequest_Id:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Id))
	case nil:
	default:
		return fmt.Errorf("ShopProfileRequest.SearchBy has unexpected type %T", x)
	}
	return nil
}

func _ShopProfileRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ShopProfileRequest)
	switch tag {
	case 1: // search_by.instagram_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.SearchBy = &ShopProfileRequest_InstagramName{x}
		return true, err
	case 2: // search_by.id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SearchBy = &ShopProfileRequest_Id{x}
		return true, err
	default:
		return false, nil
	}
}

func _ShopProfileRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ShopProfileRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *ShopProfileRequest_InstagramName:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.InstagramName)))
		n += len(x.InstagramName)
	case *ShopProfileRequest_Id:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Id))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ShopProfileReply struct {
	Shop *Shop `protobuf:"bytes,1,opt,name=shop" json:"shop,omitempty"`
}

func (m *ShopProfileReply) Reset()                    { *m = ShopProfileReply{} }
func (m *ShopProfileReply) String() string            { return proto.CompactTextString(m) }
func (*ShopProfileReply) ProtoMessage()               {}
func (*ShopProfileReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *ShopProfileReply) GetShop() *Shop {
	if m != nil {
		return m.Shop
	}
	return nil
}

type GetMainTagsRequest struct {
	Limit int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
}

func (m *GetMainTagsRequest) Reset()                    { *m = GetMainTagsRequest{} }
func (m *GetMainTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMainTagsRequest) ProtoMessage()               {}
func (*GetMainTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

type GetRelatedTagsRequest struct {
	// tag list
	Tags  []int64 `protobuf:"varint,1,rep,packed,name=tags" json:"tags,omitempty"`
	Limit int64   `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *GetRelatedTagsRequest) Reset()                    { *m = GetRelatedTagsRequest{} }
func (m *GetRelatedTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRelatedTagsRequest) ProtoMessage()               {}
func (*GetRelatedTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

// tag object list
type TagSearchResult struct {
	Result []*Tag `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *TagSearchResult) Reset()                    { *m = TagSearchResult{} }
func (m *TagSearchResult) String() string            { return proto.CompactTextString(m) }
func (*TagSearchResult) ProtoMessage()               {}
func (*TagSearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *TagSearchResult) GetResult() []*Tag {
	if m != nil {
		return m.Result
	}
	return nil
}

// tag model representation
type Tag struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

type CreateUserRequest struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *CreateUserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

// where instagram_id = ? OR phone = ? OR instagram_username = ?
type ReadUserRequest struct {
	InstagramId       uint64 `protobuf:"varint,1,opt,name=instagram_id" json:"instagram_id,omitempty"`
	Phone             string `protobuf:"bytes,2,opt,name=phone" json:"phone,omitempty"`
	InstagramUsername string `protobuf:"bytes,3,opt,name=instagram_username" json:"instagram_username,omitempty"`
	// direct by user.id
	Id uint64 `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
}

func (m *ReadUserRequest) Reset()                    { *m = ReadUserRequest{} }
func (m *ReadUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadUserRequest) ProtoMessage()               {}
func (*ReadUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

type SearchUserReply struct {
	Result []*User `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *SearchUserReply) Reset()                    { *m = SearchUserReply{} }
func (m *SearchUserReply) String() string            { return proto.CompactTextString(m) }
func (*SearchUserReply) ProtoMessage()               {}
func (*SearchUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *SearchUserReply) GetResult() []*User {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadUserReply struct {
	// todo: remove id
	Id   int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	User *User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *ReadUserReply) Reset()                    { *m = ReadUserReply{} }
func (m *ReadUserReply) String() string            { return proto.CompactTextString(m) }
func (*ReadUserReply) ProtoMessage()               {}
func (*ReadUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *ReadUserReply) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

// representation of user model
type User struct {
	Id                 int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email              string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Phone              string `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	Website            string `protobuf:"bytes,5,opt,name=website" json:"website,omitempty"`
	Caption            string `protobuf:"bytes,13,opt,name=caption" json:"caption,omitempty"`
	AvatarUrl          string `protobuf:"bytes,17,opt,name=avatar_url" json:"avatar_url,omitempty"`
	Slogan             string `protobuf:"bytes,18,opt,name=slogan" json:"slogan,omitempty"`
	InstagramId        uint64 `protobuf:"varint,6,opt,name=instagram_id" json:"instagram_id,omitempty"`
	InstagramUsername  string `protobuf:"bytes,7,opt,name=instagram_username" json:"instagram_username,omitempty"`
	InstagramFullname  string `protobuf:"bytes,8,opt,name=instagram_fullname" json:"instagram_fullname,omitempty"`
	InstagramAvatarUrl string `protobuf:"bytes,9,opt,name=instagram_avatar_url" json:"instagram_avatar_url,omitempty"`
	InstagramCaption   string `protobuf:"bytes,10,opt,name=instagram_caption" json:"instagram_caption,omitempty"`
	OptOut             bool   `protobuf:"varint,11,opt,name=opt_out" json:"opt_out,omitempty"`
	SuperSeller        bool   `protobuf:"varint,12,opt,name=super_seller" json:"super_seller,omitempty"`
	HasEmail           bool   `protobuf:"varint,14,opt,name=has_email" json:"has_email,omitempty"`
	HasPhone           bool   `protobuf:"varint,15,opt,name=has_phone" json:"has_phone,omitempty"`
	Seller             bool   `protobuf:"varint,16,opt,name=seller" json:"seller,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

type UserProfileRequest struct {
	// Types that are valid to be assigned to SearchBy:
	//	*UserProfileRequest_InstagramName
	//	*UserProfileRequest_Id
	SearchBy isUserProfileRequest_SearchBy `protobuf_oneof:"search_by"`
}

func (m *UserProfileRequest) Reset()                    { *m = UserProfileRequest{} }
func (m *UserProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UserProfileRequest) ProtoMessage()               {}
func (*UserProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

type isUserProfileRequest_SearchBy interface {
	isUserProfileRequest_SearchBy()
}

type UserProfileRequest_InstagramName struct {
	InstagramName string `protobuf:"bytes,1,opt,name=instagram_name,oneof"`
}
type UserProfileRequest_Id struct {
	Id uint64 `protobuf:"varint,2,opt,name=id,oneof"`
}

func (*UserProfileRequest_InstagramName) isUserProfileRequest_SearchBy() {}
func (*UserProfileRequest_Id) isUserProfileRequest_SearchBy()            {}

func (m *UserProfileRequest) GetSearchBy() isUserProfileRequest_SearchBy {
	if m != nil {
		return m.SearchBy
	}
	return nil
}

func (m *UserProfileRequest) GetInstagramName() string {
	if x, ok := m.GetSearchBy().(*UserProfileRequest_InstagramName); ok {
		return x.InstagramName
	}
	return ""
}

func (m *UserProfileRequest) GetId() uint64 {
	if x, ok := m.GetSearchBy().(*UserProfileRequest_Id); ok {
		return x.Id
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UserProfileRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UserProfileRequest_OneofMarshaler, _UserProfileRequest_OneofUnmarshaler, _UserProfileRequest_OneofSizer, []interface{}{
		(*UserProfileRequest_InstagramName)(nil),
		(*UserProfileRequest_Id)(nil),
	}
}

func _UserProfileRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UserProfileRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *UserProfileRequest_InstagramName:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.InstagramName)
	case *UserProfileRequest_Id:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Id))
	case nil:
	default:
		return fmt.Errorf("UserProfileRequest.SearchBy has unexpected type %T", x)
	}
	return nil
}

func _UserProfileRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UserProfileRequest)
	switch tag {
	case 1: // search_by.instagram_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.SearchBy = &UserProfileRequest_InstagramName{x}
		return true, err
	case 2: // search_by.id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SearchBy = &UserProfileRequest_Id{x}
		return true, err
	default:
		return false, nil
	}
}

func _UserProfileRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UserProfileRequest)
	// search_by
	switch x := m.SearchBy.(type) {
	case *UserProfileRequest_InstagramName:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.InstagramName)))
		n += len(x.InstagramName)
	case *UserProfileRequest_Id:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Id))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UserProfileReply struct {
	// Types that are valid to be assigned to Profile:
	//	*UserProfileReply_User
	//	*UserProfileReply_Shop
	Profile isUserProfileReply_Profile `protobuf_oneof:"profile"`
}

func (m *UserProfileReply) Reset()                    { *m = UserProfileReply{} }
func (m *UserProfileReply) String() string            { return proto.CompactTextString(m) }
func (*UserProfileReply) ProtoMessage()               {}
func (*UserProfileReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

type isUserProfileReply_Profile interface {
	isUserProfileReply_Profile()
}

type UserProfileReply_User struct {
	User *User `protobuf:"bytes,1,opt,name=user,oneof"`
}
type UserProfileReply_Shop struct {
	Shop *Shop `protobuf:"bytes,2,opt,name=shop,oneof"`
}

func (*UserProfileReply_User) isUserProfileReply_Profile() {}
func (*UserProfileReply_Shop) isUserProfileReply_Profile() {}

func (m *UserProfileReply) GetProfile() isUserProfileReply_Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *UserProfileReply) GetUser() *User {
	if x, ok := m.GetProfile().(*UserProfileReply_User); ok {
		return x.User
	}
	return nil
}

func (m *UserProfileReply) GetShop() *Shop {
	if x, ok := m.GetProfile().(*UserProfileReply_Shop); ok {
		return x.Shop
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UserProfileReply) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UserProfileReply_OneofMarshaler, _UserProfileReply_OneofUnmarshaler, _UserProfileReply_OneofSizer, []interface{}{
		(*UserProfileReply_User)(nil),
		(*UserProfileReply_Shop)(nil),
	}
}

func _UserProfileReply_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UserProfileReply)
	// profile
	switch x := m.Profile.(type) {
	case *UserProfileReply_User:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.User); err != nil {
			return err
		}
	case *UserProfileReply_Shop:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Shop); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UserProfileReply.Profile has unexpected type %T", x)
	}
	return nil
}

func _UserProfileReply_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UserProfileReply)
	switch tag {
	case 1: // profile.user
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(User)
		err := b.DecodeMessage(msg)
		m.Profile = &UserProfileReply_User{msg}
		return true, err
	case 2: // profile.shop
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Shop)
		err := b.DecodeMessage(msg)
		m.Profile = &UserProfileReply_Shop{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UserProfileReply_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UserProfileReply)
	// profile
	switch x := m.Profile.(type) {
	case *UserProfileReply_User:
		s := proto.Size(x.User)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UserProfileReply_Shop:
		s := proto.Size(x.Shop)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ReadLeadRequest)(nil), "core.ReadLeadRequest")
	proto.RegisterType((*ReadLeadResult)(nil), "core.ReadLeadResult")
	proto.RegisterType((*Lead)(nil), "core.Lead")
	proto.RegisterType((*CreateLeadResult)(nil), "core.CreateLeadResult")
	proto.RegisterType((*UserLeadsRequest)(nil), "core.UserLeadsRequest")
	proto.RegisterType((*UserLeadsReply)(nil), "core.UserLeadsReply")
	proto.RegisterType((*LeadInfo)(nil), "core.LeadInfo")
	proto.RegisterType((*SetLeadStatusRequest)(nil), "core.SetLeadStatusRequest")
	proto.RegisterType((*SetLeadStatusReply)(nil), "core.SetLeadStatusReply")
	proto.RegisterType((*CallSupplierRequest)(nil), "core.CallSupplierRequest")
	proto.RegisterType((*CallSupplierReply)(nil), "core.CallSupplierReply")
	proto.RegisterType((*CallCustomerRequest)(nil), "core.CallCustomerRequest")
	proto.RegisterType((*CallCustomerReply)(nil), "core.CallCustomerReply")
	proto.RegisterType((*GetLeadRequest)(nil), "core.GetLeadRequest")
	proto.RegisterType((*GetLeadReply)(nil), "core.GetLeadReply")
	proto.RegisterType((*GetProductRequest)(nil), "core.GetProductRequest")
	proto.RegisterType((*SearchProductRequest)(nil), "core.SearchProductRequest")
	proto.RegisterType((*ProductSearchResult)(nil), "core.ProductSearchResult")
	proto.RegisterType((*ProductReadResult)(nil), "core.ProductReadResult")
	proto.RegisterType((*CreateProductRequest)(nil), "core.CreateProductRequest")
	proto.RegisterType((*CreateProductResult)(nil), "core.CreateProductResult")
	proto.RegisterType((*Product)(nil), "core.Product")
	proto.RegisterType((*ProductItem)(nil), "core.ProductItem")
	proto.RegisterType((*ImageCandidate)(nil), "core.ImageCandidate")
	proto.RegisterType((*LikeProductRequest)(nil), "core.LikeProductRequest")
	proto.RegisterType((*LikeProductReply)(nil), "core.LikeProductReply")
	proto.RegisterType((*GetSpecialProductsRequest)(nil), "core.GetSpecialProductsRequest")
	proto.RegisterType((*SpecialProductInfo)(nil), "core.SpecialProductInfo")
	proto.RegisterType((*GetSpecialProductsReply)(nil), "core.GetSpecialProductsReply")
	proto.RegisterType((*ShopCard)(nil), "core.ShopCard")
	proto.RegisterType((*CreateCardRequest)(nil), "core.CreateCardRequest")
	proto.RegisterType((*CreateCardReply)(nil), "core.CreateCardReply")
	proto.RegisterType((*DeleteCardRequest)(nil), "core.DeleteCardRequest")
	proto.RegisterType((*DeleteCardReply)(nil), "core.DeleteCardReply")
	proto.RegisterType((*GetCardsRequest)(nil), "core.GetCardsRequest")
	proto.RegisterType((*GetCardsReply)(nil), "core.GetCardsReply")
	proto.RegisterType((*ReadShopRequest)(nil), "core.ReadShopRequest")
	proto.RegisterType((*CreateShopRequest)(nil), "core.CreateShopRequest")
	proto.RegisterType((*ReadShopReply)(nil), "core.ReadShopReply")
	proto.RegisterType((*CreateShopReply)(nil), "core.CreateShopReply")
	proto.RegisterType((*Shop)(nil), "core.Shop")
	proto.RegisterType((*ShopProfileRequest)(nil), "core.ShopProfileRequest")
	proto.RegisterType((*ShopProfileReply)(nil), "core.ShopProfileReply")
	proto.RegisterType((*GetMainTagsRequest)(nil), "core.GetMainTagsRequest")
	proto.RegisterType((*GetRelatedTagsRequest)(nil), "core.GetRelatedTagsRequest")
	proto.RegisterType((*TagSearchResult)(nil), "core.TagSearchResult")
	proto.RegisterType((*Tag)(nil), "core.Tag")
	proto.RegisterType((*CreateUserRequest)(nil), "core.CreateUserRequest")
	proto.RegisterType((*ReadUserRequest)(nil), "core.ReadUserRequest")
	proto.RegisterType((*SearchUserReply)(nil), "core.SearchUserReply")
	proto.RegisterType((*ReadUserReply)(nil), "core.ReadUserReply")
	proto.RegisterType((*User)(nil), "core.User")
	proto.RegisterType((*UserProfileRequest)(nil), "core.UserProfileRequest")
	proto.RegisterType((*UserProfileReply)(nil), "core.UserProfileReply")
	proto.RegisterEnum("core.LeadAction", LeadAction_name, LeadAction_value)
	proto.RegisterEnum("core.LeadUserRole", LeadUserRole_name, LeadUserRole_value)
	proto.RegisterEnum("core.LeadStatus", LeadStatus_name, LeadStatus_value)
	proto.RegisterEnum("core.LeadStatusEvent", LeadStatusEvent_name, LeadStatusEvent_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for LeadService service

type LeadServiceClient interface {
	// Create lead. ID of created lead is returned
	CreateLead(ctx context.Context, in *Lead, opts ...grpc.CallOption) (*CreateLeadResult, error)
	// Find lead id
	ReadLead(ctx context.Context, in *ReadLeadRequest, opts ...grpc.CallOption) (*ReadLeadResult, error)
	// returns user leads filtred by user's roles
	GetUserLeads(ctx context.Context, in *UserLeadsRequest, opts ...grpc.CallOption) (*UserLeadsReply, error)
	// returns full lead info
	GetLead(ctx context.Context, in *GetLeadRequest, opts ...grpc.CallOption) (*GetLeadReply, error)
	// changes lead state
	SetLeadStatus(ctx context.Context, in *SetLeadStatusRequest, opts ...grpc.CallOption) (*SetLeadStatusReply, error)
	CallSupplier(ctx context.Context, in *CallSupplierRequest, opts ...grpc.CallOption) (*CallSupplierReply, error)
	CallCustomer(ctx context.Context, in *CallCustomerRequest, opts ...grpc.CallOption) (*CallCustomerReply, error)
}

type leadServiceClient struct {
	cc *grpc.ClientConn
}

func NewLeadServiceClient(cc *grpc.ClientConn) LeadServiceClient {
	return &leadServiceClient{cc}
}

func (c *leadServiceClient) CreateLead(ctx context.Context, in *Lead, opts ...grpc.CallOption) (*CreateLeadResult, error) {
	out := new(CreateLeadResult)
	err := grpc.Invoke(ctx, "/core.LeadService/CreateLead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadServiceClient) ReadLead(ctx context.Context, in *ReadLeadRequest, opts ...grpc.CallOption) (*ReadLeadResult, error) {
	out := new(ReadLeadResult)
	err := grpc.Invoke(ctx, "/core.LeadService/ReadLead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadServiceClient) GetUserLeads(ctx context.Context, in *UserLeadsRequest, opts ...grpc.CallOption) (*UserLeadsReply, error) {
	out := new(UserLeadsReply)
	err := grpc.Invoke(ctx, "/core.LeadService/GetUserLeads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadServiceClient) GetLead(ctx context.Context, in *GetLeadRequest, opts ...grpc.CallOption) (*GetLeadReply, error) {
	out := new(GetLeadReply)
	err := grpc.Invoke(ctx, "/core.LeadService/GetLead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadServiceClient) SetLeadStatus(ctx context.Context, in *SetLeadStatusRequest, opts ...grpc.CallOption) (*SetLeadStatusReply, error) {
	out := new(SetLeadStatusReply)
	err := grpc.Invoke(ctx, "/core.LeadService/SetLeadStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadServiceClient) CallSupplier(ctx context.Context, in *CallSupplierRequest, opts ...grpc.CallOption) (*CallSupplierReply, error) {
	out := new(CallSupplierReply)
	err := grpc.Invoke(ctx, "/core.LeadService/CallSupplier", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadServiceClient) CallCustomer(ctx context.Context, in *CallCustomerRequest, opts ...grpc.CallOption) (*CallCustomerReply, error) {
	out := new(CallCustomerReply)
	err := grpc.Invoke(ctx, "/core.LeadService/CallCustomer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LeadService service

type LeadServiceServer interface {
	// Create lead. ID of created lead is returned
	CreateLead(context.Context, *Lead) (*CreateLeadResult, error)
	// Find lead id
	ReadLead(context.Context, *ReadLeadRequest) (*ReadLeadResult, error)
	// returns user leads filtred by user's roles
	GetUserLeads(context.Context, *UserLeadsRequest) (*UserLeadsReply, error)
	// returns full lead info
	GetLead(context.Context, *GetLeadRequest) (*GetLeadReply, error)
	// changes lead state
	SetLeadStatus(context.Context, *SetLeadStatusRequest) (*SetLeadStatusReply, error)
	CallSupplier(context.Context, *CallSupplierRequest) (*CallSupplierReply, error)
	CallCustomer(context.Context, *CallCustomerRequest) (*CallCustomerReply, error)
}

func RegisterLeadServiceServer(s *grpc.Server, srv LeadServiceServer) {
	s.RegisterService(&_LeadService_serviceDesc, srv)
}

func _LeadService_CreateLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lead)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).CreateLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/CreateLead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).CreateLead(ctx, req.(*Lead))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadService_ReadLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadLeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).ReadLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/ReadLead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).ReadLead(ctx, req.(*ReadLeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadService_GetUserLeads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLeadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).GetUserLeads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/GetUserLeads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).GetUserLeads(ctx, req.(*UserLeadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadService_GetLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).GetLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/GetLead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).GetLead(ctx, req.(*GetLeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadService_SetLeadStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLeadStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).SetLeadStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/SetLeadStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).SetLeadStatus(ctx, req.(*SetLeadStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadService_CallSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).CallSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/CallSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).CallSupplier(ctx, req.(*CallSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadService_CallCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadServiceServer).CallCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.LeadService/CallCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadServiceServer).CallCustomer(ctx, req.(*CallCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LeadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.LeadService",
	HandlerType: (*LeadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLead",
			Handler:    _LeadService_CreateLead_Handler,
		},
		{
			MethodName: "ReadLead",
			Handler:    _LeadService_ReadLead_Handler,
		},
		{
			MethodName: "GetUserLeads",
			Handler:    _LeadService_GetUserLeads_Handler,
		},
		{
			MethodName: "GetLead",
			Handler:    _LeadService_GetLead_Handler,
		},
		{
			MethodName: "SetLeadStatus",
			Handler:    _LeadService_SetLeadStatus_Handler,
		},
		{
			MethodName: "CallSupplier",
			Handler:    _LeadService_CallSupplier_Handler,
		},
		{
			MethodName: "CallCustomer",
			Handler:    _LeadService_CallCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for ProductService service

type ProductServiceClient interface {
	// Get product by id
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductSearchResult, error)
	// Same search, but return only id
	ReadProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductReadResult, error)
	// Search products
	SearchProducts(ctx context.Context, in *SearchProductRequest, opts ...grpc.CallOption) (*ProductSearchResult, error)
	// Create product
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResult, error)
	LikeProduct(ctx context.Context, in *LikeProductRequest, opts ...grpc.CallOption) (*LikeProductReply, error)
	// Method returns list of product with non-default chat templates
	GetSpecialProducts(ctx context.Context, in *GetSpecialProductsRequest, opts ...grpc.CallOption) (*GetSpecialProductsReply, error)
}

type productServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductServiceClient(cc *grpc.ClientConn) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductSearchResult, error) {
	out := new(ProductSearchResult)
	err := grpc.Invoke(ctx, "/core.ProductService/GetProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ReadProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductReadResult, error) {
	out := new(ProductReadResult)
	err := grpc.Invoke(ctx, "/core.ProductService/ReadProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SearchProducts(ctx context.Context, in *SearchProductRequest, opts ...grpc.CallOption) (*ProductSearchResult, error) {
	out := new(ProductSearchResult)
	err := grpc.Invoke(ctx, "/core.ProductService/SearchProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResult, error) {
	out := new(CreateProductResult)
	err := grpc.Invoke(ctx, "/core.ProductService/CreateProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) LikeProduct(ctx context.Context, in *LikeProductRequest, opts ...grpc.CallOption) (*LikeProductReply, error) {
	out := new(LikeProductReply)
	err := grpc.Invoke(ctx, "/core.ProductService/LikeProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetSpecialProducts(ctx context.Context, in *GetSpecialProductsRequest, opts ...grpc.CallOption) (*GetSpecialProductsReply, error) {
	out := new(GetSpecialProductsReply)
	err := grpc.Invoke(ctx, "/core.ProductService/GetSpecialProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceServer interface {
	// Get product by id
	GetProduct(context.Context, *GetProductRequest) (*ProductSearchResult, error)
	// Same search, but return only id
	ReadProduct(context.Context, *GetProductRequest) (*ProductReadResult, error)
	// Search products
	SearchProducts(context.Context, *SearchProductRequest) (*ProductSearchResult, error)
	// Create product
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResult, error)
	LikeProduct(context.Context, *LikeProductRequest) (*LikeProductReply, error)
	// Method returns list of product with non-default chat templates
	GetSpecialProducts(context.Context, *GetSpecialProductsRequest) (*GetSpecialProductsReply, error)
}

func RegisterProductServiceServer(s *grpc.Server, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ProductService/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ReadProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ReadProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ProductService/ReadProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ReadProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SearchProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SearchProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ProductService/SearchProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SearchProducts(ctx, req.(*SearchProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ProductService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_LikeProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).LikeProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ProductService/LikeProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).LikeProduct(ctx, req.(*LikeProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetSpecialProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecialProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetSpecialProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ProductService/GetSpecialProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetSpecialProducts(ctx, req.(*GetSpecialProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _ProductService_GetProduct_Handler,
		},
		{
			MethodName: "ReadProduct",
			Handler:    _ProductService_ReadProduct_Handler,
		},
		{
			MethodName: "SearchProducts",
			Handler:    _ProductService_SearchProducts_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _ProductService_CreateProduct_Handler,
		},
		{
			MethodName: "LikeProduct",
			Handler:    _ProductService_LikeProduct_Handler,
		},
		{
			MethodName: "GetSpecialProducts",
			Handler:    _ProductService_GetSpecialProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for ShopCardService service

type ShopCardServiceClient interface {
	// cards api
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardReply, error)
	DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*DeleteCardReply, error)
	GetCards(ctx context.Context, in *GetCardsRequest, opts ...grpc.CallOption) (*GetCardsReply, error)
}

type shopCardServiceClient struct {
	cc *grpc.ClientConn
}

func NewShopCardServiceClient(cc *grpc.ClientConn) ShopCardServiceClient {
	return &shopCardServiceClient{cc}
}

func (c *shopCardServiceClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardReply, error) {
	out := new(CreateCardReply)
	err := grpc.Invoke(ctx, "/core.ShopCardService/CreateCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCardServiceClient) DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*DeleteCardReply, error) {
	out := new(DeleteCardReply)
	err := grpc.Invoke(ctx, "/core.ShopCardService/DeleteCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCardServiceClient) GetCards(ctx context.Context, in *GetCardsRequest, opts ...grpc.CallOption) (*GetCardsReply, error) {
	out := new(GetCardsReply)
	err := grpc.Invoke(ctx, "/core.ShopCardService/GetCards", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShopCardService service

type ShopCardServiceServer interface {
	// cards api
	CreateCard(context.Context, *CreateCardRequest) (*CreateCardReply, error)
	DeleteCard(context.Context, *DeleteCardRequest) (*DeleteCardReply, error)
	GetCards(context.Context, *GetCardsRequest) (*GetCardsReply, error)
}

func RegisterShopCardServiceServer(s *grpc.Server, srv ShopCardServiceServer) {
	s.RegisterService(&_ShopCardService_serviceDesc, srv)
}

func _ShopCardService_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCardServiceServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ShopCardService/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCardServiceServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCardService_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCardServiceServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ShopCardService/DeleteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCardServiceServer).DeleteCard(ctx, req.(*DeleteCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCardService_GetCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCardServiceServer).GetCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ShopCardService/GetCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCardServiceServer).GetCards(ctx, req.(*GetCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShopCardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.ShopCardService",
	HandlerType: (*ShopCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCard",
			Handler:    _ShopCardService_CreateCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _ShopCardService_DeleteCard_Handler,
		},
		{
			MethodName: "GetCards",
			Handler:    _ShopCardService_GetCards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for ShopService service

type ShopServiceClient interface {
	// creates a shop
	CreateShop(ctx context.Context, in *CreateShopRequest, opts ...grpc.CallOption) (*CreateShopReply, error)
	// returns a shop
	ReadShop(ctx context.Context, in *ReadShopRequest, opts ...grpc.CallOption) (*ReadShopReply, error)
	// returns a public profile of the shop
	GetShopProfile(ctx context.Context, in *ShopProfileRequest, opts ...grpc.CallOption) (*ShopProfileReply, error)
}

type shopServiceClient struct {
	cc *grpc.ClientConn
}

func NewShopServiceClient(cc *grpc.ClientConn) ShopServiceClient {
	return &shopServiceClient{cc}
}

func (c *shopServiceClient) CreateShop(ctx context.Context, in *CreateShopRequest, opts ...grpc.CallOption) (*CreateShopReply, error) {
	out := new(CreateShopReply)
	err := grpc.Invoke(ctx, "/core.ShopService/CreateShop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) ReadShop(ctx context.Context, in *ReadShopRequest, opts ...grpc.CallOption) (*ReadShopReply, error) {
	out := new(ReadShopReply)
	err := grpc.Invoke(ctx, "/core.ShopService/ReadShop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) GetShopProfile(ctx context.Context, in *ShopProfileRequest, opts ...grpc.CallOption) (*ShopProfileReply, error) {
	out := new(ShopProfileReply)
	err := grpc.Invoke(ctx, "/core.ShopService/GetShopProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShopService service

type ShopServiceServer interface {
	// creates a shop
	CreateShop(context.Context, *CreateShopRequest) (*CreateShopReply, error)
	// returns a shop
	ReadShop(context.Context, *ReadShopRequest) (*ReadShopReply, error)
	// returns a public profile of the shop
	GetShopProfile(context.Context, *ShopProfileRequest) (*ShopProfileReply, error)
}

func RegisterShopServiceServer(s *grpc.Server, srv ShopServiceServer) {
	s.RegisterService(&_ShopService_serviceDesc, srv)
}

func _ShopService_CreateShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).CreateShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ShopService/CreateShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).CreateShop(ctx, req.(*CreateShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_ReadShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).ReadShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ShopService/ReadShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).ReadShop(ctx, req.(*ReadShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_GetShopProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetShopProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.ShopService/GetShopProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetShopProfile(ctx, req.(*ShopProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShopService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.ShopService",
	HandlerType: (*ShopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShop",
			Handler:    _ShopService_CreateShop_Handler,
		},
		{
			MethodName: "ReadShop",
			Handler:    _ShopService_ReadShop_Handler,
		},
		{
			MethodName: "GetShopProfile",
			Handler:    _ShopService_GetShopProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for TagService service

type TagServiceClient interface {
	// get tags that should be displayed in main page
	GetMainTags(ctx context.Context, in *GetMainTagsRequest, opts ...grpc.CallOption) (*TagSearchResult, error)
	// get tags that should be displayed near selected tags (GetRelatedTagsRequest.Tags)
	GetRelatedTags(ctx context.Context, in *GetRelatedTagsRequest, opts ...grpc.CallOption) (*TagSearchResult, error)
}

type tagServiceClient struct {
	cc *grpc.ClientConn
}

func NewTagServiceClient(cc *grpc.ClientConn) TagServiceClient {
	return &tagServiceClient{cc}
}

func (c *tagServiceClient) GetMainTags(ctx context.Context, in *GetMainTagsRequest, opts ...grpc.CallOption) (*TagSearchResult, error) {
	out := new(TagSearchResult)
	err := grpc.Invoke(ctx, "/core.TagService/GetMainTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) GetRelatedTags(ctx context.Context, in *GetRelatedTagsRequest, opts ...grpc.CallOption) (*TagSearchResult, error) {
	out := new(TagSearchResult)
	err := grpc.Invoke(ctx, "/core.TagService/GetRelatedTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TagService service

type TagServiceServer interface {
	// get tags that should be displayed in main page
	GetMainTags(context.Context, *GetMainTagsRequest) (*TagSearchResult, error)
	// get tags that should be displayed near selected tags (GetRelatedTagsRequest.Tags)
	GetRelatedTags(context.Context, *GetRelatedTagsRequest) (*TagSearchResult, error)
}

func RegisterTagServiceServer(s *grpc.Server, srv TagServiceServer) {
	s.RegisterService(&_TagService_serviceDesc, srv)
}

func _TagService_GetMainTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMainTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetMainTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TagService/GetMainTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetMainTags(ctx, req.(*GetMainTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_GetRelatedTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelatedTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetRelatedTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TagService/GetRelatedTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetRelatedTags(ctx, req.(*GetRelatedTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TagService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.TagService",
	HandlerType: (*TagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMainTags",
			Handler:    _TagService_GetMainTags_Handler,
		},
		{
			MethodName: "GetRelatedTags",
			Handler:    _TagService_GetRelatedTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for UserService service

type UserServiceClient interface {
	// returns a user with a specific email. If not exists, creates it
	FindOrCreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*ReadUserReply, error)
	// returns a user with a specific email.
	ReadUser(ctx context.Context, in *ReadUserRequest, opts ...grpc.CallOption) (*ReadUserReply, error)
	// returns user's public profile
	GetUserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileReply, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) FindOrCreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*ReadUserReply, error) {
	out := new(ReadUserReply)
	err := grpc.Invoke(ctx, "/core.UserService/FindOrCreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ReadUser(ctx context.Context, in *ReadUserRequest, opts ...grpc.CallOption) (*ReadUserReply, error) {
	out := new(ReadUserReply)
	err := grpc.Invoke(ctx, "/core.UserService/ReadUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileReply, error) {
	out := new(UserProfileReply)
	err := grpc.Invoke(ctx, "/core.UserService/GetUserProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	// returns a user with a specific email. If not exists, creates it
	FindOrCreateUser(context.Context, *CreateUserRequest) (*ReadUserReply, error)
	// returns a user with a specific email.
	ReadUser(context.Context, *ReadUserRequest) (*ReadUserReply, error)
	// returns user's public profile
	GetUserProfile(context.Context, *UserProfileRequest) (*UserProfileReply, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_FindOrCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindOrCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.UserService/FindOrCreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindOrCreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.UserService/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ReadUser(ctx, req.(*ReadUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.UserService/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserProfile(ctx, req.(*UserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindOrCreateUser",
			Handler:    _UserService_FindOrCreateUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _UserService_ReadUser_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _UserService_GetUserProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("core.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x59, 0x5f, 0x6f, 0x1b, 0x4b,
	0x15, 0x8f, 0xff, 0x24, 0x5e, 0x1f, 0xc7, 0xff, 0x26, 0xff, 0x1c, 0xb7, 0xa5, 0x57, 0x0b, 0x5c,
	0xa1, 0x0a, 0x0a, 0xe4, 0x72, 0xc5, 0x45, 0x42, 0x17, 0xda, 0xd4, 0x6d, 0x23, 0xd2, 0x24, 0xb2,
	0x93, 0x56, 0xf7, 0xe5, 0xae, 0x36, 0xf6, 0x26, 0x5e, 0x75, 0xed, 0x35, 0xbb, 0xeb, 0x96, 0x7c,
	0x05, 0xde, 0x78, 0xe1, 0x53, 0xf0, 0x3d, 0x00, 0x21, 0x1e, 0xf8, 0x0e, 0x3c, 0xf0, 0x1d, 0x78,
	0xe1, 0xcc, 0x99, 0x9d, 0xdd, 0x99, 0x59, 0x3b, 0x45, 0x88, 0x87, 0xaa, 0xde, 0x33, 0x73, 0xfe,
	0x9f, 0xf3, 0x9b, 0x33, 0x13, 0x80, 0x71, 0x18, 0x79, 0x4f, 0x17, 0x51, 0x98, 0x84, 0xac, 0xca,
	0x7f, 0xdb, 0x0e, 0xb4, 0x87, 0x9e, 0x3b, 0x39, 0xc5, 0x7f, 0x43, 0xef, 0xb7, 0x4b, 0x2f, 0x4e,
	0xd8, 0x36, 0x94, 0xfd, 0x49, 0xaf, 0xf4, 0x59, 0xe9, 0x07, 0x95, 0xd7, 0x1b, 0x6c, 0x1f, 0xb6,
	0xfd, 0x79, 0x9c, 0xb8, 0xb7, 0x91, 0x3b, 0x73, 0x16, 0xef, 0x7b, 0x65, 0xa4, 0xd7, 0x91, 0x7e,
	0x08, 0xed, 0x71, 0x38, 0xff, 0xe0, 0x45, 0xb1, 0x9b, 0xf8, 0xe1, 0xdc, 0x41, 0x96, 0x0a, 0x2e,
	0x55, 0x5f, 0x6f, 0x3c, 0x6f, 0x40, 0x3d, 0xf6, 0xdc, 0x68, 0x3c, 0x75, 0xae, 0xef, 0xec, 0x87,
	0xd0, 0xca, 0x15, 0xc4, 0xcb, 0x20, 0x61, 0x90, 0xcb, 0xb7, 0xff, 0x54, 0x82, 0x2a, 0x5f, 0x52,
	0x89, 0xac, 0x05, 0x5b, 0x71, 0xb8, 0x8c, 0xc6, 0x9e, 0x50, 0xc6, 0xda, 0x50, 0x1b, 0x87, 0xb3,
	0x99, 0x37, 0x4f, 0x48, 0x45, 0x9d, 0xed, 0x40, 0x63, 0xbc, 0x8c, 0x93, 0x70, 0xe6, 0x45, 0x5c,
	0x6f, 0x95, 0xb8, 0x76, 0x0d, 0x43, 0x37, 0x69, 0xeb, 0x3e, 0xb4, 0x72, 0x6a, 0xe0, 0xcf, 0xdf,
	0xf7, 0x6a, 0x44, 0x47, 0x85, 0x18, 0x86, 0xc9, 0x72, 0x9c, 0x70, 0x09, 0x5b, 0x24, 0xe1, 0x33,
	0xd8, 0x72, 0xc7, 0xdc, 0x99, 0x9e, 0x85, 0xdf, 0xad, 0xa3, 0xce, 0x53, 0x0a, 0x17, 0xb7, 0xef,
	0x19, 0xd1, 0xed, 0x5f, 0x42, 0xe7, 0x38, 0xf2, 0xdc, 0xc4, 0x5b, 0xed, 0x0e, 0x7b, 0x08, 0xd5,
	0x00, 0x57, 0xc8, 0xee, 0xc6, 0x51, 0x2b, 0xe7, 0x3f, 0x99, 0xdf, 0x84, 0xf6, 0x1f, 0x4a, 0xd0,
	0xb9, 0x8a, 0xbd, 0x88, 0x13, 0x62, 0x19, 0x6d, 0x74, 0x6e, 0x19, 0x0b, 0x3f, 0xb8, 0x8c, 0x2a,
	0x5a, 0x51, 0x8d, 0xc2, 0x80, 0xfb, 0x5e, 0x41, 0x1b, 0x58, 0x2e, 0x83, 0xb3, 0x0e, 0x71, 0x85,
	0xb3, 0x70, 0x2d, 0x59, 0xc8, 0x59, 0x13, 0x36, 0x03, 0x7f, 0xe6, 0x27, 0x14, 0x89, 0x2a, 0xeb,
	0x42, 0x7d, 0xe2, 0x47, 0x9e, 0x70, 0x85, 0x87, 0xc1, 0x62, 0x07, 0xd0, 0xbe, 0x89, 0xc2, 0x99,
	0xb3, 0x5c, 0x4c, 0xd0, 0xfa, 0x89, 0xe3, 0x26, 0xc2, 0x67, 0xfb, 0xc7, 0xd0, 0x52, 0x4c, 0x5a,
	0x04, 0x77, 0xec, 0x11, 0x0a, 0xe3, 0x5f, 0x68, 0x4e, 0x65, 0x85, 0x13, 0x7f, 0x2d, 0x83, 0x25,
	0x3f, 0x14, 0xdf, 0xab, 0xff, 0x53, 0xd6, 0xaa, 0xec, 0x31, 0x58, 0x69, 0x1e, 0x62, 0x34, 0x95,
	0x2b, 0x6c, 0x0a, 0x85, 0x17, 0x82, 0x5a, 0x48, 0x6b, 0x6d, 0x4d, 0x5a, 0x5b, 0x44, 0x7f, 0x08,
	0x96, 0xd4, 0x41, 0x49, 0x6c, 0x1c, 0x81, 0x10, 0xc7, 0x9d, 0xe4, 0x09, 0x46, 0x9e, 0x64, 0x19,
	0xf7, 0xea, 0x66, 0x82, 0x47, 0x44, 0x67, 0xdf, 0x87, 0x3a, 0x65, 0x83, 0x32, 0x00, 0xb4, 0x69,
	0x55, 0x06, 0x0e, 0x8a, 0xc5, 0xdf, 0x20, 0x77, 0x7a, 0x50, 0x8d, 0xa7, 0xe1, 0xa2, 0xb7, 0xad,
	0xea, 0x1e, 0x21, 0x85, 0x17, 0x9c, 0x12, 0xfc, 0x26, 0x05, 0xff, 0x5b, 0xd8, 0x1d, 0x79, 0x49,
	0xae, 0x5e, 0xa9, 0x09, 0x99, 0x60, 0x11, 0xdb, 0xef, 0xc1, 0xa6, 0xf7, 0x81, 0x47, 0xb2, 0x4c,
	0x26, 0xed, 0x99, 0x76, 0x0f, 0xf8, 0xa2, 0x5a, 0x4a, 0x54, 0x17, 0xf6, 0x11, 0x30, 0x43, 0x3e,
	0x4f, 0xb0, 0x2c, 0xd2, 0xd2, 0xca, 0x22, 0xfd, 0x1c, 0x76, 0x8e, 0xdd, 0x20, 0x18, 0x2d, 0x17,
	0x8b, 0xc0, 0x47, 0x77, 0xd7, 0x98, 0x64, 0xef, 0x40, 0x57, 0xdf, 0x87, 0xa2, 0x25, 0xf3, 0x71,
	0x9a, 0x82, 0x4f, 0x31, 0xe7, 0xfb, 0x38, 0xf3, 0x3b, 0x68, 0xbd, 0x12, 0xd6, 0xae, 0xed, 0x0d,
	0x01, 0x4d, 0x65, 0x81, 0x33, 0xff, 0x35, 0x04, 0xfd, 0x10, 0xb6, 0x33, 0xc1, 0x9f, 0x0e, 0xc0,
	0x1d, 0x74, 0x71, 0x77, 0x5a, 0x7e, 0xab, 0x31, 0xb1, 0x05, 0x08, 0x9e, 0x13, 0x2f, 0xc3, 0x42,
	0x06, 0xd6, 0xcc, 0x9b, 0xf8, 0xae, 0xb4, 0x80, 0xd3, 0xb0, 0x6e, 0x3f, 0xfa, 0xc9, 0xd4, 0x99,
	0x78, 0x81, 0x87, 0x49, 0xa7, 0x72, 0xb7, 0x54, 0x8f, 0x78, 0x63, 0x56, 0x75, 0x43, 0xff, 0x59,
	0xe2, 0x05, 0xc1, 0xbf, 0x0c, 0xf5, 0xc8, 0xf6, 0xde, 0xbb, 0xfb, 0x18, 0x46, 0xc2, 0x86, 0x3a,
	0xeb, 0x40, 0x15, 0x8b, 0x3f, 0x26, 0x90, 0xa8, 0x3c, 0x2f, 0x77, 0x4a, 0x39, 0x06, 0x54, 0x08,
	0x89, 0x3a, 0xb0, 0x15, 0xde, 0xdc, 0xc4, 0x9e, 0xc0, 0x04, 0x6e, 0x74, 0x17, 0x6a, 0x04, 0x01,
	0x52, 0xb5, 0xb0, 0xd1, 0x8f, 0x9d, 0xd8, 0x0d, 0x3c, 0x27, 0x9c, 0x07, 0x77, 0x04, 0x09, 0x16,
	0xd6, 0x70, 0x47, 0xb0, 0x3a, 0x39, 0x8a, 0xd4, 0x4c, 0xeb, 0x2d, 0xca, 0x07, 0x12, 0x78, 0xb9,
	0x73, 0x42, 0x9d, 0x08, 0x5a, 0x5f, 0xce, 0xdd, 0x99, 0x68, 0xa2, 0x3a, 0x77, 0x33, 0x95, 0x89,
	0x6e, 0xfe, 0x0c, 0x76, 0x52, 0xff, 0x84, 0xb3, 0x29, 0x90, 0x3e, 0x82, 0xad, 0x88, 0x7e, 0xa5,
	0xc8, 0xa3, 0x03, 0x81, 0xfd, 0x18, 0xba, 0x59, 0x54, 0x56, 0x9e, 0x25, 0xa7, 0xb0, 0x2b, 0xc0,
	0xd9, 0x08, 0xde, 0x77, 0xa0, 0x96, 0x42, 0x4c, 0x9a, 0xf1, 0x22, 0xc2, 0x70, 0x94, 0x42, 0x37,
	0xb1, 0x37, 0xaf, 0xef, 0x44, 0x79, 0xd9, 0xbf, 0xc2, 0x52, 0xd6, 0xa5, 0x15, 0xd0, 0x1e, 0x11,
	0xcf, 0xfb, 0x9d, 0x1f, 0x27, 0x31, 0xb1, 0x58, 0x58, 0x24, 0xa2, 0x2c, 0xa8, 0x04, 0xec, 0xdf,
	0x57, 0xa1, 0x26, 0x55, 0xa8, 0x5c, 0x98, 0xa8, 0xc4, 0x4f, 0x02, 0x09, 0x93, 0x1a, 0x13, 0xc2,
	0xe1, 0x41, 0x1e, 0x3f, 0x7f, 0xe6, 0xde, 0x7a, 0xce, 0xd8, 0x5d, 0x50, 0x0a, 0xaa, 0xb4, 0xa1,
	0x0f, 0xcc, 0xdc, 0x90, 0x26, 0xb4, 0xce, 0x1e, 0xc0, 0x8e, 0xb9, 0xb6, 0x8c, 0x02, 0xca, 0xea,
	0xfa, 0x83, 0xf0, 0x11, 0xec, 0x99, 0x4c, 0x1f, 0xfd, 0x49, 0x32, 0xed, 0x75, 0x70, 0xb9, 0x89,
	0xc1, 0xdb, 0x37, 0x97, 0xa7, 0x9e, 0x7f, 0x3b, 0x4d, 0x7a, 0xdd, 0xe2, 0xfa, 0x62, 0x79, 0x1d,
	0xf8, 0xf1, 0x54, 0x40, 0x9c, 0x45, 0xde, 0x6a, 0xe2, 0x03, 0xff, 0xbd, 0x17, 0x3b, 0xe3, 0x70,
	0x89, 0x48, 0xc6, 0xeb, 0x65, 0x93, 0x9f, 0x09, 0x71, 0x8a, 0x20, 0xdc, 0x0f, 0x48, 0x4f, 0x51,
	0x4b, 0x12, 0x09, 0x56, 0x75, 0x20, 0xd5, 0xd2, 0x85, 0x3c, 0xdb, 0xa9, 0x9e, 0x7a, 0x46, 0x25,
	0x74, 0xd5, 0x91, 0x1f, 0x53, 0xe5, 0xc7, 0x23, 0x2c, 0x74, 0x3a, 0x27, 0x2c, 0x3c, 0x09, 0x36,
	0xfd, 0xc4, 0x9b, 0xc5, 0xbd, 0x36, 0x95, 0x5a, 0x57, 0xab, 0x88, 0x13, 0x5c, 0x61, 0x4f, 0xa1,
	0x63, 0x38, 0x1e, 0xf7, 0x18, 0x6d, 0xde, 0x15, 0x9b, 0x4f, 0x38, 0xed, 0xd8, 0x9d, 0x4f, 0x7c,
	0x8e, 0xea, 0xdc, 0x68, 0xee, 0x1e, 0x55, 0xd0, 0x0e, 0xed, 0x53, 0xf4, 0xdb, 0xb7, 0xd0, 0x50,
	0x85, 0xab, 0xf5, 0x80, 0x05, 0x40, 0x8d, 0x22, 0xca, 0x01, 0xab, 0x63, 0x11, 0xf9, 0x63, 0xd1,
	0x37, 0xd4, 0x4f, 0x13, 0x3f, 0xa6, 0x88, 0x39, 0x82, 0x2e, 0xce, 0x99, 0x83, 0xb4, 0xff, 0x9b,
	0xa4, 0xa9, 0x2e, 0x34, 0x5d, 0xba, 0xb7, 0xf6, 0xcf, 0xa1, 0x65, 0x18, 0xa6, 0xea, 0x6a, 0x40,
	0x85, 0x57, 0x44, 0x56, 0x79, 0xa4, 0x58, 0x94, 0xeb, 0x2b, 0x60, 0xa7, 0x68, 0x7f, 0x11, 0x78,
	0x74, 0x04, 0xd6, 0xe7, 0xa6, 0x72, 0x8a, 0xca, 0x55, 0xee, 0x3a, 0x09, 0xb2, 0x6c, 0x06, 0x1d,
	0x4d, 0x10, 0x87, 0xf6, 0x07, 0x70, 0x88, 0x98, 0x3a, 0x5a, 0x78, 0x63, 0xdf, 0x0d, 0xd2, 0x15,
	0x79, 0xda, 0xe1, 0x08, 0xc2, 0xf4, 0x95, 0xc2, 0x68, 0xa1, 0xb7, 0x8c, 0x7d, 0x06, 0x07, 0xab,
	0xa4, 0x71, 0x68, 0xff, 0x9c, 0x9b, 0x12, 0x4b, 0x04, 0xe9, 0xa5, 0x65, 0x53, 0x94, 0x8e, 0x81,
	0xf0, 0xa2, 0x28, 0x95, 0xf7, 0x16, 0x2c, 0x5e, 0x59, 0xc7, 0x6e, 0x34, 0xd1, 0xd4, 0x2a, 0xe8,
	0x96, 0x39, 0x9a, 0x47, 0x8c, 0xd7, 0xd4, 0x7c, 0x39, 0xbb, 0xc6, 0x22, 0xad, 0xca, 0x81, 0x47,
	0xc3, 0x76, 0xfb, 0xa7, 0x78, 0xca, 0x11, 0x84, 0x70, 0xc9, 0x32, 0xa2, 0x78, 0xf8, 0x8c, 0xf1,
	0x53, 0x1f, 0x11, 0xa5, 0x7a, 0xfb, 0x11, 0xb4, 0x55, 0x16, 0xee, 0x92, 0x62, 0x91, 0xfd, 0x13,
	0xe8, 0xbe, 0xa0, 0xf3, 0x44, 0x95, 0x68, 0x98, 0x2c, 0x6d, 0x10, 0x30, 0xd6, 0x85, 0xb6, 0xca,
	0xc1, 0x93, 0xf1, 0x05, 0xb4, 0x31, 0x7c, 0xfc, 0x7b, 0xfd, 0x10, 0x6a, 0xba, 0x6e, 0x3f, 0x85,
	0x66, 0xce, 0x94, 0x8e, 0x89, 0xdc, 0x0f, 0x63, 0x4c, 0xcc, 0x1c, 0x39, 0x15, 0xf7, 0x0a, 0xfe,
	0x2d, 0x95, 0x68, 0x37, 0x09, 0xa9, 0x69, 0xc5, 0x49, 0x49, 0x60, 0xaa, 0x1f, 0x8c, 0x3f, 0x92,
	0x91, 0x54, 0xe5, 0xc9, 0x59, 0xab, 0x64, 0x42, 0x04, 0x56, 0x54, 0x33, 0x57, 0xae, 0xc7, 0xb0,
	0xc2, 0x2b, 0x18, 0x0f, 0x3d, 0x4d, 0x59, 0x1e, 0xf6, 0x95, 0x2c, 0xf6, 0xbf, 0xcb, 0x50, 0x25,
	0xec, 0x51, 0xe5, 0x18, 0xd0, 0x55, 0x2e, 0x40, 0x57, 0xa5, 0x80, 0x42, 0xbb, 0x46, 0x04, 0xc4,
	0x08, 0xac, 0x41, 0x3a, 0x4f, 0x03, 0xd5, 0xd8, 0x66, 0x11, 0xee, 0x6f, 0x96, 0x41, 0x40, 0x6b,
	0x5b, 0xe9, 0xac, 0xbb, 0x9b, 0xaf, 0xb9, 0x1f, 0xdc, 0xc4, 0x8d, 0x08, 0xef, 0x05, 0xae, 0x1f,
	0x42, 0x37, 0x5f, 0x95, 0x67, 0x88, 0x55, 0x5c, 0xfa, 0xe8, 0x5d, 0xc7, 0x08, 0x85, 0x84, 0xc7,
	0x75, 0xb6, 0x07, 0xcd, 0x85, 0x7b, 0xc7, 0x91, 0xd4, 0x89, 0x96, 0x01, 0x42, 0x1e, 0xc8, 0xc3,
	0x23, 0x9e, 0xfa, 0x8b, 0x85, 0x3f, 0xbf, 0x4d, 0xe9, 0x8d, 0x6c, 0xc6, 0x4f, 0x45, 0x6f, 0xa7,
	0x47, 0x50, 0x2d, 0xf6, 0x82, 0x00, 0x47, 0xb2, 0x14, 0x9a, 0x54, 0xf7, 0x31, 0x7c, 0x8a, 0x99,
	0x2d, 0xd9, 0x44, 0x71, 0x10, 0xde, 0xba, 0x73, 0x44, 0x62, 0xfe, 0x8d, 0x77, 0x17, 0xdc, 0xe3,
	0x07, 0xee, 0x35, 0xb6, 0x7b, 0x87, 0x92, 0x73, 0x82, 0xf8, 0x80, 0xc1, 0xc7, 0xf6, 0xbd, 0xf1,
	0x03, 0x2f, 0xcf, 0xbe, 0x39, 0x69, 0x94, 0xd2, 0xc9, 0x4b, 0x1b, 0x12, 0xcd, 0x49, 0xb0, 0xa3,
	0x89, 0xe2, 0x89, 0x5e, 0x5f, 0x46, 0xdf, 0x05, 0x86, 0x35, 0xff, 0xc6, 0xf5, 0xe7, 0x88, 0xac,
	0x59, 0xaf, 0x64, 0x83, 0x96, 0xa8, 0x8d, 0xaf, 0x60, 0x0f, 0x37, 0x0d, 0xbd, 0x80, 0x8f, 0xf6,
	0xea, 0x3e, 0x39, 0xa2, 0x95, 0x8a, 0x23, 0x1a, 0xd5, 0x0a, 0x1a, 0xd3, 0xc6, 0xfd, 0xda, 0x08,
	0x74, 0x68, 0x8c, 0x40, 0x0a, 0xb0, 0x3f, 0x86, 0x0a, 0xfe, 0xb7, 0xfe, 0xe4, 0xc8, 0x7b, 0x84,
	0x6e, 0x29, 0x79, 0x8f, 0xf0, 0x8a, 0xd2, 0x9d, 0xa3, 0x13, 0xe9, 0x5b, 0xd1, 0xa0, 0xea, 0xe6,
	0xdd, 0x55, 0x0d, 0x4a, 0x27, 0xd2, 0x14, 0x8f, 0xd5, 0xf4, 0xd4, 0x58, 0x5d, 0xad, 0x02, 0x11,
	0x85, 0x71, 0x54, 0xd5, 0x68, 0x4e, 0x5b, 0xb8, 0x26, 0x34, 0xf0, 0x48, 0xf7, 0x0d, 0xef, 0x54,
	0x73, 0xbe, 0x14, 0x2d, 0x9b, 0x6f, 0x56, 0x1d, 0x95, 0x5e, 0x94, 0x0b, 0x5e, 0xfc, 0x0b, 0x3b,
	0x93, 0x6a, 0xeb, 0xde, 0x13, 0xd5, 0x9b, 0x61, 0x45, 0xa5, 0x36, 0x66, 0xee, 0x64, 0xa0, 0x2d,
	0x3b, 0x60, 0xd3, 0x2c, 0xe9, 0xa6, 0x7c, 0x29, 0x50, 0xaa, 0xb6, 0x6b, 0x54, 0x2d, 0xa3, 0x6f,
	0x33, 0x72, 0x5b, 0xf7, 0x34, 0x76, 0xed, 0x9e, 0xc6, 0xb6, 0xee, 0x6d, 0xec, 0xfa, 0xfa, 0xc6,
	0x06, 0x69, 0x7b, 0xb8, 0x48, 0x9c, 0x70, 0x99, 0x50, 0x7f, 0x5a, 0xdc, 0x2e, 0x84, 0x23, 0x04,
	0x28, 0xd1, 0x94, 0xd4, 0xa4, 0x16, 0xef, 0xb1, 0xa9, 0x1b, 0x3b, 0x22, 0x2a, 0x2d, 0x95, 0x24,
	0x22, 0xd3, 0x26, 0x12, 0xf7, 0x51, 0x70, 0x65, 0x6d, 0xc8, 0x23, 0xfd, 0xff, 0x68, 0xc3, 0x2b,
	0xf1, 0x0e, 0xa2, 0xb5, 0x61, 0x7f, 0x5d, 0xa5, 0xa2, 0xa8, 0x7e, 0xda, 0xa2, 0x65, 0xb3, 0x45,
	0x51, 0x70, 0x9d, 0xa6, 0x7b, 0x2e, 0xe7, 0xc9, 0x63, 0x80, 0xfc, 0xad, 0x86, 0xd5, 0xa0, 0xf2,
	0xfc, 0xea, 0x9b, 0xce, 0x06, 0xb3, 0xa0, 0x7a, 0x72, 0xf6, 0xf2, 0xbc, 0x53, 0x7a, 0x72, 0x05,
	0xdb, 0xda, 0x35, 0xbe, 0x01, 0xb5, 0xab, 0xb3, 0xdf, 0x9c, 0x9d, 0xbf, 0x3b, 0xeb, 0x70, 0x7b,
	0xad, 0xe3, 0xab, 0xd1, 0xe5, 0xf9, 0x9b, 0xc1, 0x10, 0x7b, 0x15, 0xbf, 0x46, 0x57, 0x17, 0x17,
	0xa7, 0x27, 0xf8, 0x55, 0xc6, 0x12, 0xd8, 0x1a, 0x0d, 0x4e, 0x4f, 0xf1, 0x37, 0xbf, 0x59, 0x6d,
	0xe3, 0xca, 0x60, 0xe8, 0xa4, 0x94, 0xea, 0x93, 0x50, 0xe8, 0x4d, 0x9f, 0x10, 0xea, 0xb0, 0x39,
	0x78, 0x73, 0x71, 0xc9, 0x35, 0xa3, 0x09, 0x67, 0x83, 0x77, 0x28, 0xad, 0x0d, 0x8d, 0x93, 0x33,
	0xe7, 0x62, 0x78, 0xfe, 0x6a, 0x38, 0x18, 0x8d, 0x50, 0x60, 0x13, 0xea, 0xa3, 0xab, 0xe7, 0x6f,
	0x4e, 0x2e, 0x2f, 0x07, 0x2f, 0x50, 0x26, 0xae, 0x9f, 0x9f, 0x39, 0x2f, 0x06, 0xa7, 0x27, 0x6f,
	0x07, 0xc3, 0x6f, 0x3a, 0xbc, 0xe9, 0xea, 0xc7, 0xe7, 0x6f, 0x2e, 0x4e, 0x07, 0x7c, 0x7d, 0x93,
	0x3e, 0x9f, 0x9d, 0x1d, 0x73, 0x85, 0x2f, 0x3a, 0x5b, 0x4f, 0x1c, 0x68, 0x9b, 0x77, 0x7f, 0xb4,
	0xf0, 0x78, 0x38, 0x78, 0x76, 0x39, 0x10, 0x9e, 0x64, 0xaa, 0x4a, 0x64, 0x3b, 0xa9, 0x42, 0xb5,
	0xb8, 0x92, 0x29, 0xa9, 0x90, 0xc7, 0xa9, 0x12, 0x54, 0xc9, 0x25, 0x90, 0x8e, 0xce, 0xe6, 0xd1,
	0x5f, 0x2a, 0xd0, 0x20, 0x0d, 0x5e, 0xf4, 0x01, 0x87, 0x4e, 0x76, 0x04, 0x90, 0xbf, 0x7b, 0x31,
	0xc8, 0x6f, 0xcc, 0xfd, 0x7d, 0xf1, 0xdb, 0x7c, 0x15, 0xb3, 0x37, 0xd8, 0x2f, 0xc0, 0x92, 0x0f,
	0x7f, 0x2c, 0x7d, 0xb0, 0x30, 0x5e, 0x1a, 0xfb, 0xbb, 0x26, 0x39, 0x65, 0xfd, 0x9a, 0x2e, 0xec,
	0xd9, 0xbb, 0x14, 0xdb, 0xcf, 0xab, 0x41, 0x7d, 0x3b, 0x93, 0xfc, 0xfa, 0x03, 0x16, 0xf2, 0x7f,
	0x09, 0xb5, 0xf4, 0xc2, 0xcf, 0xd2, 0x2d, 0xfa, 0xc3, 0x42, 0x9f, 0x19, 0x54, 0xc1, 0xf6, 0x0a,
	0x9a, 0xda, 0x73, 0x09, 0xeb, 0xa7, 0x95, 0xb6, 0xe2, 0x8d, 0xa6, 0xdf, 0x5b, 0xb9, 0x26, 0x04,
	0xbd, 0x80, 0x6d, 0xf5, 0x6d, 0x84, 0x1d, 0xa6, 0x41, 0x2a, 0xbe, 0xab, 0xf4, 0x0f, 0x56, 0x2d,
	0x69, 0x52, 0xe4, 0x23, 0x89, 0x2a, 0xc5, 0x78, 0x60, 0x51, 0xa5, 0xe8, 0x6f, 0x2a, 0x1b, 0x47,
	0x7f, 0xae, 0x40, 0x2b, 0xbb, 0x6d, 0x8b, 0x6c, 0x3e, 0x07, 0xc8, 0x5f, 0x38, 0xd8, 0x41, 0x16,
	0x0b, 0x7d, 0xf6, 0xef, 0x1f, 0x6a, 0x97, 0x22, 0xf5, 0x9c, 0x42, 0xe3, 0x9e, 0x41, 0x83, 0xa7,
	0xed, 0x93, 0x42, 0x0e, 0x34, 0x21, 0x43, 0x35, 0xcb, 0x27, 0xd0, 0xd2, 0x1e, 0x3b, 0x94, 0x78,
	0x17, 0x9f, 0x40, 0xee, 0xb7, 0xe6, 0x35, 0x34, 0xb5, 0xcb, 0xba, 0x94, 0xb4, 0xea, 0x3d, 0x40,
	0x4a, 0x5a, 0x71, 0xbb, 0x17, 0x7e, 0x29, 0xb7, 0x17, 0x96, 0x66, 0xb9, 0x78, 0x33, 0x92, 0x85,
	0x5f, 0xb8, 0xea, 0x6c, 0xb0, 0xb7, 0x34, 0x36, 0x18, 0xd7, 0x13, 0xf6, 0x38, 0x8b, 0xd0, 0xea,
	0x6b, 0x50, 0xff, 0xd1, 0xfa, 0x0d, 0x22, 0x93, 0x7f, 0x2b, 0xe1, 0x91, 0x9a, 0xce, 0xd7, 0x32,
	0x95, 0x5f, 0xcb, 0xc6, 0xa4, 0xcb, 0xcb, 0x81, 0xea, 0x99, 0x72, 0x45, 0xe8, 0xef, 0x15, 0x17,
	0x84, 0xad, 0xc8, 0x9f, 0x5f, 0x0f, 0x24, 0x7f, 0xe1, 0x8a, 0x21, 0xf9, 0xcd, 0x9b, 0xc4, 0x06,
	0xfb, 0x0a, 0x2c, 0x79, 0x2d, 0x90, 0x4d, 0x6e, 0xdc, 0x2d, 0xfa, 0x3b, 0x26, 0x59, 0x78, 0xf3,
	0xf7, 0x12, 0x34, 0xb8, 0x37, 0x05, 0x4f, 0x68, 0xd0, 0xd6, 0x3c, 0x51, 0x86, 0x7e, 0xdd, 0x93,
	0x6c, 0x5a, 0x17, 0x96, 0xc8, 0x99, 0x5f, 0x85, 0x1b, 0x95, 0x77, 0xc7, 0x24, 0xcb, 0x3e, 0xe3,
	0xef, 0x8e, 0xca, 0x5c, 0x28, 0xb3, 0x5e, 0x9c, 0x3a, 0x65, 0xd6, 0xcd, 0x21, 0x12, 0xfd, 0xf9,
	0x63, 0x09, 0x80, 0xc6, 0x39, 0xe1, 0xce, 0xaf, 0xa1, 0xa1, 0xcc, 0x8e, 0x52, 0x62, 0x71, 0x9c,
	0x94, 0x0e, 0x19, 0x93, 0x20, 0x9a, 0xf5, 0x92, 0xcc, 0x52, 0x06, 0x4b, 0xf6, 0x20, 0x13, 0x52,
	0x1c, 0x37, 0xd7, 0xca, 0x39, 0xfa, 0x07, 0x06, 0x9a, 0x23, 0x64, 0xde, 0xfd, 0x9d, 0x97, 0xfe,
	0x7c, 0x72, 0x1e, 0xe5, 0xd3, 0xa2, 0x1e, 0x6e, 0x65, 0x24, 0x54, 0x43, 0x96, 0x8d, 0x66, 0x79,
	0xb0, 0x89, 0x77, 0xcf, 0xdc, 0x72, 0x2f, 0xa7, 0x08, 0xb6, 0x72, 0xfa, 0xcb, 0xd0, 0x14, 0x67,
	0x8b, 0xfe, 0xfe, 0x8a, 0x15, 0x92, 0x72, 0xbd, 0x45, 0x7f, 0xc2, 0xfa, 0xe2, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x70, 0x51, 0x90, 0xde, 0xd0, 0x1a, 0x00, 0x00,
}
