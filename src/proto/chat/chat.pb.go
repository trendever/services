// Code generated by protoc-gen-go.
// source: chat.proto
// DO NOT EDIT!

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	NewChatRequest
	ChatReply
	ChatsReply
	ChatsRequest
	JoinChatRequest
	LeaveChatRequest
	SendMessageRequest
	SendMessageReply
	Chat
	Member
	Error
	Message
	MessagePart
	ChatHistoryRequest
	ChatHistoryReply
	MarkAsReadedRequest
	MarkAsReadedReply
	AppendMessageRequest
	AppendMessageReply
	NewMessageRequest
	NewMessageReply
	MessageReadedRequest
	MessageReadedReply
	NewChatMemberRequest
	MessageAppendedRequest
	NewChatMemberReply
	TotalCountUnreadRequest
	TotalCountUnreadReply
	SetStatusMessage
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MemberRole int32

const (
	MemberRole_UNKNOWN      MemberRole = 0
	MemberRole_CUSTOMER     MemberRole = 1
	MemberRole_SUPPLIER     MemberRole = 2
	MemberRole_SELLER       MemberRole = 3
	MemberRole_SUPER_SELLER MemberRole = 4
	MemberRole_SYSTEM       MemberRole = 5
)

var MemberRole_name = map[int32]string{
	0: "UNKNOWN",
	1: "CUSTOMER",
	2: "SUPPLIER",
	3: "SELLER",
	4: "SUPER_SELLER",
	5: "SYSTEM",
}
var MemberRole_value = map[string]int32{
	"UNKNOWN":      0,
	"CUSTOMER":     1,
	"SUPPLIER":     2,
	"SELLER":       3,
	"SUPER_SELLER": 4,
	"SYSTEM":       5,
}

func (x MemberRole) String() string {
	return proto.EnumName(MemberRole_name, int32(x))
}
func (MemberRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ErrorCode int32

const (
	ErrorCode_NO_ERRORS  ErrorCode = 0
	ErrorCode_NOT_EXISTS ErrorCode = 1
	ErrorCode_FORBIDDEN  ErrorCode = 2
)

var ErrorCode_name = map[int32]string{
	0: "NO_ERRORS",
	1: "NOT_EXISTS",
	2: "FORBIDDEN",
}
var ErrorCode_value = map[string]int32{
	"NO_ERRORS":  0,
	"NOT_EXISTS": 1,
	"FORBIDDEN":  2,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type NewChatRequest struct {
	Chat *Chat `protobuf:"bytes,1,opt,name=chat" json:"chat,omitempty"`
}

func (m *NewChatRequest) Reset()                    { *m = NewChatRequest{} }
func (m *NewChatRequest) String() string            { return proto.CompactTextString(m) }
func (*NewChatRequest) ProtoMessage()               {}
func (*NewChatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NewChatRequest) GetChat() *Chat {
	if m != nil {
		return m.Chat
	}
	return nil
}

type ChatReply struct {
	Chat  *Chat  `protobuf:"bytes,1,opt,name=chat" json:"chat,omitempty"`
	Error *Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *ChatReply) Reset()                    { *m = ChatReply{} }
func (m *ChatReply) String() string            { return proto.CompactTextString(m) }
func (*ChatReply) ProtoMessage()               {}
func (*ChatReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ChatReply) GetChat() *Chat {
	if m != nil {
		return m.Chat
	}
	return nil
}

func (m *ChatReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ChatsReply struct {
	Chats []*Chat `protobuf:"bytes,1,rep,name=chats" json:"chats,omitempty"`
}

func (m *ChatsReply) Reset()                    { *m = ChatsReply{} }
func (m *ChatsReply) String() string            { return proto.CompactTextString(m) }
func (*ChatsReply) ProtoMessage()               {}
func (*ChatsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ChatsReply) GetChats() []*Chat {
	if m != nil {
		return m.Chats
	}
	return nil
}

type ChatsRequest struct {
	Id     []uint64 `protobuf:"varint,1,rep,name=id" json:"id,omitempty"`
	UserId uint64   `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ChatsRequest) Reset()                    { *m = ChatsRequest{} }
func (m *ChatsRequest) String() string            { return proto.CompactTextString(m) }
func (*ChatsRequest) ProtoMessage()               {}
func (*ChatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type JoinChatRequest struct {
	ConversationId uint64    `protobuf:"varint,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Members        []*Member `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
}

func (m *JoinChatRequest) Reset()                    { *m = JoinChatRequest{} }
func (m *JoinChatRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinChatRequest) ProtoMessage()               {}
func (*JoinChatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *JoinChatRequest) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

type LeaveChatRequest struct {
	ConversationId uint64   `protobuf:"varint,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	UserIds        []uint64 `protobuf:"varint,2,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
}

func (m *LeaveChatRequest) Reset()                    { *m = LeaveChatRequest{} }
func (m *LeaveChatRequest) String() string            { return proto.CompactTextString(m) }
func (*LeaveChatRequest) ProtoMessage()               {}
func (*LeaveChatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SendMessageRequest struct {
	ConversationId uint64     `protobuf:"varint,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Messages       []*Message `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
}

func (m *SendMessageRequest) Reset()                    { *m = SendMessageRequest{} }
func (m *SendMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SendMessageRequest) ProtoMessage()               {}
func (*SendMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SendMessageRequest) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type SendMessageReply struct {
	Chat     *Chat      `protobuf:"bytes,1,opt,name=chat" json:"chat,omitempty"`
	Error    *Error     `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Messages []*Message `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
}

func (m *SendMessageReply) Reset()                    { *m = SendMessageReply{} }
func (m *SendMessageReply) String() string            { return proto.CompactTextString(m) }
func (*SendMessageReply) ProtoMessage()               {}
func (*SendMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SendMessageReply) GetChat() *Chat {
	if m != nil {
		return m.Chat
	}
	return nil
}

func (m *SendMessageReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SendMessageReply) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type Chat struct {
	Id            uint64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Members       []*Member `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	Name          string    `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	UnreadCount   uint64    `protobuf:"varint,4,opt,name=unread_count,json=unreadCount" json:"unread_count,omitempty"`
	RecentMessage *Message  `protobuf:"bytes,5,opt,name=recent_message,json=recentMessage" json:"recent_message,omitempty"`
	DirectThread  string    `protobuf:"bytes,6,opt,name=direct_thread,json=directThread" json:"direct_thread,omitempty"`
}

func (m *Chat) Reset()                    { *m = Chat{} }
func (m *Chat) String() string            { return proto.CompactTextString(m) }
func (*Chat) ProtoMessage()               {}
func (*Chat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Chat) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Chat) GetRecentMessage() *Message {
	if m != nil {
		return m.RecentMessage
	}
	return nil
}

type Member struct {
	Id     uint64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId uint64     `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Role   MemberRole `protobuf:"varint,3,opt,name=role,enum=chat.MemberRole" json:"role,omitempty"`
	// display name for the member
	Name          string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	LastMessageId uint64 `protobuf:"varint,5,opt,name=last_message_id,json=lastMessageId" json:"last_message_id,omitempty"`
	InstagramId   uint64 `protobuf:"varint,6,opt,name=instagram_id,json=instagramId" json:"instagram_id,omitempty"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (m *Member) String() string            { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type Error struct {
	Code    ErrorCode `protobuf:"varint,1,opt,name=code,enum=chat.ErrorCode" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type Message struct {
	ConversationId uint64         `protobuf:"varint,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	UserId         uint64         `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Parts          []*MessagePart `protobuf:"bytes,3,rep,name=parts" json:"parts,omitempty"`
	CreatedAt      int64          `protobuf:"varint,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Id             uint64         `protobuf:"varint,5,opt,name=id" json:"id,omitempty"`
	User           *Member        `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	InstagramId    string         `protobuf:"bytes,7,opt,name=instagram_id,json=instagramId" json:"instagram_id,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Message) GetParts() []*MessagePart {
	if m != nil {
		return m.Parts
	}
	return nil
}

func (m *Message) GetUser() *Member {
	if m != nil {
		return m.User
	}
	return nil
}

type MessagePart struct {
	Content   string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	MimeType  string `protobuf:"bytes,2,opt,name=mime_type,json=mimeType" json:"mime_type,omitempty"`
	ContentId string `protobuf:"bytes,3,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
}

func (m *MessagePart) Reset()                    { *m = MessagePart{} }
func (m *MessagePart) String() string            { return proto.CompactTextString(m) }
func (*MessagePart) ProtoMessage()               {}
func (*MessagePart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type ChatHistoryRequest struct {
	// from_message_id start message_id for query. Set 0 for get entire history
	FromMessageId  uint64 `protobuf:"varint,1,opt,name=from_message_id,json=fromMessageId" json:"from_message_id,omitempty"`
	ConversationId uint64 `protobuf:"varint,2,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Limit          uint64 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// We must know, has user access to the chat or not
	UserId uint64 `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// true - asc, false - desc
	Direction bool `protobuf:"varint,5,opt,name=direction" json:"direction,omitempty"`
}

func (m *ChatHistoryRequest) Reset()                    { *m = ChatHistoryRequest{} }
func (m *ChatHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*ChatHistoryRequest) ProtoMessage()               {}
func (*ChatHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type ChatHistoryReply struct {
	Messages      []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	Chat          *Chat      `protobuf:"bytes,2,opt,name=chat" json:"chat,omitempty"`
	TotalMessages uint64     `protobuf:"varint,3,opt,name=total_messages,json=totalMessages" json:"total_messages,omitempty"`
	Error         *Error     `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *ChatHistoryReply) Reset()                    { *m = ChatHistoryReply{} }
func (m *ChatHistoryReply) String() string            { return proto.CompactTextString(m) }
func (*ChatHistoryReply) ProtoMessage()               {}
func (*ChatHistoryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ChatHistoryReply) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ChatHistoryReply) GetChat() *Chat {
	if m != nil {
		return m.Chat
	}
	return nil
}

func (m *ChatHistoryReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type MarkAsReadedRequest struct {
	ConversationId uint64 `protobuf:"varint,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	UserId         uint64 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	MessageId      uint64 `protobuf:"varint,3,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
}

func (m *MarkAsReadedRequest) Reset()                    { *m = MarkAsReadedRequest{} }
func (m *MarkAsReadedRequest) String() string            { return proto.CompactTextString(m) }
func (*MarkAsReadedRequest) ProtoMessage()               {}
func (*MarkAsReadedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type MarkAsReadedReply struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *MarkAsReadedReply) Reset()                    { *m = MarkAsReadedReply{} }
func (m *MarkAsReadedReply) String() string            { return proto.CompactTextString(m) }
func (*MarkAsReadedReply) ProtoMessage()               {}
func (*MarkAsReadedReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *MarkAsReadedReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type AppendMessageRequest struct {
	MessageId uint64         `protobuf:"varint,1,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	Parts     []*MessagePart `protobuf:"bytes,2,rep,name=parts" json:"parts,omitempty"`
}

func (m *AppendMessageRequest) Reset()                    { *m = AppendMessageRequest{} }
func (m *AppendMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendMessageRequest) ProtoMessage()               {}
func (*AppendMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *AppendMessageRequest) GetParts() []*MessagePart {
	if m != nil {
		return m.Parts
	}
	return nil
}

type AppendMessageReply struct {
	Error   *Error   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Message *Message `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *AppendMessageReply) Reset()                    { *m = AppendMessageReply{} }
func (m *AppendMessageReply) String() string            { return proto.CompactTextString(m) }
func (*AppendMessageReply) ProtoMessage()               {}
func (*AppendMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *AppendMessageReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *AppendMessageReply) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type NewMessageRequest struct {
	Chat     *Chat      `protobuf:"bytes,1,opt,name=chat" json:"chat,omitempty"`
	Messages []*Message `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
}

func (m *NewMessageRequest) Reset()                    { *m = NewMessageRequest{} }
func (m *NewMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*NewMessageRequest) ProtoMessage()               {}
func (*NewMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *NewMessageRequest) GetChat() *Chat {
	if m != nil {
		return m.Chat
	}
	return nil
}

func (m *NewMessageRequest) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type NewMessageReply struct {
}

func (m *NewMessageReply) Reset()                    { *m = NewMessageReply{} }
func (m *NewMessageReply) String() string            { return proto.CompactTextString(m) }
func (*NewMessageReply) ProtoMessage()               {}
func (*NewMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type MessageReadedRequest struct {
	Chat      *Chat  `protobuf:"bytes,1,opt,name=chat" json:"chat,omitempty"`
	UserId    uint64 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	MessageId uint64 `protobuf:"varint,3,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
}

func (m *MessageReadedRequest) Reset()                    { *m = MessageReadedRequest{} }
func (m *MessageReadedRequest) String() string            { return proto.CompactTextString(m) }
func (*MessageReadedRequest) ProtoMessage()               {}
func (*MessageReadedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *MessageReadedRequest) GetChat() *Chat {
	if m != nil {
		return m.Chat
	}
	return nil
}

type MessageReadedReply struct {
}

func (m *MessageReadedReply) Reset()                    { *m = MessageReadedReply{} }
func (m *MessageReadedReply) String() string            { return proto.CompactTextString(m) }
func (*MessageReadedReply) ProtoMessage()               {}
func (*MessageReadedReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type NewChatMemberRequest struct {
	Chat *Chat   `protobuf:"bytes,1,opt,name=chat" json:"chat,omitempty"`
	User *Member `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *NewChatMemberRequest) Reset()                    { *m = NewChatMemberRequest{} }
func (m *NewChatMemberRequest) String() string            { return proto.CompactTextString(m) }
func (*NewChatMemberRequest) ProtoMessage()               {}
func (*NewChatMemberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *NewChatMemberRequest) GetChat() *Chat {
	if m != nil {
		return m.Chat
	}
	return nil
}

func (m *NewChatMemberRequest) GetUser() *Member {
	if m != nil {
		return m.User
	}
	return nil
}

type MessageAppendedRequest struct {
	Chat    *Chat    `protobuf:"bytes,1,opt,name=chat" json:"chat,omitempty"`
	Message *Message `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *MessageAppendedRequest) Reset()                    { *m = MessageAppendedRequest{} }
func (m *MessageAppendedRequest) String() string            { return proto.CompactTextString(m) }
func (*MessageAppendedRequest) ProtoMessage()               {}
func (*MessageAppendedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *MessageAppendedRequest) GetChat() *Chat {
	if m != nil {
		return m.Chat
	}
	return nil
}

func (m *MessageAppendedRequest) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type NewChatMemberReply struct {
}

func (m *NewChatMemberReply) Reset()                    { *m = NewChatMemberReply{} }
func (m *NewChatMemberReply) String() string            { return proto.CompactTextString(m) }
func (*NewChatMemberReply) ProtoMessage()               {}
func (*NewChatMemberReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type TotalCountUnreadRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *TotalCountUnreadRequest) Reset()                    { *m = TotalCountUnreadRequest{} }
func (m *TotalCountUnreadRequest) String() string            { return proto.CompactTextString(m) }
func (*TotalCountUnreadRequest) ProtoMessage()               {}
func (*TotalCountUnreadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type TotalCountUnreadReply struct {
	Count uint64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *TotalCountUnreadReply) Reset()                    { *m = TotalCountUnreadReply{} }
func (m *TotalCountUnreadReply) String() string            { return proto.CompactTextString(m) }
func (*TotalCountUnreadReply) ProtoMessage()               {}
func (*TotalCountUnreadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type SetStatusMessage struct {
	ConversationId uint64 `protobuf:"varint,1,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Status         string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SetStatusMessage) Reset()                    { *m = SetStatusMessage{} }
func (m *SetStatusMessage) String() string            { return proto.CompactTextString(m) }
func (*SetStatusMessage) ProtoMessage()               {}
func (*SetStatusMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func init() {
	proto.RegisterType((*NewChatRequest)(nil), "chat.NewChatRequest")
	proto.RegisterType((*ChatReply)(nil), "chat.ChatReply")
	proto.RegisterType((*ChatsReply)(nil), "chat.ChatsReply")
	proto.RegisterType((*ChatsRequest)(nil), "chat.ChatsRequest")
	proto.RegisterType((*JoinChatRequest)(nil), "chat.JoinChatRequest")
	proto.RegisterType((*LeaveChatRequest)(nil), "chat.LeaveChatRequest")
	proto.RegisterType((*SendMessageRequest)(nil), "chat.SendMessageRequest")
	proto.RegisterType((*SendMessageReply)(nil), "chat.SendMessageReply")
	proto.RegisterType((*Chat)(nil), "chat.Chat")
	proto.RegisterType((*Member)(nil), "chat.Member")
	proto.RegisterType((*Error)(nil), "chat.Error")
	proto.RegisterType((*Message)(nil), "chat.Message")
	proto.RegisterType((*MessagePart)(nil), "chat.MessagePart")
	proto.RegisterType((*ChatHistoryRequest)(nil), "chat.ChatHistoryRequest")
	proto.RegisterType((*ChatHistoryReply)(nil), "chat.ChatHistoryReply")
	proto.RegisterType((*MarkAsReadedRequest)(nil), "chat.MarkAsReadedRequest")
	proto.RegisterType((*MarkAsReadedReply)(nil), "chat.MarkAsReadedReply")
	proto.RegisterType((*AppendMessageRequest)(nil), "chat.AppendMessageRequest")
	proto.RegisterType((*AppendMessageReply)(nil), "chat.AppendMessageReply")
	proto.RegisterType((*NewMessageRequest)(nil), "chat.NewMessageRequest")
	proto.RegisterType((*NewMessageReply)(nil), "chat.NewMessageReply")
	proto.RegisterType((*MessageReadedRequest)(nil), "chat.MessageReadedRequest")
	proto.RegisterType((*MessageReadedReply)(nil), "chat.MessageReadedReply")
	proto.RegisterType((*NewChatMemberRequest)(nil), "chat.NewChatMemberRequest")
	proto.RegisterType((*MessageAppendedRequest)(nil), "chat.MessageAppendedRequest")
	proto.RegisterType((*NewChatMemberReply)(nil), "chat.NewChatMemberReply")
	proto.RegisterType((*TotalCountUnreadRequest)(nil), "chat.TotalCountUnreadRequest")
	proto.RegisterType((*TotalCountUnreadReply)(nil), "chat.TotalCountUnreadReply")
	proto.RegisterType((*SetStatusMessage)(nil), "chat.SetStatusMessage")
	proto.RegisterEnum("chat.MemberRole", MemberRole_name, MemberRole_value)
	proto.RegisterEnum("chat.ErrorCode", ErrorCode_name, ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ChatService service

type ChatServiceClient interface {
	// creates new chat
	CreateChat(ctx context.Context, in *NewChatRequest, opts ...grpc.CallOption) (*ChatReply, error)
	// returns exists chat
	GetChats(ctx context.Context, in *ChatsRequest, opts ...grpc.CallOption) (*ChatsReply, error)
	// add users to the chat
	JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*ChatReply, error)
	// remove users from the chat
	LeaveChat(ctx context.Context, in *LeaveChatRequest, opts ...grpc.CallOption) (*ChatReply, error)
	// sends new message from the user to the chat
	SendNewMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error)
	// returns chat history
	GetChatHistory(ctx context.Context, in *ChatHistoryRequest, opts ...grpc.CallOption) (*ChatHistoryReply, error)
	// updated last message id for member
	MarkAsReaded(ctx context.Context, in *MarkAsReadedRequest, opts ...grpc.CallOption) (*MarkAsReadedReply, error)
	// returns total count of unread messages
	GetTotalCountUnread(ctx context.Context, in *TotalCountUnreadRequest, opts ...grpc.CallOption) (*TotalCountUnreadReply, error)
	// append message part
	AppendMessage(ctx context.Context, in *AppendMessageRequest, opts ...grpc.CallOption) (*AppendMessageReply, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) CreateChat(ctx context.Context, in *NewChatRequest, opts ...grpc.CallOption) (*ChatReply, error) {
	out := new(ChatReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/CreateChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChats(ctx context.Context, in *ChatsRequest, opts ...grpc.CallOption) (*ChatsReply, error) {
	out := new(ChatsReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/GetChats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*ChatReply, error) {
	out := new(ChatReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/JoinChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) LeaveChat(ctx context.Context, in *LeaveChatRequest, opts ...grpc.CallOption) (*ChatReply, error) {
	out := new(ChatReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/LeaveChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SendNewMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error) {
	out := new(SendMessageReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/SendNewMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChatHistory(ctx context.Context, in *ChatHistoryRequest, opts ...grpc.CallOption) (*ChatHistoryReply, error) {
	out := new(ChatHistoryReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/GetChatHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) MarkAsReaded(ctx context.Context, in *MarkAsReadedRequest, opts ...grpc.CallOption) (*MarkAsReadedReply, error) {
	out := new(MarkAsReadedReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/MarkAsReaded", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetTotalCountUnread(ctx context.Context, in *TotalCountUnreadRequest, opts ...grpc.CallOption) (*TotalCountUnreadReply, error) {
	out := new(TotalCountUnreadReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/GetTotalCountUnread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AppendMessage(ctx context.Context, in *AppendMessageRequest, opts ...grpc.CallOption) (*AppendMessageReply, error) {
	out := new(AppendMessageReply)
	err := grpc.Invoke(ctx, "/chat.ChatService/AppendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatService service

type ChatServiceServer interface {
	// creates new chat
	CreateChat(context.Context, *NewChatRequest) (*ChatReply, error)
	// returns exists chat
	GetChats(context.Context, *ChatsRequest) (*ChatsReply, error)
	// add users to the chat
	JoinChat(context.Context, *JoinChatRequest) (*ChatReply, error)
	// remove users from the chat
	LeaveChat(context.Context, *LeaveChatRequest) (*ChatReply, error)
	// sends new message from the user to the chat
	SendNewMessage(context.Context, *SendMessageRequest) (*SendMessageReply, error)
	// returns chat history
	GetChatHistory(context.Context, *ChatHistoryRequest) (*ChatHistoryReply, error)
	// updated last message id for member
	MarkAsReaded(context.Context, *MarkAsReadedRequest) (*MarkAsReadedReply, error)
	// returns total count of unread messages
	GetTotalCountUnread(context.Context, *TotalCountUnreadRequest) (*TotalCountUnreadReply, error)
	// append message part
	AppendMessage(context.Context, *AppendMessageRequest) (*AppendMessageReply, error)
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateChat(ctx, req.(*NewChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/GetChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChats(ctx, req.(*ChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_JoinChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).JoinChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/JoinChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).JoinChat(ctx, req.(*JoinChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_LeaveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).LeaveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/LeaveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).LeaveChat(ctx, req.(*LeaveChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SendNewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendNewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/SendNewMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendNewMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/GetChatHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChatHistory(ctx, req.(*ChatHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_MarkAsReaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsReadedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).MarkAsReaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/MarkAsReaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).MarkAsReaded(ctx, req.(*MarkAsReadedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetTotalCountUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalCountUnreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetTotalCountUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/GetTotalCountUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetTotalCountUnread(ctx, req.(*TotalCountUnreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AppendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AppendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/AppendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AppendMessage(ctx, req.(*AppendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _ChatService_CreateChat_Handler,
		},
		{
			MethodName: "GetChats",
			Handler:    _ChatService_GetChats_Handler,
		},
		{
			MethodName: "JoinChat",
			Handler:    _ChatService_JoinChat_Handler,
		},
		{
			MethodName: "LeaveChat",
			Handler:    _ChatService_LeaveChat_Handler,
		},
		{
			MethodName: "SendNewMessage",
			Handler:    _ChatService_SendNewMessage_Handler,
		},
		{
			MethodName: "GetChatHistory",
			Handler:    _ChatService_GetChatHistory_Handler,
		},
		{
			MethodName: "MarkAsReaded",
			Handler:    _ChatService_MarkAsReaded_Handler,
		},
		{
			MethodName: "GetTotalCountUnread",
			Handler:    _ChatService_GetTotalCountUnread_Handler,
		},
		{
			MethodName: "AppendMessage",
			Handler:    _ChatService_AppendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for Notifier service

type NotifierClient interface {
	// notifies about a new message in the chat
	NewMessage(ctx context.Context, in *NewMessageRequest, opts ...grpc.CallOption) (*NewMessageReply, error)
	// notifies about a message was read by user
	MessageReaded(ctx context.Context, in *MessageReadedRequest, opts ...grpc.CallOption) (*MessageReadedReply, error)
	// notifies about a new member in the chat
	NewChatMember(ctx context.Context, in *NewChatMemberRequest, opts ...grpc.CallOption) (*NewChatMemberReply, error)
}

type notifierClient struct {
	cc *grpc.ClientConn
}

func NewNotifierClient(cc *grpc.ClientConn) NotifierClient {
	return &notifierClient{cc}
}

func (c *notifierClient) NewMessage(ctx context.Context, in *NewMessageRequest, opts ...grpc.CallOption) (*NewMessageReply, error) {
	out := new(NewMessageReply)
	err := grpc.Invoke(ctx, "/chat.Notifier/NewMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierClient) MessageReaded(ctx context.Context, in *MessageReadedRequest, opts ...grpc.CallOption) (*MessageReadedReply, error) {
	out := new(MessageReadedReply)
	err := grpc.Invoke(ctx, "/chat.Notifier/MessageReaded", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifierClient) NewChatMember(ctx context.Context, in *NewChatMemberRequest, opts ...grpc.CallOption) (*NewChatMemberReply, error) {
	out := new(NewChatMemberReply)
	err := grpc.Invoke(ctx, "/chat.Notifier/NewChatMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notifier service

type NotifierServer interface {
	// notifies about a new message in the chat
	NewMessage(context.Context, *NewMessageRequest) (*NewMessageReply, error)
	// notifies about a message was read by user
	MessageReaded(context.Context, *MessageReadedRequest) (*MessageReadedReply, error)
	// notifies about a new member in the chat
	NewChatMember(context.Context, *NewChatMemberRequest) (*NewChatMemberReply, error)
}

func RegisterNotifierServer(s *grpc.Server, srv NotifierServer) {
	s.RegisterService(&_Notifier_serviceDesc, srv)
}

func _Notifier_NewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServer).NewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Notifier/NewMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServer).NewMessage(ctx, req.(*NewMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifier_MessageReaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReadedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServer).MessageReaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Notifier/MessageReaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServer).MessageReaded(ctx, req.(*MessageReadedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifier_NewChatMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewChatMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierServer).NewChatMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Notifier/NewChatMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierServer).NewChatMember(ctx, req.(*NewChatMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Notifier",
	HandlerType: (*NotifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewMessage",
			Handler:    _Notifier_NewMessage_Handler,
		},
		{
			MethodName: "MessageReaded",
			Handler:    _Notifier_MessageReaded_Handler,
		},
		{
			MethodName: "NewChatMember",
			Handler:    _Notifier_NewChatMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x57, 0xdf, 0x73, 0xdb, 0xc4,
	0x13, 0xaf, 0x1c, 0xf9, 0xd7, 0xfa, 0x67, 0xae, 0x6e, 0xe2, 0xba, 0xdf, 0x7e, 0x27, 0x08, 0x68,
	0x4b, 0x67, 0xc8, 0x30, 0xa6, 0x94, 0xe1, 0x85, 0x99, 0x90, 0xb8, 0x25, 0x10, 0xdb, 0x19, 0xc9,
	0x81, 0xf2, 0x52, 0xa1, 0xd8, 0xd7, 0x46, 0x43, 0x6c, 0x19, 0xe9, 0x12, 0x26, 0x6f, 0xfc, 0x37,
	0xbc, 0xf3, 0xc0, 0xdf, 0xc1, 0x13, 0x4f, 0xfc, 0x01, 0xfc, 0x19, 0xec, 0xdd, 0xe9, 0x64, 0x49,
	0x96, 0x13, 0xa7, 0xc3, 0x9b, 0x6f, 0x77, 0x6f, 0xf7, 0xb3, 0xfb, 0x39, 0xed, 0xae, 0x01, 0xc6,
	0x67, 0x0e, 0xdb, 0x9d, 0xfb, 0x1e, 0xf3, 0x88, 0xce, 0x7f, 0x1b, 0x9f, 0x40, 0x7d, 0x40, 0x7f,
	0xd9, 0xc7, 0x9f, 0x26, 0xfd, 0xf9, 0x82, 0x06, 0x8c, 0xfc, 0x1f, 0x84, 0xa6, 0xad, 0xed, 0x68,
	0x4f, 0x2a, 0x5d, 0xd8, 0x15, 0x57, 0x84, 0x81, 0xbc, 0x31, 0x80, 0xb2, 0x34, 0x9f, 0x9f, 0x5f,
	0xdd, 0x64, 0x4c, 0xde, 0x83, 0x3c, 0xf5, 0x7d, 0xcf, 0x6f, 0xe7, 0x84, 0x41, 0x45, 0x1a, 0xf4,
	0xb8, 0xc8, 0x94, 0x1a, 0x63, 0x17, 0x80, 0x5f, 0x08, 0xa4, 0xc3, 0x1d, 0xc8, 0x73, 0x93, 0x00,
	0x3d, 0x6e, 0xa4, 0x3c, 0x4a, 0x85, 0xf1, 0x39, 0x54, 0x43, 0x7b, 0x89, 0xb7, 0x0e, 0x39, 0x77,
	0x22, 0xcc, 0x75, 0x13, 0x7f, 0x91, 0x6d, 0x28, 0x5e, 0x04, 0xd4, 0xb7, 0x51, 0xc8, 0x83, 0xea,
	0x66, 0x81, 0x1f, 0x0f, 0x27, 0xc6, 0x29, 0x34, 0xbe, 0xf1, 0xdc, 0x59, 0x3c, 0xd7, 0xc7, 0xd0,
	0x18, 0x7b, 0xb3, 0x4b, 0xea, 0x07, 0x0e, 0x73, 0xbd, 0x99, 0x2d, 0x1c, 0xf1, 0x3b, 0xf5, 0xb8,
	0xf8, 0x70, 0x42, 0x1e, 0x41, 0x71, 0x4a, 0xa7, 0xa7, 0x28, 0x41, 0xa7, 0x1c, 0x58, 0x55, 0x02,
	0xeb, 0x0b, 0xa1, 0xa9, 0x94, 0xc6, 0x77, 0xd0, 0x3c, 0xa2, 0xce, 0x25, 0x7d, 0xa7, 0x20, 0xf7,
	0xa1, 0x14, 0x22, 0x97, 0x51, 0x74, 0xb3, 0x28, 0xa1, 0x07, 0xc6, 0x19, 0x10, 0x8b, 0xce, 0x26,
	0x7d, 0x1a, 0x04, 0xce, 0x5b, 0x7a, 0x6b, 0xcf, 0x1f, 0x41, 0x69, 0x2a, 0xaf, 0x2a, 0xfc, 0x35,
	0x85, 0x5f, 0x3a, 0x8c, 0xd4, 0xc6, 0xaf, 0x1a, 0x34, 0x13, 0xa1, 0xfe, 0x1b, 0x9a, 0x13, 0x10,
	0x36, 0xae, 0x87, 0xf0, 0xa7, 0x06, 0x3a, 0x77, 0x1e, 0x51, 0xab, 0x85, 0xd4, 0xae, 0xc9, 0x02,
	0x21, 0xa0, 0xcf, 0x9c, 0x29, 0xc5, 0x38, 0xda, 0x93, 0xb2, 0x29, 0x7e, 0x23, 0xc4, 0xea, 0xc5,
	0xcc, 0xa7, 0xce, 0xc4, 0x1e, 0x7b, 0x17, 0x33, 0xd6, 0xd6, 0x85, 0xd7, 0x8a, 0x94, 0xed, 0x73,
	0x11, 0x79, 0x06, 0x75, 0x9f, 0x8e, 0xe9, 0x8c, 0xd9, 0x21, 0x94, 0x76, 0x5e, 0xa4, 0x93, 0x02,
	0x5a, 0x93, 0x46, 0xe1, 0x91, 0xbc, 0x0f, 0xb5, 0x89, 0x8b, 0x22, 0x66, 0xb3, 0x33, 0xee, 0xab,
	0x5d, 0x10, 0x51, 0xab, 0x52, 0x38, 0x12, 0x32, 0xe3, 0x0f, 0x0d, 0x0a, 0x12, 0xe5, 0x52, 0x52,
	0xab, 0xde, 0x2b, 0xf9, 0x00, 0x74, 0xdf, 0x3b, 0x97, 0x59, 0xd4, 0xbb, 0xcd, 0x44, 0xaa, 0x28,
	0x37, 0x85, 0x36, 0xca, 0x55, 0x8f, 0xe5, 0xfa, 0x08, 0x1a, 0xe7, 0x4e, 0x10, 0xa5, 0xc1, 0x5d,
	0xe7, 0x85, 0xeb, 0x1a, 0x17, 0x87, 0xc0, 0x31, 0x02, 0xd6, 0xc4, 0x9d, 0x05, 0xcc, 0x79, 0xeb,
	0x3b, 0x53, 0x6e, 0x54, 0x90, 0x35, 0x89, 0x64, 0xf8, 0xd1, 0xbc, 0x80, 0xbc, 0xa0, 0x11, 0xd3,
	0xd4, 0xc7, 0xde, 0x84, 0x0a, 0xe0, 0xf5, 0x6e, 0x23, 0xc6, 0xf0, 0x3e, 0x8a, 0x4d, 0xa1, 0x24,
	0x6d, 0x4e, 0x90, 0x2c, 0x5d, 0x4e, 0xe0, 0x51, 0x47, 0xe3, 0x1f, 0x0d, 0x8a, 0xaa, 0x62, 0x6b,
	0x3f, 0xdb, 0x95, 0xa5, 0x79, 0x0c, 0xf9, 0xb9, 0xe3, 0x33, 0xf5, 0x92, 0x36, 0x13, 0x04, 0x1d,
	0xa3, 0xc6, 0x94, 0x7a, 0xf2, 0x10, 0x5b, 0x1e, 0x12, 0xc0, 0xe8, 0xc4, 0x76, 0x24, 0xe7, 0x1b,
	0x66, 0x39, 0x94, 0xec, 0xa9, 0x07, 0x96, 0x8f, 0xb8, 0xd8, 0x01, 0x9d, 0x47, 0x10, 0x85, 0x48,
	0xbf, 0x2e, 0xa1, 0x59, 0x2a, 0x59, 0x51, 0xa4, 0x99, 0x28, 0xd9, 0x18, 0x2a, 0x31, 0x24, 0xbc,
	0x26, 0x98, 0x16, 0xc3, 0x17, 0x23, 0xb2, 0xc4, 0x9a, 0x84, 0x47, 0xf2, 0x00, 0xca, 0x53, 0x77,
	0x4a, 0x6d, 0x76, 0x35, 0x57, 0xf5, 0x2a, 0x71, 0xc1, 0x08, 0xcf, 0x02, 0xb9, 0xb4, 0xe3, 0x61,
	0xe4, 0x4b, 0x2e, 0x87, 0x12, 0x0c, 0xf2, 0xbb, 0x06, 0x84, 0x7f, 0x23, 0x5f, 0xbb, 0x01, 0xf3,
	0xfc, 0x2b, 0xd5, 0x11, 0x90, 0xf9, 0x37, 0xbe, 0x37, 0x8d, 0x33, 0x2f, 0x4b, 0x5b, 0xe3, 0xe2,
	0x05, 0xf3, 0x19, 0x14, 0xe4, 0x32, 0x29, 0x68, 0x41, 0xfe, 0xdc, 0x9d, 0xba, 0x4c, 0x20, 0xd0,
	0x4d, 0x79, 0x88, 0x13, 0xa3, 0x27, 0x88, 0xf9, 0x1f, 0x94, 0xe5, 0xbb, 0xc7, 0xdb, 0xa2, 0xae,
	0x25, 0x73, 0x21, 0x30, 0x7e, 0xc3, 0xde, 0x92, 0x00, 0xcd, 0x7b, 0x4b, 0xbc, 0x31, 0x68, 0xd7,
	0x36, 0x86, 0xa8, 0x0d, 0xe5, 0x56, 0xb4, 0xa1, 0x0f, 0xa1, 0xce, 0x3c, 0xe6, 0x9c, 0xdb, 0xb1,
	0x4e, 0x23, 0x92, 0x17, 0xd2, 0xbe, 0x72, 0x13, 0x75, 0x2b, 0x7d, 0xe5, 0x50, 0xba, 0x84, 0xbb,
	0x7d, 0xc7, 0xff, 0x69, 0x0f, 0xa7, 0x8c, 0x33, 0xa1, 0x93, 0x5b, 0x37, 0xdc, 0x95, 0x2f, 0x17,
	0x69, 0x8d, 0x71, 0x23, 0xe1, 0x95, 0xa7, 0x8a, 0x17, 0xe3, 0x39, 0x6c, 0x26, 0xe3, 0xf2, 0x0a,
	0x45, 0x78, 0xb5, 0x95, 0x78, 0x5f, 0x43, 0x6b, 0x6f, 0x3e, 0x5f, 0x9e, 0x10, 0xc9, 0x70, 0x5a,
	0x2a, 0xdc, 0xe2, 0x3b, 0xca, 0x5d, 0xff, 0x1d, 0x19, 0x3f, 0x02, 0x49, 0xf9, 0x5f, 0x0f, 0x18,
	0x46, 0x48, 0x74, 0x84, 0x25, 0x72, 0xa3, 0x06, 0xf1, 0x1a, 0x36, 0x71, 0x11, 0x49, 0xc1, 0xbf,
	0x69, 0xee, 0xdc, 0x62, 0xae, 0x6d, 0x42, 0x23, 0xee, 0x1f, 0xe1, 0x1b, 0x33, 0x68, 0x45, 0xe7,
	0x38, 0xcb, 0x37, 0x45, 0x7d, 0x57, 0x72, 0x5b, 0x40, 0x52, 0xf1, 0x38, 0x8a, 0x57, 0xd0, 0x0a,
	0x37, 0xb0, 0xb0, 0xd1, 0xac, 0x89, 0x42, 0xf5, 0xaa, 0xdc, 0xaa, 0x5e, 0x65, 0x38, 0xb0, 0x15,
	0xc6, 0x93, 0xdc, 0xad, 0x9f, 0xe1, 0xda, 0xac, 0x61, 0x4a, 0x29, 0xf0, 0x3c, 0xa5, 0x2e, 0x6c,
	0x8f, 0xf8, 0x17, 0x27, 0xc6, 0xea, 0x89, 0x98, 0xb0, 0x2a, 0x72, 0xac, 0x76, 0x5a, 0x62, 0x3b,
	0xfb, 0x18, 0xee, 0x2d, 0xdf, 0xe1, 0x8f, 0x0c, 0x3b, 0x90, 0x9c, 0xd8, 0xd2, 0x5e, 0x1e, 0x0c,
	0x8b, 0x6f, 0x29, 0xcc, 0x62, 0x0e, 0xbb, 0x08, 0x6e, 0x3d, 0x57, 0xb6, 0xa0, 0x10, 0x88, 0x9b,
	0x61, 0xd7, 0x0d, 0x4f, 0x4f, 0x6d, 0x80, 0xc5, 0x7c, 0x25, 0x15, 0x28, 0x9e, 0x0c, 0xbe, 0x1d,
	0x0c, 0xbf, 0x1f, 0x34, 0xef, 0x90, 0x2a, 0x94, 0xf6, 0x4f, 0xac, 0xd1, 0xb0, 0xdf, 0x33, 0x9b,
	0x1a, 0x3f, 0x59, 0x27, 0xc7, 0xc7, 0x47, 0x87, 0x78, 0xca, 0x11, 0x80, 0x82, 0xd5, 0x3b, 0x3a,
	0xc2, 0xdf, 0x1b, 0xa4, 0x09, 0x55, 0xd4, 0xf4, 0x4c, 0x3b, 0x94, 0xe8, 0x42, 0xfb, 0x83, 0x35,
	0xea, 0xf5, 0x9b, 0xf9, 0xa7, 0x5f, 0x40, 0x39, 0x1a, 0x99, 0xa4, 0x06, 0xe5, 0xc1, 0xd0, 0xee,
	0x99, 0xe6, 0xd0, 0xb4, 0x30, 0x42, 0x1d, 0x60, 0x30, 0x1c, 0xd9, 0xbd, 0x57, 0x87, 0xd6, 0xc8,
	0xc2, 0x18, 0xa8, 0x7e, 0x31, 0x34, 0xbf, 0x3a, 0x3c, 0x38, 0xe8, 0x0d, 0x9a, 0xb9, 0xee, 0x5f,
	0x3a, 0x54, 0x78, 0x9d, 0x2d, 0xea, 0x5f, 0xba, 0x63, 0x4a, 0x3e, 0xc3, 0xb5, 0x59, 0xcc, 0x31,
	0xb1, 0x29, 0xb5, 0x24, 0x3f, 0xc9, 0x55, 0xbe, 0xd3, 0x88, 0x11, 0x2b, 0x88, 0xb9, 0x43, 0xba,
	0x50, 0x7a, 0x49, 0x99, 0x58, 0xa0, 0x09, 0x59, 0xa8, 0xd5, 0x36, 0xdd, 0x69, 0x26, 0x64, 0xf2,
	0xce, 0x33, 0x28, 0xa9, 0xc5, 0x99, 0xdc, 0x93, 0xfa, 0xd4, 0x22, 0x9d, 0x15, 0xe9, 0x39, 0x94,
	0xa3, 0x55, 0x98, 0x6c, 0x49, 0x7d, 0x7a, 0x37, 0xce, 0xba, 0x77, 0x00, 0x75, 0xbe, 0x7f, 0x2e,
	0x3e, 0x56, 0xd2, 0x96, 0x46, 0xcb, 0x0b, 0x70, 0x67, 0x2b, 0x43, 0x13, 0x79, 0x09, 0xf3, 0x0c,
	0x87, 0x8d, 0xf2, 0xb2, 0x3c, 0x34, 0x95, 0x97, 0xf4, 0x64, 0x12, 0x5e, 0xaa, 0xf1, 0x76, 0x4c,
	0xee, 0x87, 0x9f, 0xc1, 0xf2, 0x68, 0xe8, 0x6c, 0x67, 0xa9, 0xa4, 0x17, 0x0b, 0xee, 0x22, 0x96,
	0xf4, 0xeb, 0x26, 0x0f, 0xe5, 0x8d, 0x15, 0x5f, 0x4a, 0xe7, 0xc1, 0x2a, 0xb5, 0x74, 0xfa, 0x12,
	0x6a, 0x89, 0x8e, 0x4c, 0x3a, 0xd2, 0x3e, 0x6b, 0x0c, 0x74, 0xda, 0x99, 0x3a, 0xe1, 0xa8, 0xfb,
	0xb7, 0x06, 0xa5, 0x81, 0xc7, 0xdc, 0x37, 0x2e, 0xae, 0x37, 0x5f, 0xe2, 0x23, 0x5c, 0x14, 0x7e,
	0x3b, 0x7a, 0x55, 0x29, 0x7f, 0xf7, 0x96, 0x15, 0x11, 0xaa, 0x44, 0x8b, 0x53, 0xa8, 0xb2, 0xfa,
	0xac, 0x42, 0x95, 0xd1, 0x13, 0x85, 0xa3, 0x44, 0x63, 0x51, 0x8e, 0xb2, 0x5a, 0xa5, 0x72, 0x94,
	0xd1, 0x89, 0xee, 0x9c, 0x16, 0xc4, 0xbf, 0xdd, 0x4f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x6c,
	0x27, 0x8a, 0xd9, 0xfb, 0x0e, 0x00, 0x00,
}
