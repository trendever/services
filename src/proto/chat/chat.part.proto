
service ChatService {
    //creates new chat
    rpc CreateChat(NewChatRequest) returns (ChatReply) {}
    //returns exists chat
    rpc GetChats(ChatsRequest) returns (ChatsReply) {}
    //add users to the chat
    rpc JoinChat (JoinChatRequest) returns (ChatReply) {}
    //remove users from the chat
    rpc LeaveChat (LeaveChatRequest) returns (ChatReply) {}
    //sends new message from the user to the chat
    rpc SendNewMessage(SendMessageRequest) returns (SendMessageReply) {}
    //returns chat history
    rpc GetChatHistory(ChatHistoryRequest) returns (ChatHistoryReply) {}
    //updated last message id for member
    rpc MarkAsReaded(MarkAsReadedRequest) returns (MarkAsReadedReply){}
    //returns total count of unread messages
    rpc GetTotalCountUnread(TotalCountUnreadRequest) returns (TotalCountUnreadReply){}
    //append message part
    rpc AppendMessage(AppendMessageRequest) returns (AppendMessageReply){}
    rpc EnableSync(EnableSyncRequest) returns (EnableSyncReply) {}
}

service Notifier {
    //notifies about a new message in the chat
    rpc NewMessage(NewMessageRequest) returns (NewMessageReply){}
    //notifies about a message was read by user
    rpc MessageReaded(MessageReadedRequest) returns (MessageReadedReply){}
    //notifies about a new member in the chat
    rpc NewChatMember(NewChatMemberRequest) returns (NewChatMemberReply){}
}

message NewChatRequest {
    Chat chat = 1;
    // instagram id of supplier
    uint64 primary_instagram = 2;
    bool enable_sync = 3;
}

message ChatReply {
    Chat chat = 1;
    Error error = 2;
}

message ChatsReply {
    repeated Chat chats = 1;
}

message ChatsRequest {
    repeated uint64 id = 1;
    uint64 user_id = 2;
}

message JoinChatRequest {
    uint64 conversation_id = 1;
    repeated Member members = 2;
}

message LeaveChatRequest {
    uint64 conversation_id = 1;
    repeated uint64 user_ids = 2;
}

message SendMessageRequest {
    uint64 conversation_id = 1;
    repeated Message messages = 2;
}

message SendMessageReply {
    Chat chat = 1;
    Error error = 2;
    repeated Message messages = 3;
}

enum SyncStatus {
    // sync disabled
    NONE = 0;
    // request was sended, but there is no responce yet
    PENDING = 1;
    SYNCED = 2;
    // sync was disabled after error
    ERROR = 3;
    // old direct thread is attached to another chat now
    // new thread will be created after next message will be send hire
    DETACHED = 4;
}

message Chat {
    uint64 id = 1;
    repeated Member members = 2;
    string name = 3;
    uint64 unread_count = 4;
    Message recent_message = 5;
    string direct_thread = 6;
    string caption = 8;
    SyncStatus sync_status = 9;
}

message Member {
    uint64 id = 1;
    uint64 user_id = 2;
    MemberRole role = 3;
    //display name for the member
    string name = 4;
    uint64 last_message_id = 5;

    uint64 instagram_id = 6;
}

enum MemberRole {
    UNKNOWN = 0;
    CUSTOMER = 1;
    SUPPLIER = 2;
    SELLER = 3;
    SUPER_SELLER = 4;
    SYSTEM = 5;
}

message Error {
    ErrorCode code = 1;
    string message = 2;
}

enum ErrorCode {
    NO_ERRORS = 0;
    NOT_EXISTS = 1;
    FORBIDDEN = 2;
}

message Message {
    uint64 conversation_id = 1;
    uint64 user_id = 2;
    repeated MessagePart parts = 3;
    int64 created_at = 4;
    uint64 id = 5;
    Member user = 6;
    SyncStatus sync_status = 8;
}

message MessagePart {
    string content = 1;
    string mime_type = 2;
    string content_id = 3;
}

message ChatHistoryRequest {
    //from_message_id start message_id for query. Set 0 for get entire history
    uint64 from_message_id = 1;
    uint64 conversation_id = 2;
    uint64 limit = 3;
    //We must know, has user access to the chat or not
    uint64 user_id = 4;
    //true - asc, false - desc
    bool direction = 5;
}

message ChatHistoryReply {
    repeated Message messages = 1;
    Chat chat = 2;
    uint64 total_messages = 3;
    Error error = 4;

}

message MarkAsReadedRequest {
    uint64 conversation_id = 1;
    uint64 user_id = 2;
    uint64 message_id = 3;
}

message MarkAsReadedReply {
    Error error = 1;
}

message AppendMessageRequest {
    uint64 message_id = 1;
    repeated MessagePart parts = 2;
}

message AppendMessageReply {
    Error error = 1;
    Message message = 2;
}

message NewMessageRequest {
    Chat chat = 1;
    repeated Message messages = 2;
}

message NewMessageReply {

}

message MessageReadedRequest {
    Chat chat = 1;
    uint64 user_id = 2;
    uint64 message_id = 3;
}

message MessageReadedReply {

}

message NewChatMemberRequest {
    Chat chat = 1;
    Member user = 2;

}

message MessageAppendedRequest{
  Chat chat = 1;
  Message message =2;
}

message NewChatMemberReply {
}

message TotalCountUnreadRequest {
    uint64 user_id = 1;
}

message TotalCountUnreadReply {
    uint64 count = 1;
}

message SetStatusMessage {
    uint64 conversation_id = 1;
    string status = 2;
}

message EnableSyncRequest {
    uint64 chat_id = 1;
    // if not zero changes primary instagram
    uint64 primary_instagram = 2;
    // if not empty change current related thread
    string thread_id = 3;
    // create new thread even if chat already has one
    bool force_new_thread = 4;
}

message EnableSyncReply {
    string error = 1;
}
