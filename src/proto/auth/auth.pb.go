// Code generated by protoc-gen-go.
// source: auth.proto
// DO NOT EDIT!

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	auth.proto

It has these top-level messages:
	NewUserRequest
	FakeUserRequest
	UserReply
	LoginRequest
	LoginReply
	SmsPasswordRequest
	SmsPasswordReply
	TokenDataRequest
	TokenDataReply
	Token
	NewTokenRequest
	NewTokenReply
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrorCodes int32

const (
	ErrorCodes_NO_ERRORS              ErrorCodes = 0
	ErrorCodes_USER_NOT_EXISTS        ErrorCodes = 1
	ErrorCodes_USER_ALREADY_EXISTS    ErrorCodes = 2
	ErrorCodes_WRONG_CREDENTIALS      ErrorCodes = 3
	ErrorCodes_WRONG_TOKEN_DATA       ErrorCodes = 4
	ErrorCodes_EXPIRED_TOKEN_DATA     ErrorCodes = 5
	ErrorCodes_INCORRECT_PHONE_FORMAT ErrorCodes = 6
)

var ErrorCodes_name = map[int32]string{
	0: "NO_ERRORS",
	1: "USER_NOT_EXISTS",
	2: "USER_ALREADY_EXISTS",
	3: "WRONG_CREDENTIALS",
	4: "WRONG_TOKEN_DATA",
	5: "EXPIRED_TOKEN_DATA",
	6: "INCORRECT_PHONE_FORMAT",
}
var ErrorCodes_value = map[string]int32{
	"NO_ERRORS":              0,
	"USER_NOT_EXISTS":        1,
	"USER_ALREADY_EXISTS":    2,
	"WRONG_CREDENTIALS":      3,
	"WRONG_TOKEN_DATA":       4,
	"EXPIRED_TOKEN_DATA":     5,
	"INCORRECT_PHONE_FORMAT": 6,
}

func (x ErrorCodes) String() string {
	return proto.EnumName(ErrorCodes_name, int32(x))
}
func (ErrorCodes) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NewUserRequest struct {
	PhoneNumber       string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	InstagramUsername string `protobuf:"bytes,2,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	Username          string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	// country code, by default RU
	Country string `protobuf:"bytes,4,opt,name=country" json:"country,omitempty"`
}

func (m *NewUserRequest) Reset()                    { *m = NewUserRequest{} }
func (m *NewUserRequest) String() string            { return proto.CompactTextString(m) }
func (*NewUserRequest) ProtoMessage()               {}
func (*NewUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FakeUserRequest struct {
}

func (m *FakeUserRequest) Reset()                    { *m = FakeUserRequest{} }
func (m *FakeUserRequest) String() string            { return proto.CompactTextString(m) }
func (*FakeUserRequest) ProtoMessage()               {}
func (*FakeUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type UserReply struct {
	PhoneNumber       string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	InstagramUsername string `protobuf:"bytes,2,opt,name=instagram_username,json=instagramUsername" json:"instagram_username,omitempty"`
	Username          string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	// User ID, if user was created
	Id           uint64     `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
	ErrorCode    ErrorCodes `protobuf:"varint,5,opt,name=error_code,json=errorCode,enum=auth.ErrorCodes" json:"error_code,omitempty"`
	ErrorMessage string     `protobuf:"bytes,6,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (m *UserReply) Reset()                    { *m = UserReply{} }
func (m *UserReply) String() string            { return proto.CompactTextString(m) }
func (*UserReply) ProtoMessage()               {}
func (*UserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type LoginRequest struct {
	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	Username    string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password    string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type LoginReply struct {
	Token        string     `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	ErrorCode    ErrorCodes `protobuf:"varint,2,opt,name=error_code,json=errorCode,enum=auth.ErrorCodes" json:"error_code,omitempty"`
	ErrorMessage string     `protobuf:"bytes,3,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SmsPasswordRequest struct {
	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
}

func (m *SmsPasswordRequest) Reset()                    { *m = SmsPasswordRequest{} }
func (m *SmsPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*SmsPasswordRequest) ProtoMessage()               {}
func (*SmsPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SmsPasswordReply struct {
	Status       string     `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	ErrorCode    ErrorCodes `protobuf:"varint,2,opt,name=error_code,json=errorCode,enum=auth.ErrorCodes" json:"error_code,omitempty"`
	ErrorMessage string     `protobuf:"bytes,3,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (m *SmsPasswordReply) Reset()                    { *m = SmsPasswordReply{} }
func (m *SmsPasswordReply) String() string            { return proto.CompactTextString(m) }
func (*SmsPasswordReply) ProtoMessage()               {}
func (*SmsPasswordReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type TokenDataRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *TokenDataRequest) Reset()                    { *m = TokenDataRequest{} }
func (m *TokenDataRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenDataRequest) ProtoMessage()               {}
func (*TokenDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type TokenDataReply struct {
	Token     *Token     `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,enum=auth.ErrorCodes" json:"errorCode,omitempty"`
}

func (m *TokenDataReply) Reset()                    { *m = TokenDataReply{} }
func (m *TokenDataReply) String() string            { return proto.CompactTextString(m) }
func (*TokenDataReply) ProtoMessage()               {}
func (*TokenDataReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TokenDataReply) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type Token struct {
	UID uint64 `protobuf:"varint,1,opt,name=UID" json:"UID,omitempty"`
	Exp int64  `protobuf:"varint,2,opt,name=exp" json:"exp,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type NewTokenRequest struct {
	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	UserId      uint64 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *NewTokenRequest) Reset()                    { *m = NewTokenRequest{} }
func (m *NewTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*NewTokenRequest) ProtoMessage()               {}
func (*NewTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type NewTokenReply struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *NewTokenReply) Reset()                    { *m = NewTokenReply{} }
func (m *NewTokenReply) String() string            { return proto.CompactTextString(m) }
func (*NewTokenReply) ProtoMessage()               {}
func (*NewTokenReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func init() {
	proto.RegisterType((*NewUserRequest)(nil), "auth.NewUserRequest")
	proto.RegisterType((*FakeUserRequest)(nil), "auth.FakeUserRequest")
	proto.RegisterType((*UserReply)(nil), "auth.UserReply")
	proto.RegisterType((*LoginRequest)(nil), "auth.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "auth.LoginReply")
	proto.RegisterType((*SmsPasswordRequest)(nil), "auth.SmsPasswordRequest")
	proto.RegisterType((*SmsPasswordReply)(nil), "auth.SmsPasswordReply")
	proto.RegisterType((*TokenDataRequest)(nil), "auth.TokenDataRequest")
	proto.RegisterType((*TokenDataReply)(nil), "auth.TokenDataReply")
	proto.RegisterType((*Token)(nil), "auth.Token")
	proto.RegisterType((*NewTokenRequest)(nil), "auth.NewTokenRequest")
	proto.RegisterType((*NewTokenReply)(nil), "auth.NewTokenReply")
	proto.RegisterEnum("auth.ErrorCodes", ErrorCodes_name, ErrorCodes_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for AuthService service

type AuthServiceClient interface {
	// creates new user
	RegisterNewUser(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*UserReply, error)
	// creates fake user
	RegisterFakeUser(ctx context.Context, in *FakeUserRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// login user and return JWT token
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// sends password to user as sms message
	SendNewSmsPassword(ctx context.Context, in *SmsPasswordRequest, opts ...grpc.CallOption) (*SmsPasswordReply, error)
	GetTokenData(ctx context.Context, in *TokenDataRequest, opts ...grpc.CallOption) (*TokenDataReply, error)
	// returns new valid token for user
	GetNewToken(ctx context.Context, in *NewTokenRequest, opts ...grpc.CallOption) (*NewTokenReply, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) RegisterNewUser(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := grpc.Invoke(ctx, "/auth.AuthService/RegisterNewUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RegisterFakeUser(ctx context.Context, in *FakeUserRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/auth.AuthService/RegisterFakeUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/auth.AuthService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SendNewSmsPassword(ctx context.Context, in *SmsPasswordRequest, opts ...grpc.CallOption) (*SmsPasswordReply, error) {
	out := new(SmsPasswordReply)
	err := grpc.Invoke(ctx, "/auth.AuthService/SendNewSmsPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetTokenData(ctx context.Context, in *TokenDataRequest, opts ...grpc.CallOption) (*TokenDataReply, error) {
	out := new(TokenDataReply)
	err := grpc.Invoke(ctx, "/auth.AuthService/GetTokenData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetNewToken(ctx context.Context, in *NewTokenRequest, opts ...grpc.CallOption) (*NewTokenReply, error) {
	out := new(NewTokenReply)
	err := grpc.Invoke(ctx, "/auth.AuthService/GetNewToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceServer interface {
	// creates new user
	RegisterNewUser(context.Context, *NewUserRequest) (*UserReply, error)
	// creates fake user
	RegisterFakeUser(context.Context, *FakeUserRequest) (*LoginReply, error)
	// login user and return JWT token
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	// sends password to user as sms message
	SendNewSmsPassword(context.Context, *SmsPasswordRequest) (*SmsPasswordReply, error)
	GetTokenData(context.Context, *TokenDataRequest) (*TokenDataReply, error)
	// returns new valid token for user
	GetNewToken(context.Context, *NewTokenRequest) (*NewTokenReply, error)
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_RegisterNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/RegisterNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterNewUser(ctx, req.(*NewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RegisterFakeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FakeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterFakeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/RegisterFakeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterFakeUser(ctx, req.(*FakeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SendNewSmsPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SendNewSmsPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/SendNewSmsPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SendNewSmsPassword(ctx, req.(*SmsPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetTokenData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetTokenData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetTokenData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetTokenData(ctx, req.(*TokenDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetNewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetNewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetNewToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetNewToken(ctx, req.(*NewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNewUser",
			Handler:    _AuthService_RegisterNewUser_Handler,
		},
		{
			MethodName: "RegisterFakeUser",
			Handler:    _AuthService_RegisterFakeUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "SendNewSmsPassword",
			Handler:    _AuthService_SendNewSmsPassword_Handler,
		},
		{
			MethodName: "GetTokenData",
			Handler:    _AuthService_GetTokenData_Handler,
		},
		{
			MethodName: "GetNewToken",
			Handler:    _AuthService_GetNewToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x55, 0xdd, 0x4e, 0xdb, 0x4c,
	0x10, 0xc5, 0x76, 0x12, 0xbe, 0x4c, 0x42, 0x62, 0x16, 0xc8, 0x67, 0xf9, 0xaa, 0x75, 0x55, 0x09,
	0xb5, 0x2a, 0x48, 0xf4, 0xa2, 0x52, 0xab, 0x56, 0xb2, 0x12, 0x03, 0x56, 0xc1, 0x46, 0x6b, 0x47,
	0xa5, 0x57, 0x96, 0x49, 0x56, 0xc1, 0xa2, 0xb1, 0x53, 0xff, 0x14, 0xb8, 0xe3, 0x31, 0xfa, 0x0c,
	0x7d, 0xa9, 0xbe, 0x4a, 0xd7, 0xbb, 0x76, 0x62, 0x02, 0x48, 0xb4, 0x52, 0x7b, 0xb7, 0x73, 0x66,
	0x66, 0xe7, 0xcc, 0xf8, 0xcc, 0x1a, 0xc0, 0xcf, 0xd2, 0xf3, 0x9d, 0x59, 0x1c, 0xa5, 0x11, 0xaa,
	0xe5, 0x67, 0xed, 0xbb, 0x00, 0x1d, 0x8b, 0x5c, 0x0e, 0x13, 0x12, 0x63, 0xf2, 0x35, 0x23, 0x49,
	0x8a, 0x9e, 0x42, 0x7b, 0x76, 0x1e, 0x85, 0xc4, 0x0b, 0xb3, 0xe9, 0x19, 0x89, 0x15, 0xe1, 0x89,
	0xb0, 0xdd, 0xc4, 0x2d, 0x86, 0x59, 0x0c, 0x42, 0xaf, 0x00, 0x05, 0x61, 0x92, 0xfa, 0x93, 0xd8,
	0x9f, 0x7a, 0x19, 0xcd, 0x0d, 0xfd, 0x29, 0x51, 0x44, 0x16, 0xb8, 0x3e, 0xf7, 0x0c, 0x0b, 0x07,
	0x52, 0xe1, 0xbf, 0x79, 0x90, 0xc4, 0x82, 0xe6, 0x36, 0x52, 0x60, 0x75, 0x14, 0x65, 0x61, 0x1a,
	0x5f, 0x2b, 0x35, 0xe6, 0x2a, 0x4d, 0x6d, 0x1d, 0xba, 0xfb, 0xfe, 0x05, 0xa9, 0x50, 0xd3, 0x7e,
	0x0a, 0xd0, 0xe4, 0xf6, 0xec, 0xcb, 0xf5, 0x3f, 0x26, 0xda, 0x01, 0x31, 0x18, 0x33, 0x8e, 0x35,
	0x4c, 0x4f, 0x68, 0x17, 0x80, 0xc4, 0x71, 0x14, 0x7b, 0xa3, 0x68, 0x4c, 0x94, 0x3a, 0xc5, 0x3b,
	0x7b, 0xf2, 0x0e, 0x1b, 0xb0, 0x91, 0xe3, 0x7d, 0x0a, 0x27, 0xb8, 0x49, 0xca, 0x33, 0x7a, 0x06,
	0x6b, 0x3c, 0x61, 0x4a, 0x92, 0xc4, 0x9f, 0x10, 0xa5, 0xc1, 0x2a, 0xb4, 0x19, 0x78, 0xcc, 0x31,
	0x2d, 0x80, 0xf6, 0x51, 0x34, 0x09, 0xc2, 0xdf, 0xf8, 0x18, 0x55, 0xd2, 0xe2, 0x12, 0x69, 0xea,
	0x9b, 0xf9, 0x49, 0x72, 0x19, 0xc5, 0xe3, 0xb2, 0xa1, 0xd2, 0xd6, 0xae, 0x00, 0x8a, 0x52, 0xf9,
	0x30, 0x37, 0xa1, 0x9e, 0x46, 0x17, 0x24, 0x2c, 0x2a, 0x70, 0x63, 0xa9, 0x49, 0xf1, 0x0f, 0x9a,
	0x94, 0xee, 0x69, 0xf2, 0x0d, 0x20, 0x67, 0x9a, 0x9c, 0x14, 0x44, 0x1e, 0xdf, 0xaa, 0x76, 0x23,
	0x80, 0x7c, 0x2b, 0x33, 0x67, 0xde, 0x83, 0x06, 0xfd, 0x8e, 0x69, 0x96, 0x14, 0x19, 0x85, 0xf5,
	0x97, 0xb8, 0x6f, 0x83, 0xec, 0xe6, 0xa3, 0x19, 0xf8, 0xa9, 0x5f, 0x32, 0xbf, 0x77, 0x76, 0xda,
	0x08, 0x3a, 0x95, 0x48, 0x2e, 0xd8, 0x4a, 0x5c, 0x6b, 0xaf, 0xc5, 0xc9, 0xb0, 0xa0, 0x72, 0xe0,
	0x3b, 0xb0, 0x20, 0xf4, 0x08, 0xce, 0xda, 0x4b, 0xa8, 0xb3, 0x7c, 0x24, 0x83, 0x34, 0x34, 0x07,
	0xec, 0xe6, 0x1a, 0xce, 0x8f, 0x39, 0x42, 0xae, 0x66, 0xec, 0x12, 0x09, 0xe7, 0x47, 0xed, 0x18,
	0xba, 0x74, 0xd7, 0x79, 0xbd, 0xc7, 0xeb, 0xeb, 0x7f, 0x58, 0xcd, 0xf5, 0xe4, 0x51, 0xf5, 0x8b,
	0xec, 0xf6, 0x46, 0x6e, 0x9a, 0x63, 0xed, 0x39, 0xac, 0x2d, 0xae, 0x7b, 0x50, 0x43, 0x2f, 0x7e,
	0x08, 0x00, 0x0b, 0xf2, 0x68, 0x0d, 0x9a, 0x96, 0xed, 0x19, 0x18, 0xdb, 0xd8, 0x91, 0x57, 0xd0,
	0x06, 0x74, 0x87, 0x8e, 0x81, 0x3d, 0xcb, 0x76, 0x3d, 0xe3, 0xd4, 0x74, 0x5c, 0x47, 0x16, 0x68,
	0xc9, 0x0d, 0x06, 0xea, 0x47, 0xd8, 0xd0, 0x07, 0x9f, 0x4b, 0x87, 0x88, 0xb6, 0x60, 0xfd, 0x13,
	0xb6, 0xad, 0x03, 0xaf, 0x8f, 0x8d, 0x81, 0x61, 0xb9, 0xa6, 0x7e, 0xe4, 0xc8, 0x12, 0x2d, 0x2c,
	0x73, 0xd8, 0xb5, 0x3f, 0x1a, 0x96, 0x37, 0xd0, 0x5d, 0x5d, 0xae, 0x51, 0x61, 0x20, 0xe3, 0xf4,
	0xc4, 0xa4, 0x91, 0x55, 0xbc, 0x4e, 0x97, 0xa2, 0x67, 0x5a, 0x7d, 0x1b, 0x63, 0xa3, 0xef, 0x7a,
	0x27, 0x87, 0xb6, 0x65, 0x78, 0xfb, 0x36, 0x3e, 0xd6, 0x5d, 0xb9, 0xb1, 0x77, 0x23, 0x41, 0x4b,
	0xa7, 0xe3, 0x76, 0x48, 0xfc, 0x2d, 0x18, 0x11, 0xf4, 0x16, 0xba, 0x98, 0x4c, 0x82, 0x24, 0x25,
	0x71, 0xf1, 0x4c, 0xa2, 0x4d, 0xfe, 0x3d, 0x6e, 0xbf, 0x9a, 0x6a, 0x97, 0xa3, 0xf3, 0xd7, 0x49,
	0x5b, 0x41, 0xef, 0x41, 0x2e, 0x73, 0xcb, 0x87, 0x0c, 0x6d, 0xf1, 0xb0, 0xa5, 0x87, 0x4d, 0x2d,
	0xbe, 0xf1, 0x62, 0x1f, 0x69, 0xfa, 0x2e, 0xd4, 0x99, 0x8d, 0xd0, 0x2d, 0xe7, 0xc3, 0x09, 0x87,
	0x74, 0xad, 0x48, 0x38, 0xa6, 0xc4, 0x2a, 0x3b, 0x82, 0x14, 0x1e, 0x79, 0x77, 0xe1, 0xd4, 0xde,
	0x3d, 0x1e, 0x7e, 0xd3, 0x07, 0x68, 0x1f, 0x90, 0x74, 0xae, 0x5e, 0xd4, 0xab, 0x28, 0xb5, 0x22,
	0x7c, 0x75, 0xf3, 0x0e, 0xce, 0xf3, 0xdf, 0x41, 0x8b, 0xe6, 0x97, 0xe2, 0x28, 0x9b, 0x5e, 0xd2,
	0x9e, 0xba, 0xb1, 0x0c, 0xb3, 0xe4, 0xb3, 0x06, 0xfb, 0x3f, 0xbd, 0xfe, 0x15, 0x00, 0x00, 0xff,
	0xff, 0x2f, 0xa3, 0xe8, 0xb4, 0xad, 0x06, 0x00, 0x00,
}
