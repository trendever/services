// Code generated by protoc-gen-go.
// source: checker.proto
// DO NOT EDIT!

/*
Package checker is a generated protocol buffer package.

It is generated from these files:
	checker.proto

It has these top-level messages:
	CheckRequest
	CheckReply
	GetProfileRequest
	GetProfileReply
*/
package checker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CheckRequest struct {
	Ids []uint64 `protobuf:"varint,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *CheckRequest) Reset()                    { *m = CheckRequest{} }
func (m *CheckRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()               {}
func (*CheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CheckReply struct {
}

func (m *CheckReply) Reset()                    { *m = CheckReply{} }
func (m *CheckReply) String() string            { return proto.CompactTextString(m) }
func (*CheckReply) ProtoMessage()               {}
func (*CheckReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetProfileRequest struct {
	Id   uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *GetProfileRequest) Reset()                    { *m = GetProfileRequest{} }
func (m *GetProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProfileRequest) ProtoMessage()               {}
func (*GetProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// biography and external_url are provided only for requests by id
type GetProfileReply struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	FullName    string `protobuf:"bytes,3,opt,name=full_name,json=fullName" json:"full_name,omitempty"`
	Biography   string `protobuf:"bytes,4,opt,name=biography" json:"biography,omitempty"`
	AvatarUrl   string `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	ExternalUrl string `protobuf:"bytes,6,opt,name=external_url,json=externalUrl" json:"external_url,omitempty"`
	Error       string `protobuf:"bytes,15,opt,name=error" json:"error,omitempty"`
}

func (m *GetProfileReply) Reset()                    { *m = GetProfileReply{} }
func (m *GetProfileReply) String() string            { return proto.CompactTextString(m) }
func (*GetProfileReply) ProtoMessage()               {}
func (*GetProfileReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*CheckRequest)(nil), "checker.CheckRequest")
	proto.RegisterType((*CheckReply)(nil), "checker.CheckReply")
	proto.RegisterType((*GetProfileRequest)(nil), "checker.GetProfileRequest")
	proto.RegisterType((*GetProfileReply)(nil), "checker.GetProfileReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for CheckerService service

type CheckerServiceClient interface {
	// runs instagram check for users with provided ids
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error)
	// get instagram profile by instagam id or name
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileReply, error)
}

type checkerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCheckerServiceClient(cc *grpc.ClientConn) CheckerServiceClient {
	return &checkerServiceClient{cc}
}

func (c *checkerServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := grpc.Invoke(ctx, "/checker.CheckerService/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileReply, error) {
	out := new(GetProfileReply)
	err := grpc.Invoke(ctx, "/checker.CheckerService/GetProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CheckerService service

type CheckerServiceServer interface {
	// runs instagram check for users with provided ids
	Check(context.Context, *CheckRequest) (*CheckReply, error)
	// get instagram profile by instagam id or name
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileReply, error)
}

func RegisterCheckerServiceServer(s *grpc.Server, srv CheckerServiceServer) {
	s.RegisterService(&_CheckerService_serviceDesc, srv)
}

func _CheckerService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checker.CheckerService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckerService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checker.CheckerService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "checker.CheckerService",
	HandlerType: (*CheckerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _CheckerService_Check_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _CheckerService_GetProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("checker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4f, 0xc2, 0x40,
	0x10, 0x85, 0x2d, 0x6d, 0xd1, 0x8e, 0x15, 0x74, 0xd4, 0x64, 0x53, 0x35, 0xc1, 0x9e, 0x3c, 0x71,
	0xd0, 0x18, 0x7f, 0x00, 0x26, 0xde, 0x8c, 0xa9, 0xf1, 0x4c, 0x96, 0x32, 0x48, 0xe3, 0x4a, 0xeb,
	0xd0, 0x12, 0xf9, 0x11, 0xfe, 0x2f, 0x7f, 0x96, 0xbb, 0x5b, 0x2a, 0x44, 0x3d, 0x78, 0x7b, 0xfb,
	0xbe, 0xf7, 0xe6, 0xf0, 0x16, 0xf6, 0xd2, 0x29, 0xa5, 0x2f, 0xc4, 0xfd, 0x82, 0xf3, 0x32, 0xc7,
	0xed, 0xd5, 0x33, 0xee, 0x41, 0x38, 0x30, 0x32, 0xa1, 0xb7, 0x8a, 0xe6, 0x25, 0xee, 0x83, 0x9b,
	0x8d, 0xe7, 0xc2, 0xe9, 0xb9, 0x17, 0x5e, 0x62, 0x64, 0x1c, 0x02, 0xac, 0x12, 0x85, 0x5a, 0xc6,
	0x37, 0x70, 0x70, 0x47, 0xe5, 0x03, 0xe7, 0x93, 0x4c, 0x51, 0x53, 0xea, 0x40, 0x2b, 0x1b, 0xeb,
	0x8e, 0xa3, 0x3b, 0x5a, 0x21, 0x82, 0x37, 0x93, 0xaf, 0x24, 0x5a, 0xda, 0x09, 0x12, 0xab, 0xe3,
	0x4f, 0x07, 0xba, 0x9b, 0x4d, 0x7d, 0xec, 0x3f, 0x3d, 0x3c, 0x81, 0x60, 0x52, 0x29, 0x35, 0xb4,
	0xc0, 0xb5, 0x60, 0xc7, 0x18, 0xf7, 0x06, 0x9e, 0x42, 0x30, 0xca, 0xf2, 0x67, 0x96, 0xc5, 0x74,
	0x29, 0x3c, 0x0b, 0xd7, 0x06, 0x9e, 0x01, 0xc8, 0x85, 0x2c, 0x25, 0x0f, 0x2b, 0x56, 0xc2, 0xaf,
	0x71, 0xed, 0x3c, 0xb1, 0xc2, 0x73, 0x08, 0xe9, 0xbd, 0x24, 0x9e, 0x49, 0x65, 0x03, 0x6d, 0x1b,
	0xd8, 0x6d, 0x3c, 0x13, 0x39, 0x02, 0x9f, 0x98, 0x73, 0x16, 0x5d, 0xcb, 0xea, 0xc7, 0xe5, 0x87,
	0x03, 0x9d, 0x41, 0xbd, 0xdf, 0x23, 0xf1, 0x22, 0x4b, 0x09, 0xaf, 0xc1, 0xb7, 0x0e, 0x1e, 0xf7,
	0x9b, 0xa1, 0x37, 0x67, 0x8d, 0x0e, 0x7f, 0xda, 0x66, 0xcb, 0x2d, 0xbc, 0x05, 0x58, 0x6f, 0x82,
	0xd1, 0x77, 0xe8, 0xd7, 0xc4, 0x91, 0xf8, 0x93, 0xd9, 0x2b, 0xa3, 0xb6, 0xfd, 0xd3, 0xab, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x76, 0x63, 0x4e, 0x37, 0xe4, 0x01, 0x00, 0x00,
}
