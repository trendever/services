// Code generated by protoc-gen-go.
// source: trendcoin.proto
// DO NOT EDIT!

/*
Package trendcoin is a generated protocol buffer package.

It is generated from these files:
	trendcoin.proto

It has these top-level messages:
	BalanceRequest
	BalanceReply
	BalanceNotify
	TransactionData
	MakeTransactionsRequest
	MakeTransactionsReply
	TransactionLogRequest
	Transaction
	TransactionLogReply
*/
package trendcoin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BalanceRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *BalanceRequest) Reset()                    { *m = BalanceRequest{} }
func (m *BalanceRequest) String() string            { return proto.CompactTextString(m) }
func (*BalanceRequest) ProtoMessage()               {}
func (*BalanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BalanceRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type BalanceReply struct {
	Balance int64  `protobuf:"varint,1,opt,name=balance" json:"balance,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *BalanceReply) Reset()                    { *m = BalanceReply{} }
func (m *BalanceReply) String() string            { return proto.CompactTextString(m) }
func (*BalanceReply) ProtoMessage()               {}
func (*BalanceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BalanceReply) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *BalanceReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type BalanceNotify struct {
	UserId  uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Balance int64  `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	// true if notify was caused by autorefill event
	Autorefill bool `protobuf:"varint,3,opt,name=autorefill" json:"autorefill,omitempty"`
	// only provided with 'autorefill' = true
	Failed bool `protobuf:"varint,4,opt,name=failed" json:"failed,omitempty"`
}

func (m *BalanceNotify) Reset()                    { *m = BalanceNotify{} }
func (m *BalanceNotify) String() string            { return proto.CompactTextString(m) }
func (*BalanceNotify) ProtoMessage()               {}
func (*BalanceNotify) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BalanceNotify) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BalanceNotify) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *BalanceNotify) GetAutorefill() bool {
	if m != nil {
		return m.Autorefill
	}
	return false
}

func (m *BalanceNotify) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

type TransactionData struct {
	Source uint64 `protobuf:"varint,1,opt,name=source" json:"source,omitempty"`
	// if destination account do not exists, it will be created
	// be aware: there will be no checks for core user
	Destination uint64 `protobuf:"varint,2,opt,name=destination" json:"destination,omitempty"`
	Amount      uint64 `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Reason      string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
	// allows negative balance as a result
	AllowCredit bool `protobuf:"varint,5,opt,name=allow_credit,json=allowCredit" json:"allow_credit,omitempty"`
	// allows empty "source" or "destination" field
	AllowEmptySide bool `protobuf:"varint,6,opt,name=allow_empty_side,json=allowEmptySide" json:"allow_empty_side,omitempty"`
	// this key used to guarantee that only a single charge is created,
	// should be unique or empty, required for nats requests
	IdempotencyKey string `protobuf:"bytes,7,opt,name=idempotency_key,json=idempotencyKey" json:"idempotency_key,omitempty"`
}

func (m *TransactionData) Reset()                    { *m = TransactionData{} }
func (m *TransactionData) String() string            { return proto.CompactTextString(m) }
func (*TransactionData) ProtoMessage()               {}
func (*TransactionData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TransactionData) GetSource() uint64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *TransactionData) GetDestination() uint64 {
	if m != nil {
		return m.Destination
	}
	return 0
}

func (m *TransactionData) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransactionData) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *TransactionData) GetAllowCredit() bool {
	if m != nil {
		return m.AllowCredit
	}
	return false
}

func (m *TransactionData) GetAllowEmptySide() bool {
	if m != nil {
		return m.AllowEmptySide
	}
	return false
}

func (m *TransactionData) GetIdempotencyKey() string {
	if m != nil {
		return m.IdempotencyKey
	}
	return ""
}

type MakeTransactionsRequest struct {
	Transactions []*TransactionData `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
	IsAutorefill bool               `protobuf:"varint,2,opt,name=is_autorefill,json=isAutorefill" json:"is_autorefill,omitempty"`
}

func (m *MakeTransactionsRequest) Reset()                    { *m = MakeTransactionsRequest{} }
func (m *MakeTransactionsRequest) String() string            { return proto.CompactTextString(m) }
func (*MakeTransactionsRequest) ProtoMessage()               {}
func (*MakeTransactionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MakeTransactionsRequest) GetTransactions() []*TransactionData {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *MakeTransactionsRequest) GetIsAutorefill() bool {
	if m != nil {
		return m.IsAutorefill
	}
	return false
}

type MakeTransactionsReply struct {
	TransactionIds []uint64 `protobuf:"varint,1,rep,packed,name=transaction_ids,json=transactionIds" json:"transaction_ids,omitempty"`
	Error          string   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *MakeTransactionsReply) Reset()                    { *m = MakeTransactionsReply{} }
func (m *MakeTransactionsReply) String() string            { return proto.CompactTextString(m) }
func (*MakeTransactionsReply) ProtoMessage()               {}
func (*MakeTransactionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MakeTransactionsReply) GetTransactionIds() []uint64 {
	if m != nil {
		return m.TransactionIds
	}
	return nil
}

func (m *MakeTransactionsReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type TransactionLogRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// default limit is 20
	Limit  uint64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	// optional created_at bounds, unixtime, seconds, [after, before)
	Before int64 `protobuf:"varint,4,opt,name=before" json:"before,omitempty"`
	After  int64 `protobuf:"varint,5,opt,name=after" json:"after,omitempty"`
	// transactions are ordered from newest to oldest by default,
	// if asc is true order will be reversed
	Asc bool `protobuf:"varint,6,opt,name=asc" json:"asc,omitempty"`
}

func (m *TransactionLogRequest) Reset()                    { *m = TransactionLogRequest{} }
func (m *TransactionLogRequest) String() string            { return proto.CompactTextString(m) }
func (*TransactionLogRequest) ProtoMessage()               {}
func (*TransactionLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TransactionLogRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TransactionLogRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TransactionLogRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TransactionLogRequest) GetBefore() int64 {
	if m != nil {
		return m.Before
	}
	return 0
}

func (m *TransactionLogRequest) GetAfter() int64 {
	if m != nil {
		return m.After
	}
	return 0
}

func (m *TransactionLogRequest) GetAsc() bool {
	if m != nil {
		return m.Asc
	}
	return false
}

type Transaction struct {
	Id        uint64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CreatedAt int64            `protobuf:"varint,2,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Data      *TransactionData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Transaction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Transaction) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Transaction) GetData() *TransactionData {
	if m != nil {
		return m.Data
	}
	return nil
}

type TransactionLogReply struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
	Error        string         `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	HasMore      bool           `protobuf:"varint,3,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *TransactionLogReply) Reset()                    { *m = TransactionLogReply{} }
func (m *TransactionLogReply) String() string            { return proto.CompactTextString(m) }
func (*TransactionLogReply) ProtoMessage()               {}
func (*TransactionLogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TransactionLogReply) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *TransactionLogReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TransactionLogReply) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func init() {
	proto.RegisterType((*BalanceRequest)(nil), "trendcoin.BalanceRequest")
	proto.RegisterType((*BalanceReply)(nil), "trendcoin.BalanceReply")
	proto.RegisterType((*BalanceNotify)(nil), "trendcoin.BalanceNotify")
	proto.RegisterType((*TransactionData)(nil), "trendcoin.TransactionData")
	proto.RegisterType((*MakeTransactionsRequest)(nil), "trendcoin.MakeTransactionsRequest")
	proto.RegisterType((*MakeTransactionsReply)(nil), "trendcoin.MakeTransactionsReply")
	proto.RegisterType((*TransactionLogRequest)(nil), "trendcoin.TransactionLogRequest")
	proto.RegisterType((*Transaction)(nil), "trendcoin.Transaction")
	proto.RegisterType((*TransactionLogReply)(nil), "trendcoin.TransactionLogReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TrendcoinService service

type TrendcoinServiceClient interface {
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceReply, error)
	// all requested transactions must end success or will be rollbacked
	MakeTransactions(ctx context.Context, in *MakeTransactionsRequest, opts ...grpc.CallOption) (*MakeTransactionsReply, error)
	TransactionLog(ctx context.Context, in *TransactionLogRequest, opts ...grpc.CallOption) (*TransactionLogReply, error)
}

type trendcoinServiceClient struct {
	cc *grpc.ClientConn
}

func NewTrendcoinServiceClient(cc *grpc.ClientConn) TrendcoinServiceClient {
	return &trendcoinServiceClient{cc}
}

func (c *trendcoinServiceClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceReply, error) {
	out := new(BalanceReply)
	err := grpc.Invoke(ctx, "/trendcoin.TrendcoinService/Balance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trendcoinServiceClient) MakeTransactions(ctx context.Context, in *MakeTransactionsRequest, opts ...grpc.CallOption) (*MakeTransactionsReply, error) {
	out := new(MakeTransactionsReply)
	err := grpc.Invoke(ctx, "/trendcoin.TrendcoinService/MakeTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trendcoinServiceClient) TransactionLog(ctx context.Context, in *TransactionLogRequest, opts ...grpc.CallOption) (*TransactionLogReply, error) {
	out := new(TransactionLogReply)
	err := grpc.Invoke(ctx, "/trendcoin.TrendcoinService/TransactionLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TrendcoinService service

type TrendcoinServiceServer interface {
	Balance(context.Context, *BalanceRequest) (*BalanceReply, error)
	// all requested transactions must end success or will be rollbacked
	MakeTransactions(context.Context, *MakeTransactionsRequest) (*MakeTransactionsReply, error)
	TransactionLog(context.Context, *TransactionLogRequest) (*TransactionLogReply, error)
}

func RegisterTrendcoinServiceServer(s *grpc.Server, srv TrendcoinServiceServer) {
	s.RegisterService(&_TrendcoinService_serviceDesc, srv)
}

func _TrendcoinService_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrendcoinServiceServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trendcoin.TrendcoinService/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrendcoinServiceServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrendcoinService_MakeTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrendcoinServiceServer).MakeTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trendcoin.TrendcoinService/MakeTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrendcoinServiceServer).MakeTransactions(ctx, req.(*MakeTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrendcoinService_TransactionLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrendcoinServiceServer).TransactionLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trendcoin.TrendcoinService/TransactionLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrendcoinServiceServer).TransactionLog(ctx, req.(*TransactionLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrendcoinService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trendcoin.TrendcoinService",
	HandlerType: (*TrendcoinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Balance",
			Handler:    _TrendcoinService_Balance_Handler,
		},
		{
			MethodName: "MakeTransactions",
			Handler:    _TrendcoinService_MakeTransactions_Handler,
		},
		{
			MethodName: "TransactionLog",
			Handler:    _TrendcoinService_TransactionLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trendcoin.proto",
}

func init() { proto.RegisterFile("trendcoin.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x73, 0xd3, 0x30,
	0x14, 0xc4, 0x89, 0x9b, 0x34, 0x2f, 0x69, 0x9a, 0x11, 0xb4, 0x75, 0x33, 0x43, 0xc7, 0x98, 0x43,
	0xc3, 0xa5, 0x87, 0x72, 0xe3, 0x50, 0xa6, 0x7c, 0x1c, 0x3a, 0x50, 0x0e, 0x6a, 0x87, 0x03, 0x17,
	0x8f, 0x6a, 0x3d, 0x53, 0x4d, 0x1d, 0x2b, 0x48, 0x0a, 0x8c, 0x39, 0x70, 0x60, 0x86, 0xbf, 0xc1,
	0x7f, 0xe4, 0x1f, 0x30, 0x92, 0x5d, 0xd7, 0x09, 0x69, 0xb8, 0x65, 0xd7, 0xeb, 0xa7, 0xcd, 0xdb,
	0xb5, 0x60, 0xdb, 0x28, 0xcc, 0x79, 0x22, 0x45, 0x7e, 0x34, 0x53, 0xd2, 0x48, 0xd2, 0xab, 0x89,
	0xe8, 0x19, 0x0c, 0x5f, 0xb1, 0x8c, 0xe5, 0x09, 0x52, 0xfc, 0x32, 0x47, 0x6d, 0xc8, 0x1e, 0x74,
	0xe7, 0x1a, 0x55, 0x2c, 0x78, 0xe0, 0x85, 0xde, 0xc4, 0xa7, 0x1d, 0x0b, 0xcf, 0x78, 0x74, 0x02,
	0x83, 0x5a, 0x3a, 0xcb, 0x0a, 0x12, 0x40, 0xf7, 0xaa, 0xc4, 0x4e, 0xd8, 0xa6, 0xb7, 0x90, 0x3c,
	0x82, 0x0d, 0x54, 0x4a, 0xaa, 0xa0, 0x15, 0x7a, 0x93, 0x1e, 0x2d, 0x41, 0xf4, 0x1d, 0xb6, 0xaa,
	0xf7, 0x3f, 0x48, 0x23, 0xd2, 0xe2, 0xde, 0x93, 0x9a, 0x93, 0x5b, 0x8b, 0x93, 0x0f, 0x00, 0xd8,
	0xdc, 0x48, 0x85, 0xa9, 0xc8, 0xb2, 0xa0, 0x1d, 0x7a, 0x93, 0x4d, 0xda, 0x60, 0xc8, 0x2e, 0x74,
	0x52, 0x26, 0x32, 0xe4, 0x81, 0xef, 0x9e, 0x55, 0x28, 0xfa, 0xe3, 0xc1, 0xf6, 0xa5, 0x62, 0xb9,
	0x66, 0x89, 0x11, 0x32, 0x7f, 0xc3, 0x0c, 0xb3, 0x5a, 0x2d, 0xe7, 0xaa, 0xb2, 0xef, 0xd3, 0x0a,
	0x91, 0x10, 0xfa, 0x1c, 0xb5, 0x11, 0x39, 0xb3, 0x52, 0xe7, 0xc0, 0xa7, 0x4d, 0xca, 0xbe, 0xc9,
	0xa6, 0x72, 0x9e, 0x1b, 0xe7, 0xc0, 0xa7, 0x15, 0xb2, 0xbc, 0x42, 0xa6, 0x65, 0xee, 0x4e, 0xef,
	0xd1, 0x0a, 0x91, 0x27, 0x30, 0x60, 0x59, 0x26, 0xbf, 0xc5, 0x89, 0x42, 0x2e, 0x4c, 0xb0, 0xe1,
	0xbc, 0xf5, 0x1d, 0xf7, 0xda, 0x51, 0x64, 0x02, 0xa3, 0x52, 0x82, 0xd3, 0x99, 0x29, 0x62, 0x2d,
	0x38, 0x06, 0x1d, 0x27, 0x1b, 0x3a, 0xfe, 0xad, 0xa5, 0x2f, 0x04, 0x47, 0x72, 0x08, 0xdb, 0x82,
	0xe3, 0x74, 0x26, 0x0d, 0xe6, 0x49, 0x11, 0xdf, 0x60, 0x11, 0x74, 0xdd, 0x69, 0xc3, 0x06, 0xfd,
	0x0e, 0x8b, 0xe8, 0x07, 0xec, 0x9d, 0xb3, 0x1b, 0x6c, 0xfc, 0x6d, 0x7d, 0x9b, 0xf1, 0x09, 0x0c,
	0x4c, 0x83, 0x0e, 0xbc, 0xb0, 0x3d, 0xe9, 0x1f, 0x8f, 0x8f, 0xee, 0x8a, 0xb2, 0xb4, 0x2c, 0xba,
	0xa0, 0x27, 0x4f, 0x61, 0x4b, 0xe8, 0xb8, 0x91, 0x44, 0xcb, 0x59, 0x1d, 0x08, 0x7d, 0x5a, 0x73,
	0xd1, 0x47, 0xd8, 0xf9, 0xf7, 0x7c, 0x5b, 0x9c, 0x43, 0xdb, 0xc8, 0x9a, 0x8c, 0x05, 0x2f, 0x0d,
	0xf8, 0x74, 0xd8, 0xa0, 0xcf, 0xb8, 0xbe, 0xa7, 0x47, 0xbf, 0x3d, 0xd8, 0x69, 0x0c, 0x7d, 0x2f,
	0x3f, 0xff, 0xaf, 0xba, 0x76, 0x50, 0x26, 0xa6, 0xc2, 0x54, 0x61, 0x96, 0xc0, 0xc6, 0x25, 0xd3,
	0x54, 0x63, 0x1d, 0x63, 0x89, 0x2c, 0x7f, 0x85, 0xa9, 0x54, 0xe8, 0x62, 0x6c, 0xd3, 0x0a, 0xd9,
	0x29, 0x2c, 0x35, 0xa8, 0x5c, 0x7e, 0x6d, 0x5a, 0x02, 0x32, 0x82, 0x36, 0xd3, 0x49, 0x15, 0x96,
	0xfd, 0x19, 0x65, 0xd0, 0x6f, 0xf8, 0x23, 0x43, 0x68, 0xd5, 0x86, 0x5a, 0x82, 0x93, 0xc7, 0x00,
	0x89, 0x42, 0x66, 0x90, 0xc7, 0xcc, 0x54, 0x05, 0xef, 0x55, 0xcc, 0xa9, 0x21, 0x47, 0xe0, 0x73,
	0x66, 0x98, 0xf3, 0xb4, 0x3e, 0x13, 0xa7, 0x8b, 0x7e, 0x7a, 0xf0, 0x70, 0x79, 0x1d, 0x76, 0xcb,
	0x2f, 0x56, 0x66, 0xbc, 0xbb, 0x7a, 0xde, 0x52, 0xbe, 0x2b, 0x17, 0x4f, 0xf6, 0x61, 0xf3, 0x9a,
	0xe9, 0x78, 0x6a, 0x37, 0x53, 0x7e, 0x7a, 0xdd, 0x6b, 0xa6, 0xcf, 0xa5, 0xc2, 0xe3, 0x5f, 0x2d,
	0x18, 0x5d, 0xde, 0x0e, 0xbe, 0x40, 0xf5, 0x55, 0x24, 0x48, 0x5e, 0x42, 0xb7, 0xfa, 0xe0, 0xc9,
	0x7e, 0xe3, 0xd8, 0xc5, 0xfb, 0x66, 0xbc, 0xb7, 0xea, 0xd1, 0x2c, 0x2b, 0xa2, 0x07, 0xe4, 0x13,
	0x8c, 0x96, 0x1b, 0x44, 0xa2, 0x86, 0xfc, 0x9e, 0x7a, 0x8f, 0xc3, 0xb5, 0x9a, 0x72, 0xf6, 0x25,
	0x0c, 0x17, 0xb7, 0x46, 0xc2, 0xd5, 0xab, 0xb9, 0xeb, 0xd7, 0xf8, 0x60, 0x8d, 0xc2, 0x4d, 0xbd,
	0xea, 0xb8, 0x0b, 0xf6, 0xf9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x2f, 0x45, 0x1f, 0x73,
	0x05, 0x00, 0x00,
}
