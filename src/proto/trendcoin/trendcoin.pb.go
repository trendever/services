// Code generated by protoc-gen-gogo.
// source: trendcoin.proto
// DO NOT EDIT!

/*
	Package trendcoin is a generated protocol buffer package.

	It is generated from these files:
		trendcoin.proto

	It has these top-level messages:
		BalanceRequest
		BalanceReply
		BalanceNotify
		TransactionData
		MakeTransactionsRequest
		MakeTransactionsReply
		TransactionLogRequest
		Transaction
		TransactionLogReply
*/
package trendcoin

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BalanceRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *BalanceRequest) Reset()                    { *m = BalanceRequest{} }
func (m *BalanceRequest) String() string            { return proto.CompactTextString(m) }
func (*BalanceRequest) ProtoMessage()               {}
func (*BalanceRequest) Descriptor() ([]byte, []int) { return fileDescriptorTrendcoin, []int{0} }

type BalanceReply struct {
	Balance int64  `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *BalanceReply) Reset()                    { *m = BalanceReply{} }
func (m *BalanceReply) String() string            { return proto.CompactTextString(m) }
func (*BalanceReply) ProtoMessage()               {}
func (*BalanceReply) Descriptor() ([]byte, []int) { return fileDescriptorTrendcoin, []int{1} }

type BalanceNotify struct {
	UserId  uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Balance int64  `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	// true if notify was caused by autorefill event
	Autorefill bool `protobuf:"varint,3,opt,name=autorefill,proto3" json:"autorefill,omitempty"`
	// only provided with 'autorefill' = true
	Failed bool `protobuf:"varint,4,opt,name=failed,proto3" json:"failed,omitempty"`
}

func (m *BalanceNotify) Reset()                    { *m = BalanceNotify{} }
func (m *BalanceNotify) String() string            { return proto.CompactTextString(m) }
func (*BalanceNotify) ProtoMessage()               {}
func (*BalanceNotify) Descriptor() ([]byte, []int) { return fileDescriptorTrendcoin, []int{2} }

type TransactionData struct {
	Source uint64 `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	// if destination account do not exists, it will be created
	// be aware: there will be no checks for core user
	Destination uint64 `protobuf:"varint,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Amount      uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Reason      string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// allows negative balance as a result
	AllowCredit bool `protobuf:"varint,5,opt,name=allow_credit,json=allowCredit,proto3" json:"allow_credit,omitempty"`
	// allows empty "source" or "destination" field
	AllowEmptySide bool `protobuf:"varint,6,opt,name=allow_empty_side,json=allowEmptySide,proto3" json:"allow_empty_side,omitempty"`
	// this key used to guarantee that only a single charge is created,
	// should be unique or empty, required for nats requests
	IdempotencyKey string `protobuf:"bytes,7,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
}

func (m *TransactionData) Reset()                    { *m = TransactionData{} }
func (m *TransactionData) String() string            { return proto.CompactTextString(m) }
func (*TransactionData) ProtoMessage()               {}
func (*TransactionData) Descriptor() ([]byte, []int) { return fileDescriptorTrendcoin, []int{3} }

type MakeTransactionsRequest struct {
	Transactions []*TransactionData `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
	IsAutorefill bool               `protobuf:"varint,2,opt,name=is_autorefill,json=isAutorefill,proto3" json:"is_autorefill,omitempty"`
}

func (m *MakeTransactionsRequest) Reset()                    { *m = MakeTransactionsRequest{} }
func (m *MakeTransactionsRequest) String() string            { return proto.CompactTextString(m) }
func (*MakeTransactionsRequest) ProtoMessage()               {}
func (*MakeTransactionsRequest) Descriptor() ([]byte, []int) { return fileDescriptorTrendcoin, []int{4} }

func (m *MakeTransactionsRequest) GetTransactions() []*TransactionData {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type MakeTransactionsReply struct {
	TransactionIds []uint64 `protobuf:"varint,1,rep,packed,name=transaction_ids,json=transactionIds" json:"transaction_ids,omitempty"`
	Error          string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *MakeTransactionsReply) Reset()                    { *m = MakeTransactionsReply{} }
func (m *MakeTransactionsReply) String() string            { return proto.CompactTextString(m) }
func (*MakeTransactionsReply) ProtoMessage()               {}
func (*MakeTransactionsReply) Descriptor() ([]byte, []int) { return fileDescriptorTrendcoin, []int{5} }

type TransactionLogRequest struct {
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// default limit is 20
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// optional created_at bounds, unixtime, seconds, [after, before)
	Before int64 `protobuf:"varint,4,opt,name=before,proto3" json:"before,omitempty"`
	After  int64 `protobuf:"varint,5,opt,name=after,proto3" json:"after,omitempty"`
	// transactions are ordered from newest to oldest by default,
	// if asc is true order will be reversed
	Asc bool `protobuf:"varint,6,opt,name=asc,proto3" json:"asc,omitempty"`
}

func (m *TransactionLogRequest) Reset()                    { *m = TransactionLogRequest{} }
func (m *TransactionLogRequest) String() string            { return proto.CompactTextString(m) }
func (*TransactionLogRequest) ProtoMessage()               {}
func (*TransactionLogRequest) Descriptor() ([]byte, []int) { return fileDescriptorTrendcoin, []int{6} }

type Transaction struct {
	Id        uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt int64            `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Data      *TransactionData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorTrendcoin, []int{7} }

func (m *Transaction) GetData() *TransactionData {
	if m != nil {
		return m.Data
	}
	return nil
}

type TransactionLogReply struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
	Error        string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	HasMore      bool           `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (m *TransactionLogReply) Reset()                    { *m = TransactionLogReply{} }
func (m *TransactionLogReply) String() string            { return proto.CompactTextString(m) }
func (*TransactionLogReply) ProtoMessage()               {}
func (*TransactionLogReply) Descriptor() ([]byte, []int) { return fileDescriptorTrendcoin, []int{8} }

func (m *TransactionLogReply) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func init() {
	proto.RegisterType((*BalanceRequest)(nil), "trendcoin.BalanceRequest")
	proto.RegisterType((*BalanceReply)(nil), "trendcoin.BalanceReply")
	proto.RegisterType((*BalanceNotify)(nil), "trendcoin.BalanceNotify")
	proto.RegisterType((*TransactionData)(nil), "trendcoin.TransactionData")
	proto.RegisterType((*MakeTransactionsRequest)(nil), "trendcoin.MakeTransactionsRequest")
	proto.RegisterType((*MakeTransactionsReply)(nil), "trendcoin.MakeTransactionsReply")
	proto.RegisterType((*TransactionLogRequest)(nil), "trendcoin.TransactionLogRequest")
	proto.RegisterType((*Transaction)(nil), "trendcoin.Transaction")
	proto.RegisterType((*TransactionLogReply)(nil), "trendcoin.TransactionLogReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TrendcoinService service

type TrendcoinServiceClient interface {
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceReply, error)
	// all requested transactions must end success or will be rollbacked
	MakeTransactions(ctx context.Context, in *MakeTransactionsRequest, opts ...grpc.CallOption) (*MakeTransactionsReply, error)
	TransactionLog(ctx context.Context, in *TransactionLogRequest, opts ...grpc.CallOption) (*TransactionLogReply, error)
}

type trendcoinServiceClient struct {
	cc *grpc.ClientConn
}

func NewTrendcoinServiceClient(cc *grpc.ClientConn) TrendcoinServiceClient {
	return &trendcoinServiceClient{cc}
}

func (c *trendcoinServiceClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceReply, error) {
	out := new(BalanceReply)
	err := grpc.Invoke(ctx, "/trendcoin.TrendcoinService/Balance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trendcoinServiceClient) MakeTransactions(ctx context.Context, in *MakeTransactionsRequest, opts ...grpc.CallOption) (*MakeTransactionsReply, error) {
	out := new(MakeTransactionsReply)
	err := grpc.Invoke(ctx, "/trendcoin.TrendcoinService/MakeTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trendcoinServiceClient) TransactionLog(ctx context.Context, in *TransactionLogRequest, opts ...grpc.CallOption) (*TransactionLogReply, error) {
	out := new(TransactionLogReply)
	err := grpc.Invoke(ctx, "/trendcoin.TrendcoinService/TransactionLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TrendcoinService service

type TrendcoinServiceServer interface {
	Balance(context.Context, *BalanceRequest) (*BalanceReply, error)
	// all requested transactions must end success or will be rollbacked
	MakeTransactions(context.Context, *MakeTransactionsRequest) (*MakeTransactionsReply, error)
	TransactionLog(context.Context, *TransactionLogRequest) (*TransactionLogReply, error)
}

func RegisterTrendcoinServiceServer(s *grpc.Server, srv TrendcoinServiceServer) {
	s.RegisterService(&_TrendcoinService_serviceDesc, srv)
}

func _TrendcoinService_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrendcoinServiceServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trendcoin.TrendcoinService/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrendcoinServiceServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrendcoinService_MakeTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrendcoinServiceServer).MakeTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trendcoin.TrendcoinService/MakeTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrendcoinServiceServer).MakeTransactions(ctx, req.(*MakeTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrendcoinService_TransactionLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrendcoinServiceServer).TransactionLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trendcoin.TrendcoinService/TransactionLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrendcoinServiceServer).TransactionLog(ctx, req.(*TransactionLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrendcoinService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trendcoin.TrendcoinService",
	HandlerType: (*TrendcoinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Balance",
			Handler:    _TrendcoinService_Balance_Handler,
		},
		{
			MethodName: "MakeTransactions",
			Handler:    _TrendcoinService_MakeTransactions_Handler,
		},
		{
			MethodName: "TransactionLog",
			Handler:    _TrendcoinService_TransactionLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trendcoin.proto",
}

func (m *BalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *BalanceReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Balance != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.Balance))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *BalanceNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.UserId))
	}
	if m.Balance != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.Balance))
	}
	if m.Autorefill {
		dAtA[i] = 0x18
		i++
		if m.Autorefill {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Failed {
		dAtA[i] = 0x20
		i++
		if m.Failed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *TransactionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Source != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.Source))
	}
	if m.Destination != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.Destination))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.Amount))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if m.AllowCredit {
		dAtA[i] = 0x28
		i++
		if m.AllowCredit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AllowEmptySide {
		dAtA[i] = 0x30
		i++
		if m.AllowEmptySide {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.IdempotencyKey) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(len(m.IdempotencyKey)))
		i += copy(dAtA[i:], m.IdempotencyKey)
	}
	return i, nil
}

func (m *MakeTransactionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MakeTransactionsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTrendcoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsAutorefill {
		dAtA[i] = 0x10
		i++
		if m.IsAutorefill {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MakeTransactionsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MakeTransactionsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransactionIds) > 0 {
		dAtA2 := make([]byte, len(m.TransactionIds)*10)
		var j1 int
		for _, num := range m.TransactionIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *TransactionLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionLogRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.UserId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.Offset))
	}
	if m.Before != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.Before))
	}
	if m.After != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.After))
	}
	if m.Asc {
		dAtA[i] = 0x30
		i++
		if m.Asc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.Id))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.CreatedAt))
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *TransactionLogReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionLogReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTrendcoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTrendcoin(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.HasMore {
		dAtA[i] = 0x18
		i++
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Trendcoin(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Trendcoin(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTrendcoin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BalanceRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovTrendcoin(uint64(m.UserId))
	}
	return n
}

func (m *BalanceReply) Size() (n int) {
	var l int
	_ = l
	if m.Balance != 0 {
		n += 1 + sovTrendcoin(uint64(m.Balance))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTrendcoin(uint64(l))
	}
	return n
}

func (m *BalanceNotify) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovTrendcoin(uint64(m.UserId))
	}
	if m.Balance != 0 {
		n += 1 + sovTrendcoin(uint64(m.Balance))
	}
	if m.Autorefill {
		n += 2
	}
	if m.Failed {
		n += 2
	}
	return n
}

func (m *TransactionData) Size() (n int) {
	var l int
	_ = l
	if m.Source != 0 {
		n += 1 + sovTrendcoin(uint64(m.Source))
	}
	if m.Destination != 0 {
		n += 1 + sovTrendcoin(uint64(m.Destination))
	}
	if m.Amount != 0 {
		n += 1 + sovTrendcoin(uint64(m.Amount))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTrendcoin(uint64(l))
	}
	if m.AllowCredit {
		n += 2
	}
	if m.AllowEmptySide {
		n += 2
	}
	l = len(m.IdempotencyKey)
	if l > 0 {
		n += 1 + l + sovTrendcoin(uint64(l))
	}
	return n
}

func (m *MakeTransactionsRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovTrendcoin(uint64(l))
		}
	}
	if m.IsAutorefill {
		n += 2
	}
	return n
}

func (m *MakeTransactionsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.TransactionIds) > 0 {
		l = 0
		for _, e := range m.TransactionIds {
			l += sovTrendcoin(uint64(e))
		}
		n += 1 + sovTrendcoin(uint64(l)) + l
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTrendcoin(uint64(l))
	}
	return n
}

func (m *TransactionLogRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovTrendcoin(uint64(m.UserId))
	}
	if m.Limit != 0 {
		n += 1 + sovTrendcoin(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovTrendcoin(uint64(m.Offset))
	}
	if m.Before != 0 {
		n += 1 + sovTrendcoin(uint64(m.Before))
	}
	if m.After != 0 {
		n += 1 + sovTrendcoin(uint64(m.After))
	}
	if m.Asc {
		n += 2
	}
	return n
}

func (m *Transaction) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTrendcoin(uint64(m.Id))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTrendcoin(uint64(m.CreatedAt))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTrendcoin(uint64(l))
	}
	return n
}

func (m *TransactionLogReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovTrendcoin(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTrendcoin(uint64(l))
	}
	if m.HasMore {
		n += 2
	}
	return n
}

func sovTrendcoin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTrendcoin(x uint64) (n int) {
	return sovTrendcoin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrendcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrendcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrendcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrendcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrendcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrendcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrendcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrendcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Autorefill", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Autorefill = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Failed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTrendcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrendcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrendcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			m.Destination = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Destination |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrendcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowCredit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowCredit = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowEmptySide", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowEmptySide = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdempotencyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrendcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdempotencyKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrendcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrendcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MakeTransactionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrendcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MakeTransactionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MakeTransactionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrendcoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &TransactionData{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutorefill", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutorefill = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTrendcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrendcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MakeTransactionsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrendcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MakeTransactionsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MakeTransactionsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrendcoin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTrendcoin
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrendcoin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TransactionIds = append(m.TransactionIds, v)
				}
			} else if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrendcoin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TransactionIds = append(m.TransactionIds, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrendcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrendcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrendcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrendcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Before", wireType)
			}
			m.Before = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Before |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			m.After = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.After |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Asc = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTrendcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrendcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrendcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrendcoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TransactionData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrendcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrendcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionLogReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrendcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionLogReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionLogReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrendcoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrendcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTrendcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrendcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrendcoin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrendcoin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrendcoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTrendcoin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTrendcoin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTrendcoin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTrendcoin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrendcoin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("trendcoin.proto", fileDescriptorTrendcoin) }

var fileDescriptorTrendcoin = []byte{
	// 638 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0xb1, 0x72, 0xd3, 0x4c,
	0x18, 0x8c, 0x6c, 0xc7, 0x8e, 0x3f, 0x3b, 0x8e, 0xe7, 0xfe, 0x3f, 0x89, 0xe2, 0x19, 0x3c, 0x42,
	0x14, 0x31, 0x4d, 0x8a, 0xd0, 0x51, 0x84, 0x49, 0x80, 0x22, 0x03, 0xa1, 0xb8, 0x64, 0x28, 0x68,
	0x34, 0x17, 0xdd, 0x27, 0x72, 0x13, 0x59, 0x67, 0xee, 0xce, 0x30, 0xa2, 0xa0, 0x60, 0x86, 0x9e,
	0x27, 0xe0, 0x79, 0x28, 0x79, 0x04, 0x26, 0x3c, 0x01, 0x6f, 0xc0, 0xdc, 0x49, 0x71, 0x64, 0xe3,
	0x84, 0xce, 0xbb, 0x5a, 0x7d, 0xb7, 0xfe, 0x76, 0x75, 0xb0, 0x61, 0x14, 0x66, 0x3c, 0x96, 0x22,
	0xdb, 0x9b, 0x28, 0x69, 0x24, 0x69, 0xcf, 0x88, 0xf0, 0x21, 0xf4, 0x8e, 0x58, 0xca, 0xb2, 0x18,
	0x29, 0xbe, 0x9b, 0xa2, 0x36, 0x64, 0x1b, 0x5a, 0x53, 0x8d, 0x2a, 0x12, 0xdc, 0xf7, 0x02, 0x6f,
	0xd4, 0xa0, 0x4d, 0x0b, 0x8f, 0x79, 0x78, 0x00, 0xdd, 0x99, 0x74, 0x92, 0xe6, 0xc4, 0x87, 0xd6,
	0x79, 0x81, 0x9d, 0xb0, 0x4e, 0xaf, 0x21, 0xf9, 0x1f, 0x56, 0x51, 0x29, 0xa9, 0xfc, 0x5a, 0xe0,
	0x8d, 0xda, 0xb4, 0x00, 0xe1, 0x47, 0x58, 0x2f, 0xdf, 0x7f, 0x25, 0x8d, 0x48, 0xf2, 0x5b, 0x4f,
	0xaa, 0x4e, 0xae, 0xcd, 0x4f, 0x1e, 0x02, 0xb0, 0xa9, 0x91, 0x0a, 0x13, 0x91, 0xa6, 0x7e, 0x3d,
	0xf0, 0x46, 0x6b, 0xb4, 0xc2, 0x90, 0x2d, 0x68, 0x26, 0x4c, 0xa4, 0xc8, 0xfd, 0x86, 0x7b, 0x56,
	0xa2, 0xf0, 0xb7, 0x07, 0x1b, 0x67, 0x8a, 0x65, 0x9a, 0xc5, 0x46, 0xc8, 0xec, 0x19, 0x33, 0xcc,
	0x6a, 0xb5, 0x9c, 0xaa, 0xd2, 0x7e, 0x83, 0x96, 0x88, 0x04, 0xd0, 0xe1, 0xa8, 0x8d, 0xc8, 0x98,
	0x95, 0x3a, 0x07, 0x0d, 0x5a, 0xa5, 0xec, 0x9b, 0x6c, 0x2c, 0xa7, 0x99, 0x71, 0x0e, 0x1a, 0xb4,
	0x44, 0x96, 0x57, 0xc8, 0xb4, 0xcc, 0xdc, 0xe9, 0x6d, 0x5a, 0x22, 0x72, 0x1f, 0xba, 0x2c, 0x4d,
	0xe5, 0x87, 0x28, 0x56, 0xc8, 0x85, 0xf1, 0x57, 0x9d, 0xb7, 0x8e, 0xe3, 0x9e, 0x3a, 0x8a, 0x8c,
	0xa0, 0x5f, 0x48, 0x70, 0x3c, 0x31, 0x79, 0xa4, 0x05, 0x47, 0xbf, 0xe9, 0x64, 0x3d, 0xc7, 0x3f,
	0xb7, 0xf4, 0xa9, 0xe0, 0x48, 0x76, 0x61, 0x43, 0x70, 0x1c, 0x4f, 0xa4, 0xc1, 0x2c, 0xce, 0xa3,
	0x4b, 0xcc, 0xfd, 0x96, 0x3b, 0xad, 0x57, 0xa1, 0x5f, 0x60, 0x1e, 0x7e, 0x82, 0xed, 0x13, 0x76,
	0x89, 0x95, 0xbf, 0xad, 0xaf, 0x33, 0x3e, 0x80, 0xae, 0xa9, 0xd0, 0xbe, 0x17, 0xd4, 0x47, 0x9d,
	0xfd, 0xc1, 0xde, 0x4d, 0x51, 0x16, 0x96, 0x45, 0xe7, 0xf4, 0xe4, 0x01, 0xac, 0x0b, 0x1d, 0x55,
	0x92, 0xa8, 0x39, 0xab, 0x5d, 0xa1, 0x0f, 0x67, 0x5c, 0xf8, 0x1a, 0x36, 0xff, 0x3e, 0xdf, 0x16,
	0x67, 0xd7, 0x36, 0x72, 0x46, 0x46, 0x82, 0x17, 0x06, 0x1a, 0xb4, 0x57, 0xa1, 0x8f, 0xb9, 0xbe,
	0xa5, 0x47, 0xdf, 0x3c, 0xd8, 0xac, 0x0c, 0x7d, 0x29, 0xdf, 0xfe, 0xab, 0xba, 0x76, 0x50, 0x2a,
	0xc6, 0xc2, 0x94, 0x61, 0x16, 0xc0, 0xc6, 0x25, 0x93, 0x44, 0xe3, 0x2c, 0xc6, 0x02, 0x59, 0xfe,
	0x1c, 0x13, 0xa9, 0xd0, 0xc5, 0x58, 0xa7, 0x25, 0xb2, 0x53, 0x58, 0x62, 0x50, 0xb9, 0xfc, 0xea,
	0xb4, 0x00, 0xa4, 0x0f, 0x75, 0xa6, 0xe3, 0x32, 0x2c, 0xfb, 0x33, 0x4c, 0xa1, 0x53, 0xf1, 0x47,
	0x7a, 0x50, 0x9b, 0x19, 0xaa, 0x09, 0x4e, 0xee, 0x01, 0xc4, 0x0a, 0x99, 0x41, 0x1e, 0x31, 0x53,
	0x16, 0xbc, 0x5d, 0x32, 0x87, 0x86, 0xec, 0x41, 0x83, 0x33, 0xc3, 0x9c, 0xa7, 0xbb, 0x33, 0x71,
	0xba, 0xf0, 0xb3, 0x07, 0xff, 0x2d, 0xae, 0xc3, 0x6e, 0xf9, 0xf1, 0xd2, 0x8c, 0xb7, 0x96, 0xcf,
	0x5b, 0xc8, 0x77, 0xe9, 0xe2, 0xc9, 0x0e, 0xac, 0x5d, 0x30, 0x1d, 0x8d, 0xed, 0x66, 0x8a, 0x4f,
	0xaf, 0x75, 0xc1, 0xf4, 0x89, 0x54, 0xb8, 0xff, 0xa5, 0x06, 0xfd, 0xb3, 0xeb, 0xc1, 0xa7, 0xa8,
	0xde, 0x8b, 0x18, 0xc9, 0x13, 0x68, 0x95, 0x1f, 0x3c, 0xd9, 0xa9, 0x1c, 0x3b, 0x7f, 0xdf, 0x0c,
	0xb6, 0x97, 0x3d, 0x9a, 0xa4, 0x79, 0xb8, 0x42, 0xde, 0x40, 0x7f, 0xb1, 0x41, 0x24, 0xac, 0xc8,
	0x6f, 0xa9, 0xf7, 0x20, 0xb8, 0x53, 0x53, 0xcc, 0x3e, 0x83, 0xde, 0xfc, 0xd6, 0x48, 0xb0, 0x7c,
	0x35, 0x37, 0xfd, 0x1a, 0x0c, 0xef, 0x50, 0xb8, 0xa9, 0x47, 0xfd, 0xef, 0x57, 0x43, 0xef, 0xc7,
	0xd5, 0xd0, 0xfb, 0x79, 0x35, 0xf4, 0xbe, 0xfe, 0x1a, 0xae, 0x9c, 0x37, 0xdd, 0x95, 0xfb, 0xe8,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x12, 0x46, 0x05, 0x85, 0x05, 0x00, 0x00,
}
