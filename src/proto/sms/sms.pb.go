// Code generated by protoc-gen-gogo.
// source: sms.proto
// DO NOT EDIT!

/*
	Package sms is a generated protocol buffer package.

	It is generated from these files:
		sms.proto

	It has these top-level messages:
		SendSMSRequest
		SendSMSResult
		RetrieveSmsStatusRequest
		RetrieveSmsStatusResult
*/
package sms

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendSMSRequest struct {
	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *SendSMSRequest) Reset()                    { *m = SendSMSRequest{} }
func (m *SendSMSRequest) String() string            { return proto.CompactTextString(m) }
func (*SendSMSRequest) ProtoMessage()               {}
func (*SendSMSRequest) Descriptor() ([]byte, []int) { return fileDescriptorSms, []int{0} }

type SendSMSResult struct {
	SmsId     int64  `protobuf:"varint,1,opt,name=sms_id,json=smsId,proto3" json:"sms_id,omitempty"`
	SmsStatus string `protobuf:"bytes,2,opt,name=sms_status,json=smsStatus,proto3" json:"sms_status,omitempty"`
	SmsError  string `protobuf:"bytes,3,opt,name=sms_error,json=smsError,proto3" json:"sms_error,omitempty"`
	Id        int64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *SendSMSResult) Reset()                    { *m = SendSMSResult{} }
func (m *SendSMSResult) String() string            { return proto.CompactTextString(m) }
func (*SendSMSResult) ProtoMessage()               {}
func (*SendSMSResult) Descriptor() ([]byte, []int) { return fileDescriptorSms, []int{1} }

type RetrieveSmsStatusRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RetrieveSmsStatusRequest) Reset()                    { *m = RetrieveSmsStatusRequest{} }
func (m *RetrieveSmsStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*RetrieveSmsStatusRequest) ProtoMessage()               {}
func (*RetrieveSmsStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorSms, []int{2} }

type RetrieveSmsStatusResult struct {
	SmsId     int64  `protobuf:"varint,1,opt,name=sms_id,json=smsId,proto3" json:"sms_id,omitempty"`
	SmsStatus string `protobuf:"bytes,2,opt,name=sms_status,json=smsStatus,proto3" json:"sms_status,omitempty"`
	SmsError  string `protobuf:"bytes,3,opt,name=sms_error,json=smsError,proto3" json:"sms_error,omitempty"`
	Id        int64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RetrieveSmsStatusResult) Reset()                    { *m = RetrieveSmsStatusResult{} }
func (m *RetrieveSmsStatusResult) String() string            { return proto.CompactTextString(m) }
func (*RetrieveSmsStatusResult) ProtoMessage()               {}
func (*RetrieveSmsStatusResult) Descriptor() ([]byte, []int) { return fileDescriptorSms, []int{3} }

func init() {
	proto.RegisterType((*SendSMSRequest)(nil), "sms.SendSMSRequest")
	proto.RegisterType((*SendSMSResult)(nil), "sms.SendSMSResult")
	proto.RegisterType((*RetrieveSmsStatusRequest)(nil), "sms.RetrieveSmsStatusRequest")
	proto.RegisterType((*RetrieveSmsStatusResult)(nil), "sms.RetrieveSmsStatusResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SmsService service

type SmsServiceClient interface {
	SendSMS(ctx context.Context, in *SendSMSRequest, opts ...grpc.CallOption) (*SendSMSResult, error)
	RetrieveSmsStatus(ctx context.Context, in *RetrieveSmsStatusRequest, opts ...grpc.CallOption) (*RetrieveSmsStatusResult, error)
}

type smsServiceClient struct {
	cc *grpc.ClientConn
}

func NewSmsServiceClient(cc *grpc.ClientConn) SmsServiceClient {
	return &smsServiceClient{cc}
}

func (c *smsServiceClient) SendSMS(ctx context.Context, in *SendSMSRequest, opts ...grpc.CallOption) (*SendSMSResult, error) {
	out := new(SendSMSResult)
	err := grpc.Invoke(ctx, "/sms.SmsService/SendSMS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsServiceClient) RetrieveSmsStatus(ctx context.Context, in *RetrieveSmsStatusRequest, opts ...grpc.CallOption) (*RetrieveSmsStatusResult, error) {
	out := new(RetrieveSmsStatusResult)
	err := grpc.Invoke(ctx, "/sms.SmsService/RetrieveSmsStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SmsService service

type SmsServiceServer interface {
	SendSMS(context.Context, *SendSMSRequest) (*SendSMSResult, error)
	RetrieveSmsStatus(context.Context, *RetrieveSmsStatusRequest) (*RetrieveSmsStatusResult, error)
}

func RegisterSmsServiceServer(s *grpc.Server, srv SmsServiceServer) {
	s.RegisterService(&_SmsService_serviceDesc, srv)
}

func _SmsService_SendSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServiceServer).SendSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sms.SmsService/SendSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServiceServer).SendSMS(ctx, req.(*SendSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsService_RetrieveSmsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSmsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServiceServer).RetrieveSmsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sms.SmsService/RetrieveSmsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServiceServer).RetrieveSmsStatus(ctx, req.(*RetrieveSmsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SmsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sms.SmsService",
	HandlerType: (*SmsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSMS",
			Handler:    _SmsService_SendSMS_Handler,
		},
		{
			MethodName: "RetrieveSmsStatus",
			Handler:    _SmsService_RetrieveSmsStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sms.proto",
}

func (m *SendSMSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendSMSRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSms(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSms(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *SendSMSResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendSMSResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SmsId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSms(dAtA, i, uint64(m.SmsId))
	}
	if len(m.SmsStatus) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSms(dAtA, i, uint64(len(m.SmsStatus)))
		i += copy(dAtA[i:], m.SmsStatus)
	}
	if len(m.SmsError) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSms(dAtA, i, uint64(len(m.SmsError)))
		i += copy(dAtA[i:], m.SmsError)
	}
	if m.Id != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSms(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *RetrieveSmsStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveSmsStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSms(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *RetrieveSmsStatusResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveSmsStatusResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SmsId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSms(dAtA, i, uint64(m.SmsId))
	}
	if len(m.SmsStatus) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSms(dAtA, i, uint64(len(m.SmsStatus)))
		i += copy(dAtA[i:], m.SmsStatus)
	}
	if len(m.SmsError) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSms(dAtA, i, uint64(len(m.SmsError)))
		i += copy(dAtA[i:], m.SmsError)
	}
	if m.Id != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSms(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func encodeFixed64Sms(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Sms(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSms(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SendSMSRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovSms(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSms(uint64(l))
	}
	return n
}

func (m *SendSMSResult) Size() (n int) {
	var l int
	_ = l
	if m.SmsId != 0 {
		n += 1 + sovSms(uint64(m.SmsId))
	}
	l = len(m.SmsStatus)
	if l > 0 {
		n += 1 + l + sovSms(uint64(l))
	}
	l = len(m.SmsError)
	if l > 0 {
		n += 1 + l + sovSms(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSms(uint64(m.Id))
	}
	return n
}

func (m *RetrieveSmsStatusRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSms(uint64(m.Id))
	}
	return n
}

func (m *RetrieveSmsStatusResult) Size() (n int) {
	var l int
	_ = l
	if m.SmsId != 0 {
		n += 1 + sovSms(uint64(m.SmsId))
	}
	l = len(m.SmsStatus)
	if l > 0 {
		n += 1 + l + sovSms(uint64(l))
	}
	l = len(m.SmsError)
	if l > 0 {
		n += 1 + l + sovSms(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSms(uint64(m.Id))
	}
	return n
}

func sovSms(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSms(x uint64) (n int) {
	return sovSms(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SendSMSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendSMSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendSMSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendSMSResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendSMSResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendSMSResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsId", wireType)
			}
			m.SmsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SmsId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveSmsStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveSmsStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveSmsStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveSmsStatusResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveSmsStatusResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveSmsStatusResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsId", wireType)
			}
			m.SmsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SmsId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSms(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSms
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSms
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSms
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSms
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSms
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSms(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSms = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSms   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sms.proto", fileDescriptorSms) }

var fileDescriptorSms = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x52, 0x31, 0x4e, 0x03, 0x31,
	0x10, 0x8c, 0xef, 0x48, 0x20, 0x2b, 0x11, 0x85, 0x05, 0xc4, 0x29, 0x90, 0x13, 0xba, 0x0a, 0x51,
	0xa4, 0x00, 0x0a, 0x6a, 0x24, 0x0a, 0x0a, 0x1a, 0xfb, 0x01, 0x11, 0xe0, 0x15, 0x58, 0xc2, 0xb9,
	0xe0, 0xf5, 0xa5, 0xe2, 0x1d, 0x88, 0x27, 0x51, 0xf2, 0x04, 0x74, 0x7c, 0x04, 0xd9, 0x97, 0x44,
	0x8a, 0x20, 0x2d, 0x9d, 0x77, 0x76, 0x76, 0x3c, 0x1e, 0x2f, 0x74, 0xd9, 0xf2, 0x68, 0xea, 0x4a,
	0x5f, 0x62, 0xca, 0x96, 0x8b, 0x4b, 0xe8, 0x29, 0x9a, 0x68, 0x75, 0xab, 0x24, 0xbd, 0x54, 0xc4,
	0x1e, 0xf7, 0xa0, 0x3d, 0x7d, 0x2a, 0x27, 0x94, 0x89, 0x63, 0x71, 0xd2, 0x95, 0x4d, 0x81, 0x7d,
	0x48, 0x2d, 0x3f, 0x66, 0x49, 0xc4, 0xc2, 0xb1, 0x70, 0xb0, 0xbd, 0x9c, 0xe4, 0xea, 0xd9, 0xe3,
	0x3e, 0x74, 0xd8, 0xf2, 0xd8, 0xe8, 0x38, 0x99, 0xca, 0x36, 0x5b, 0xbe, 0xd1, 0x38, 0x04, 0x08,
	0x30, 0xfb, 0x3b, 0x5f, 0xf1, 0x5c, 0x20, 0xb8, 0x50, 0x11, 0xc0, 0xc3, 0x68, 0x69, 0x4c, 0xce,
	0x95, 0x2e, 0x4b, 0x63, 0x77, 0x8b, 0x2d, 0x5f, 0x87, 0x1a, 0x7b, 0x90, 0x18, 0x9d, 0x6d, 0x44,
	0xb9, 0xc4, 0xe8, 0xe2, 0x14, 0x32, 0x49, 0xde, 0x19, 0x9a, 0x91, 0x5a, 0x28, 0x2c, 0x7c, 0x37,
	0x5c, 0xb1, 0xe4, 0xbe, 0xc2, 0xc1, 0x1f, 0xdc, 0x7f, 0x72, 0x7a, 0xf6, 0x26, 0x00, 0xc2, 0xb5,
	0xe4, 0x66, 0xe6, 0x81, 0xf0, 0x02, 0x36, 0xe7, 0x61, 0xe1, 0xee, 0x28, 0x7c, 0xc1, 0x6a, 0xe8,
	0x03, 0x5c, 0x05, 0x83, 0xcb, 0xa2, 0x85, 0x12, 0x76, 0x7e, 0x3d, 0x01, 0x87, 0x91, 0xba, 0x2e,
	0x86, 0xc1, 0xd1, 0xba, 0x76, 0xa3, 0x79, 0xd5, 0xff, 0xa8, 0x73, 0xf1, 0x59, 0xe7, 0xe2, 0xab,
	0xce, 0xc5, 0xfb, 0x77, 0xde, 0xba, 0xef, 0xc4, 0x75, 0x38, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff,
	0x2c, 0x87, 0xfc, 0xf8, 0x1b, 0x02, 0x00, 0x00,
}
