// Code generated by protoc-gen-gogo.
// source: bot.proto
// DO NOT EDIT!

/*
	Package bot is a generated protocol buffer package.

	It is generated from these files:
		bot.proto

	It has these top-level messages:
		RetriveCond
		RetrieveActivitiesRequest
		RetrieveActivitiesReply
		SendDirectRequest
		SendDirectReply
		Activity
		DirectNotify
		CreateThreadRequest
		SaveProductResult
*/
package bot

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// @TODO MentionedRole should be syhnonized with accountstore roles. any way to get normal imports?..
type MentionedRole int32

const (
	MentionedRole_User      MentionedRole = 0
	MentionedRole_Savetrend MentionedRole = 1
	MentionedRole_Wantit    MentionedRole = 2
)

var MentionedRole_name = map[int32]string{
	0: "User",
	1: "Savetrend",
	2: "Wantit",
}
var MentionedRole_value = map[string]int32{
	"User":      0,
	"Savetrend": 1,
	"Wantit":    2,
}

func (x MentionedRole) String() string {
	return proto.EnumName(MentionedRole_name, int32(x))
}
func (MentionedRole) EnumDescriptor() ([]byte, []int) { return fileDescriptorBot, []int{0} }

type MessageType int32

const (
	MessageType_None       MessageType = 0
	MessageType_Text       MessageType = 1
	MessageType_MediaShare MessageType = 2
	MessageType_Image      MessageType = 3
	// for internal usage inside fether only
	MessageType_CreateThread MessageType = 127
	// for creating comments
	MessageType_ReplyComment MessageType = 255
)

var MessageType_name = map[int32]string{
	0:   "None",
	1:   "Text",
	2:   "MediaShare",
	3:   "Image",
	127: "CreateThread",
	255: "ReplyComment",
}
var MessageType_value = map[string]int32{
	"None":         0,
	"Text":         1,
	"MediaShare":   2,
	"Image":        3,
	"CreateThread": 127,
	"ReplyComment": 255,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBot, []int{1} }

type RetriveCond struct {
	Role MentionedRole `protobuf:"varint,1,opt,name=role,proto3,enum=bot.MentionedRole" json:"role,omitempty"`
	Type []string      `protobuf:"bytes,2,rep,name=type" json:"type,omitempty"`
}

func (m *RetriveCond) Reset()                    { *m = RetriveCond{} }
func (m *RetriveCond) String() string            { return proto.CompactTextString(m) }
func (*RetriveCond) ProtoMessage()               {}
func (*RetriveCond) Descriptor() ([]byte, []int) { return fileDescriptorBot, []int{0} }

type RetrieveActivitiesRequest struct {
	Conds   []*RetriveCond `protobuf:"bytes,1,rep,name=conds" json:"conds,omitempty"`
	AfterId int64          `protobuf:"varint,2,opt,name=after_id,json=afterId,proto3" json:"after_id,omitempty"`
	Limit   int64          `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *RetrieveActivitiesRequest) Reset()                    { *m = RetrieveActivitiesRequest{} }
func (m *RetrieveActivitiesRequest) String() string            { return proto.CompactTextString(m) }
func (*RetrieveActivitiesRequest) ProtoMessage()               {}
func (*RetrieveActivitiesRequest) Descriptor() ([]byte, []int) { return fileDescriptorBot, []int{1} }

func (m *RetrieveActivitiesRequest) GetConds() []*RetriveCond {
	if m != nil {
		return m.Conds
	}
	return nil
}

type RetrieveActivitiesReply struct {
	Result []*Activity `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *RetrieveActivitiesReply) Reset()                    { *m = RetrieveActivitiesReply{} }
func (m *RetrieveActivitiesReply) String() string            { return proto.CompactTextString(m) }
func (*RetrieveActivitiesReply) ProtoMessage()               {}
func (*RetrieveActivitiesReply) Descriptor() ([]byte, []int) { return fileDescriptorBot, []int{2} }

func (m *RetrieveActivitiesReply) GetResult() []*Activity {
	if m != nil {
		return m.Result
	}
	return nil
}

type SendDirectRequest struct {
	SenderId uint64      `protobuf:"varint,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	Data     string      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Type     MessageType `protobuf:"varint,6,opt,name=type,proto3,enum=bot.MessageType" json:"type,omitempty"`
	// only one of two followed fields need to be setted
	ThreadId   string `protobuf:"bytes,3,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	RecieverId uint64 `protobuf:"varint,4,opt,name=reciever_id,json=recieverId,proto3" json:"reciever_id,omitempty"`
	ReplyKey   string `protobuf:"bytes,5,opt,name=reply_key,json=replyKey,proto3" json:"reply_key,omitempty"`
}

func (m *SendDirectRequest) Reset()                    { *m = SendDirectRequest{} }
func (m *SendDirectRequest) String() string            { return proto.CompactTextString(m) }
func (*SendDirectRequest) ProtoMessage()               {}
func (*SendDirectRequest) Descriptor() ([]byte, []int) { return fileDescriptorBot, []int{3} }

type SendDirectReply struct {
}

func (m *SendDirectReply) Reset()                    { *m = SendDirectReply{} }
func (m *SendDirectReply) String() string            { return proto.CompactTextString(m) }
func (*SendDirectReply) ProtoMessage()               {}
func (*SendDirectReply) Descriptor() ([]byte, []int) { return fileDescriptorBot, []int{4} }

type Activity struct {
	Id                int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pk                string        `protobuf:"bytes,2,opt,name=pk,proto3" json:"pk,omitempty"`
	MediaId           string        `protobuf:"bytes,3,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	MediaUrl          string        `protobuf:"bytes,4,opt,name=media_url,json=mediaUrl,proto3" json:"media_url,omitempty"`
	UserId            uint64        `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName          string        `protobuf:"bytes,6,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	MentionedUsername string        `protobuf:"bytes,8,opt,name=mentioned_username,json=mentionedUsername,proto3" json:"mentioned_username,omitempty"`
	MetionedRole      MentionedRole `protobuf:"varint,13,opt,name=metioned_role,json=metionedRole,proto3,enum=bot.MentionedRole" json:"metioned_role,omitempty"`
	Type              string        `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Comment           string        `protobuf:"bytes,10,opt,name=comment,proto3" json:"comment,omitempty"`
	CreatedAt         int64         `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DirectThreadId    string        `protobuf:"bytes,12,opt,name=direct_thread_id,json=directThreadId,proto3" json:"direct_thread_id,omitempty"`
}

func (m *Activity) Reset()                    { *m = Activity{} }
func (m *Activity) String() string            { return proto.CompactTextString(m) }
func (*Activity) ProtoMessage()               {}
func (*Activity) Descriptor() ([]byte, []int) { return fileDescriptorBot, []int{5} }

// to avoid races this message used in feed notifications AND replies on SendDirect|CreateThread
type DirectNotify struct {
	ThreadId  string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// fields for new message notifies
	// instagram id
	UserId uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// instagram id of account which provided notification
	SourceId uint64      `protobuf:"varint,8,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Type     MessageType `protobuf:"varint,9,opt,name=type,proto3,enum=bot.MessageType" json:"type,omitempty"`
	Data     string      `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// for replies
	ReplyKey string `protobuf:"bytes,6,opt,name=reply_key,json=replyKey,proto3" json:"reply_key,omitempty"`
	Error    string `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *DirectNotify) Reset()                    { *m = DirectNotify{} }
func (m *DirectNotify) String() string            { return proto.CompactTextString(m) }
func (*DirectNotify) ProtoMessage()               {}
func (*DirectNotify) Descriptor() ([]byte, []int) { return fileDescriptorBot, []int{6} }

// stan direct.create_thread
type CreateThreadRequest struct {
	// inviter instagram id
	Inviter uint64 `protobuf:"varint,1,opt,name=inviter,proto3" json:"inviter,omitempty"`
	// instagram id of other members
	Participant []uint64 `protobuf:"varint,2,rep,packed,name=participant" json:"participant,omitempty"`
	Caption     string   `protobuf:"bytes,3,opt,name=caption,proto3" json:"caption,omitempty"`
	// initial comment message
	InitMessage string `protobuf:"bytes,4,opt,name=init_message,json=initMessage,proto3" json:"init_message,omitempty"`
	// will be send back in CreateThreadReply
	ReplyKey string `protobuf:"bytes,5,opt,name=reply_key,json=replyKey,proto3" json:"reply_key,omitempty"`
}

func (m *CreateThreadRequest) Reset()                    { *m = CreateThreadRequest{} }
func (m *CreateThreadRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateThreadRequest) ProtoMessage()               {}
func (*CreateThreadRequest) Descriptor() ([]byte, []int) { return fileDescriptorBot, []int{7} }

type SaveProductResult struct {
	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Retry bool  `protobuf:"varint,2,opt,name=retry,proto3" json:"retry,omitempty"`
}

func (m *SaveProductResult) Reset()                    { *m = SaveProductResult{} }
func (m *SaveProductResult) String() string            { return proto.CompactTextString(m) }
func (*SaveProductResult) ProtoMessage()               {}
func (*SaveProductResult) Descriptor() ([]byte, []int) { return fileDescriptorBot, []int{8} }

func init() {
	proto.RegisterType((*RetriveCond)(nil), "bot.RetriveCond")
	proto.RegisterType((*RetrieveActivitiesRequest)(nil), "bot.RetrieveActivitiesRequest")
	proto.RegisterType((*RetrieveActivitiesReply)(nil), "bot.RetrieveActivitiesReply")
	proto.RegisterType((*SendDirectRequest)(nil), "bot.SendDirectRequest")
	proto.RegisterType((*SendDirectReply)(nil), "bot.SendDirectReply")
	proto.RegisterType((*Activity)(nil), "bot.Activity")
	proto.RegisterType((*DirectNotify)(nil), "bot.DirectNotify")
	proto.RegisterType((*CreateThreadRequest)(nil), "bot.CreateThreadRequest")
	proto.RegisterType((*SaveProductResult)(nil), "bot.SaveProductResult")
	proto.RegisterEnum("bot.MentionedRole", MentionedRole_name, MentionedRole_value)
	proto.RegisterEnum("bot.MessageType", MessageType_name, MessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FetcherService service

type FetcherServiceClient interface {
	RetrieveActivities(ctx context.Context, in *RetrieveActivitiesRequest, opts ...grpc.CallOption) (*RetrieveActivitiesReply, error)
	SendDirect(ctx context.Context, in *SendDirectRequest, opts ...grpc.CallOption) (*SendDirectReply, error)
}

type fetcherServiceClient struct {
	cc *grpc.ClientConn
}

func NewFetcherServiceClient(cc *grpc.ClientConn) FetcherServiceClient {
	return &fetcherServiceClient{cc}
}

func (c *fetcherServiceClient) RetrieveActivities(ctx context.Context, in *RetrieveActivitiesRequest, opts ...grpc.CallOption) (*RetrieveActivitiesReply, error) {
	out := new(RetrieveActivitiesReply)
	err := grpc.Invoke(ctx, "/bot.FetcherService/RetrieveActivities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetcherServiceClient) SendDirect(ctx context.Context, in *SendDirectRequest, opts ...grpc.CallOption) (*SendDirectReply, error) {
	out := new(SendDirectReply)
	err := grpc.Invoke(ctx, "/bot.FetcherService/SendDirect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FetcherService service

type FetcherServiceServer interface {
	RetrieveActivities(context.Context, *RetrieveActivitiesRequest) (*RetrieveActivitiesReply, error)
	SendDirect(context.Context, *SendDirectRequest) (*SendDirectReply, error)
}

func RegisterFetcherServiceServer(s *grpc.Server, srv FetcherServiceServer) {
	s.RegisterService(&_FetcherService_serviceDesc, srv)
}

func _FetcherService_RetrieveActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServiceServer).RetrieveActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.FetcherService/RetrieveActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServiceServer).RetrieveActivities(ctx, req.(*RetrieveActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetcherService_SendDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServiceServer).SendDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.FetcherService/SendDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServiceServer).SendDirect(ctx, req.(*SendDirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FetcherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bot.FetcherService",
	HandlerType: (*FetcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveActivities",
			Handler:    _FetcherService_RetrieveActivities_Handler,
		},
		{
			MethodName: "SendDirect",
			Handler:    _FetcherService_SendDirect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bot.proto",
}

// Client API for SaveTrendService service

type SaveTrendServiceClient interface {
	SaveProduct(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*SaveProductResult, error)
}

type saveTrendServiceClient struct {
	cc *grpc.ClientConn
}

func NewSaveTrendServiceClient(cc *grpc.ClientConn) SaveTrendServiceClient {
	return &saveTrendServiceClient{cc}
}

func (c *saveTrendServiceClient) SaveProduct(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*SaveProductResult, error) {
	out := new(SaveProductResult)
	err := grpc.Invoke(ctx, "/bot.SaveTrendService/SaveProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SaveTrendService service

type SaveTrendServiceServer interface {
	SaveProduct(context.Context, *Activity) (*SaveProductResult, error)
}

func RegisterSaveTrendServiceServer(s *grpc.Server, srv SaveTrendServiceServer) {
	s.RegisterService(&_SaveTrendService_serviceDesc, srv)
}

func _SaveTrendService_SaveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaveTrendServiceServer).SaveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.SaveTrendService/SaveProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaveTrendServiceServer).SaveProduct(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

var _SaveTrendService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bot.SaveTrendService",
	HandlerType: (*SaveTrendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveProduct",
			Handler:    _SaveTrendService_SaveProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bot.proto",
}

func (m *RetriveCond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetriveCond) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Role != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.Role))
	}
	if len(m.Type) > 0 {
		for _, s := range m.Type {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RetrieveActivitiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveActivitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Conds) > 0 {
		for _, msg := range m.Conds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBot(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AfterId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.AfterId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *RetrieveActivitiesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveActivitiesReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBot(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SendDirectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendDirectRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SenderId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.SenderId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.ThreadId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.ThreadId)))
		i += copy(dAtA[i:], m.ThreadId)
	}
	if m.RecieverId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.RecieverId))
	}
	if len(m.ReplyKey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.ReplyKey)))
		i += copy(dAtA[i:], m.ReplyKey)
	}
	if m.Type != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *SendDirectReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendDirectReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Activity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Activity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.Id))
	}
	if len(m.Pk) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.Pk)))
		i += copy(dAtA[i:], m.Pk)
	}
	if len(m.MediaId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.MediaId)))
		i += copy(dAtA[i:], m.MediaId)
	}
	if len(m.MediaUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.MediaUrl)))
		i += copy(dAtA[i:], m.MediaUrl)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.UserId))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.MentionedUsername) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.MentionedUsername)))
		i += copy(dAtA[i:], m.MentionedUsername)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Comment) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.Comment)))
		i += copy(dAtA[i:], m.Comment)
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.CreatedAt))
	}
	if len(m.DirectThreadId) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.DirectThreadId)))
		i += copy(dAtA[i:], m.DirectThreadId)
	}
	if m.MetionedRole != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.MetionedRole))
	}
	return i, nil
}

func (m *DirectNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.ThreadId)))
		i += copy(dAtA[i:], m.ThreadId)
	}
	if len(m.MessageId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.MessageId)))
		i += copy(dAtA[i:], m.MessageId)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.UserId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.ReplyKey) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.ReplyKey)))
		i += copy(dAtA[i:], m.ReplyKey)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.SourceId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.SourceId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *CreateThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inviter != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.Inviter))
	}
	if len(m.Participant) > 0 {
		dAtA2 := make([]byte, len(m.Participant)*10)
		var j1 int
		for _, num := range m.Participant {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintBot(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Caption) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.Caption)))
		i += copy(dAtA[i:], m.Caption)
	}
	if len(m.InitMessage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.InitMessage)))
		i += copy(dAtA[i:], m.InitMessage)
	}
	if len(m.ReplyKey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBot(dAtA, i, uint64(len(m.ReplyKey)))
		i += copy(dAtA[i:], m.ReplyKey)
	}
	return i, nil
}

func (m *SaveProductResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveProductResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBot(dAtA, i, uint64(m.Id))
	}
	if m.Retry {
		dAtA[i] = 0x10
		i++
		if m.Retry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Bot(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Bot(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBot(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RetriveCond) Size() (n int) {
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovBot(uint64(m.Role))
	}
	if len(m.Type) > 0 {
		for _, s := range m.Type {
			l = len(s)
			n += 1 + l + sovBot(uint64(l))
		}
	}
	return n
}

func (m *RetrieveActivitiesRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Conds) > 0 {
		for _, e := range m.Conds {
			l = e.Size()
			n += 1 + l + sovBot(uint64(l))
		}
	}
	if m.AfterId != 0 {
		n += 1 + sovBot(uint64(m.AfterId))
	}
	if m.Limit != 0 {
		n += 1 + sovBot(uint64(m.Limit))
	}
	return n
}

func (m *RetrieveActivitiesReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovBot(uint64(l))
		}
	}
	return n
}

func (m *SendDirectRequest) Size() (n int) {
	var l int
	_ = l
	if m.SenderId != 0 {
		n += 1 + sovBot(uint64(m.SenderId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	l = len(m.ThreadId)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	if m.RecieverId != 0 {
		n += 1 + sovBot(uint64(m.RecieverId))
	}
	l = len(m.ReplyKey)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovBot(uint64(m.Type))
	}
	return n
}

func (m *SendDirectReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Activity) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBot(uint64(m.Id))
	}
	l = len(m.Pk)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	l = len(m.MediaId)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	l = len(m.MediaUrl)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovBot(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	l = len(m.MentionedUsername)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovBot(uint64(m.CreatedAt))
	}
	l = len(m.DirectThreadId)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	if m.MetionedRole != 0 {
		n += 1 + sovBot(uint64(m.MetionedRole))
	}
	return n
}

func (m *DirectNotify) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadId)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovBot(uint64(m.UserId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	l = len(m.ReplyKey)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	if m.SourceId != 0 {
		n += 1 + sovBot(uint64(m.SourceId))
	}
	if m.Type != 0 {
		n += 1 + sovBot(uint64(m.Type))
	}
	return n
}

func (m *CreateThreadRequest) Size() (n int) {
	var l int
	_ = l
	if m.Inviter != 0 {
		n += 1 + sovBot(uint64(m.Inviter))
	}
	if len(m.Participant) > 0 {
		l = 0
		for _, e := range m.Participant {
			l += sovBot(uint64(e))
		}
		n += 1 + sovBot(uint64(l)) + l
	}
	l = len(m.Caption)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	l = len(m.InitMessage)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	l = len(m.ReplyKey)
	if l > 0 {
		n += 1 + l + sovBot(uint64(l))
	}
	return n
}

func (m *SaveProductResult) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBot(uint64(m.Id))
	}
	if m.Retry {
		n += 2
	}
	return n
}

func sovBot(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBot(x uint64) (n int) {
	return sovBot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RetriveCond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetriveCond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetriveCond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (MentionedRole(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = append(m.Type, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveActivitiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveActivitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveActivitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conds = append(m.Conds, &RetriveCond{})
			if err := m.Conds[len(m.Conds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterId", wireType)
			}
			m.AfterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AfterId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveActivitiesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveActivitiesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveActivitiesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &Activity{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendDirectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendDirectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendDirectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecieverId", wireType)
			}
			m.RecieverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecieverId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendDirectReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendDirectReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendDirectReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Activity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Activity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Activity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MentionedUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MentionedUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectThreadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectThreadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetionedRole", wireType)
			}
			m.MetionedRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetionedRole |= (MentionedRole(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceId", wireType)
			}
			m.SourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inviter", wireType)
			}
			m.Inviter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Inviter |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBot
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBot
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Participant = append(m.Participant, v)
				}
			} else if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Participant = append(m.Participant, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveProductResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveProductResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveProductResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Retry = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBot
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBot
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBot(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBot = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBot   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("bot.proto", fileDescriptorBot) }

var fileDescriptorBot = []byte{
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x55, 0xcd, 0x8e, 0x1b, 0x45,
	0x10, 0xde, 0xf1, 0xf8, 0x67, 0xa6, 0xfc, 0xc3, 0xb8, 0x59, 0x91, 0xc9, 0x42, 0x8c, 0xb1, 0x20,
	0xb2, 0x22, 0x91, 0xc3, 0x12, 0x09, 0x21, 0x71, 0x20, 0x2c, 0x42, 0x58, 0x28, 0x2b, 0x34, 0xeb,
	0x88, 0xa3, 0xd5, 0x3b, 0x5d, 0xc9, 0xb6, 0xd6, 0xf3, 0x43, 0xbb, 0x6d, 0x31, 0x27, 0x5e, 0x81,
	0x87, 0xe0, 0xc6, 0x73, 0x20, 0x71, 0xe4, 0x11, 0xd0, 0x72, 0xe6, 0xcc, 0x91, 0xa8, 0xab, 0x7b,
	0xd6, 0xf6, 0x3a, 0xc9, 0x6d, 0xea, 0xab, 0xea, 0xee, 0xaa, 0xaf, 0xbe, 0xaa, 0x81, 0xf0, 0xb2,
	0xd0, 0x8f, 0x4b, 0x55, 0xe8, 0x82, 0xf9, 0x97, 0x85, 0x9e, 0xcc, 0xa0, 0x9b, 0xa0, 0x56, 0x72,
	0x83, 0x67, 0x45, 0x2e, 0xd8, 0x43, 0x68, 0xaa, 0x62, 0x89, 0xb1, 0x37, 0xf6, 0xa6, 0x83, 0x53,
	0xf6, 0xd8, 0x44, 0x3f, 0xc3, 0x5c, 0xcb, 0x22, 0x47, 0x91, 0x14, 0x4b, 0x4c, 0xc8, 0xcf, 0x18,
	0x34, 0x75, 0x55, 0x62, 0xdc, 0x18, 0xfb, 0xd3, 0x30, 0xa1, 0xef, 0x89, 0x86, 0xfb, 0x74, 0x15,
	0x6e, 0xf0, 0x69, 0xaa, 0xe5, 0x46, 0x6a, 0x89, 0xab, 0x04, 0x7f, 0x5a, 0xe3, 0x4a, 0xb3, 0x87,
	0xd0, 0x4a, 0x8b, 0x5c, 0xac, 0x62, 0x6f, 0xec, 0x4f, 0xbb, 0xa7, 0x11, 0xdd, 0xbc, 0xf3, 0x72,
	0x62, 0xdd, 0xec, 0x3e, 0x04, 0xfc, 0x85, 0x46, 0xb5, 0x90, 0x22, 0x6e, 0x8c, 0xbd, 0xa9, 0x9f,
	0x74, 0xc8, 0x9e, 0x09, 0x76, 0x0c, 0xad, 0xa5, 0xcc, 0xa4, 0x8e, 0x7d, 0xc2, 0xad, 0x31, 0xf9,
	0x0a, 0xee, 0xbd, 0xee, 0xd5, 0x72, 0x59, 0xb1, 0x4f, 0xa0, 0xad, 0x70, 0xb5, 0x5e, 0x6a, 0xf7,
	0x68, 0x9f, 0x1e, 0x75, 0x51, 0x55, 0xe2, 0x9c, 0x93, 0x3f, 0x3c, 0x18, 0x5e, 0x60, 0x2e, 0xbe,
	0x91, 0x0a, 0x53, 0x5d, 0x27, 0xfc, 0x3e, 0x84, 0x2b, 0xcc, 0x85, 0xcd, 0xc4, 0xd0, 0xd1, 0x4c,
	0x02, 0x0b, 0xcc, 0x84, 0x29, 0x5f, 0x70, 0xcd, 0x29, 0xc3, 0x30, 0xa1, 0x6f, 0x73, 0x40, 0x5f,
	0x29, 0xe4, 0xc2, 0x1c, 0xf0, 0xc9, 0x11, 0x58, 0x60, 0x26, 0xd8, 0x87, 0xd0, 0x55, 0x98, 0x9a,
	0x24, 0xe9, 0xbe, 0x26, 0xdd, 0x07, 0x35, 0x34, 0x13, 0xe6, 0xb4, 0x32, 0x49, 0x2f, 0xae, 0xb1,
	0x8a, 0x5b, 0xf6, 0x34, 0x01, 0xdf, 0x63, 0xc5, 0x3e, 0x76, 0x6c, 0xb7, 0xa9, 0x2b, 0x91, 0xeb,
	0xca, 0x6a, 0xc5, 0x5f, 0xe2, 0xbc, 0x2a, 0xd1, 0xf1, 0x3f, 0x84, 0x77, 0x76, 0xcb, 0x28, 0x97,
	0xd5, 0xe4, 0xbf, 0x06, 0x04, 0x75, 0xbd, 0x6c, 0x00, 0x0d, 0x57, 0x8a, 0x9f, 0x34, 0xa4, 0x30,
	0x76, 0x79, 0xed, 0x4a, 0x68, 0x94, 0xd7, 0x86, 0xfa, 0x0c, 0x85, 0xe4, 0xdb, 0xfc, 0x3b, 0x64,
	0xdb, 0xec, 0xac, 0x6b, 0xad, 0x96, 0x94, 0x7c, 0x98, 0xd8, 0xd8, 0xe7, 0x6a, 0xc9, 0xee, 0x41,
	0x67, 0xbd, 0xb2, 0x75, 0xb5, 0xa8, 0xae, 0xb6, 0x31, 0xed, 0x29, 0x72, 0xe4, 0x3c, 0xb3, 0xb9,
	0x87, 0x49, 0x60, 0x80, 0x73, 0x9e, 0x21, 0xfb, 0x14, 0x58, 0x56, 0x0b, 0x6b, 0x61, 0x50, 0x8a,
	0x0a, 0x28, 0x6a, 0x78, 0xeb, 0x79, 0xee, 0x1c, 0xb7, 0x82, 0x0b, 0x2d, 0xe3, 0xe6, 0x9b, 0xc5,
	0xd0, 0x49, 0x8b, 0xcc, 0xc4, 0xc6, 0x60, 0xf3, 0x75, 0x26, 0x7b, 0x00, 0x90, 0x2a, 0xe4, 0x1a,
	0xc5, 0x82, 0xeb, 0xb8, 0x4b, 0x25, 0x87, 0x0e, 0x79, 0xaa, 0xd9, 0x14, 0x22, 0x41, 0x2c, 0x2d,
	0xb6, 0x1d, 0xeb, 0xd1, 0x0d, 0x03, 0x8b, 0xcf, 0xeb, 0xbe, 0x7d, 0x0e, 0xfd, 0x0c, 0x5d, 0x92,
	0x34, 0x18, 0xfd, 0x37, 0x0e, 0x46, 0xaf, 0x0e, 0x34, 0xd6, 0xe4, 0x5f, 0x0f, 0x7a, 0xb6, 0x13,
	0xe7, 0x85, 0x96, 0x2f, 0xaa, 0x7d, 0x79, 0x78, 0x77, 0xe4, 0xf1, 0x00, 0x20, 0xb3, 0xfd, 0xac,
	0x75, 0x1f, 0x26, 0xa1, 0x43, 0x66, 0x62, 0x97, 0x61, 0x7f, 0x8f, 0xe1, 0x5a, 0x87, 0xcd, 0x7d,
	0x1d, 0x6e, 0x95, 0xd4, 0xbe, 0xa3, 0xa4, 0x63, 0x68, 0xa1, 0x52, 0x85, 0x8a, 0x3b, 0xe4, 0xb0,
	0x06, 0x69, 0xbd, 0x58, 0xab, 0x94, 0x5e, 0x0f, 0x9c, 0xd6, 0x09, 0x98, 0x89, 0x5b, 0xf1, 0x85,
	0x6f, 0x15, 0xdf, 0xef, 0x1e, 0xbc, 0x7b, 0x46, 0x04, 0x5b, 0xee, 0xea, 0x31, 0x8a, 0xa1, 0x23,
	0xf3, 0x8d, 0xd4, 0xa8, 0xdc, 0x10, 0xd5, 0x26, 0x1b, 0x43, 0xb7, 0xe4, 0x4a, 0xcb, 0x54, 0x96,
	0x3c, 0xd7, 0xb4, 0x49, 0x9a, 0xc9, 0x2e, 0x44, 0xfd, 0xe5, 0xa5, 0x21, 0xb5, 0xd6, 0xa3, 0x33,
	0xd9, 0x47, 0xd0, 0x93, 0xb9, 0xd4, 0x0b, 0x47, 0x91, 0xab, 0xbf, 0x6b, 0x30, 0x97, 0xda, 0x5b,
	0x07, 0x6a, 0xf2, 0x05, 0x0c, 0x2f, 0xf8, 0x06, 0x7f, 0x50, 0x85, 0x58, 0x9b, 0x59, 0x31, 0x7b,
	0xe0, 0x60, 0x3e, 0x8e, 0xa1, 0xa5, 0x50, 0xab, 0x8a, 0xfa, 0x11, 0x24, 0xd6, 0x78, 0xf4, 0x04,
	0xfa, 0x7b, 0x7d, 0x67, 0x01, 0x34, 0x8d, 0x4a, 0xa3, 0x23, 0xd6, 0x87, 0xd0, 0xdc, 0xaa, 0x15,
	0xe6, 0x22, 0xf2, 0x18, 0x40, 0xfb, 0x47, 0x9e, 0x6b, 0xa9, 0xa3, 0xc6, 0x23, 0x0e, 0xdd, 0x1d,
	0xce, 0xcc, 0x99, 0xf3, 0x22, 0xc7, 0xe8, 0xc8, 0x7c, 0xcd, 0xf1, 0x67, 0x1d, 0x79, 0x6c, 0x00,
	0xf0, 0xcc, 0x8c, 0xd4, 0xc5, 0x15, 0x57, 0x18, 0x35, 0x58, 0x08, 0xad, 0x59, 0xc6, 0x5f, 0x62,
	0xe4, 0xb3, 0x08, 0x7a, 0xbb, 0xdc, 0x46, 0xbf, 0xb0, 0x21, 0xf4, 0x68, 0xc2, 0xcf, 0xac, 0xe0,
	0xa3, 0xff, 0xbd, 0xd3, 0xdf, 0x3c, 0x18, 0x7c, 0x8b, 0x3a, 0xbd, 0x42, 0x75, 0x81, 0x6a, 0x23,
	0x53, 0x64, 0x73, 0x60, 0x87, 0xbb, 0x91, 0x8d, 0xb6, 0xbb, 0xf7, 0x75, 0xab, 0xfa, 0xe4, 0x83,
	0x37, 0xfa, 0xcd, 0x4a, 0x39, 0x62, 0x5f, 0x02, 0x6c, 0xf7, 0x0c, 0x7b, 0x8f, 0xa2, 0x0f, 0xf6,
	0xe7, 0xc9, 0xf1, 0x01, 0x4e, 0xa7, 0x4f, 0xbf, 0x83, 0xc8, 0x90, 0x34, 0x37, 0x24, 0xd5, 0x79,
	0x3e, 0x81, 0xee, 0x4e, 0x3b, 0xd8, 0xfe, 0x9e, 0x3e, 0x71, 0x2f, 0xdc, 0xed, 0xd7, 0xd7, 0xd1,
	0x9f, 0x37, 0x23, 0xef, 0xaf, 0x9b, 0x91, 0xf7, 0xf7, 0xcd, 0xc8, 0xfb, 0xf5, 0x9f, 0xd1, 0xd1,
	0x65, 0x9b, 0x7e, 0x6c, 0x9f, 0xbd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x02, 0xee, 0x4d, 0x09, 0xe5,
	0x06, 0x00, 0x00,
}
