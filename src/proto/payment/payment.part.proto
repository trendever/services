service PaymentService {

  rpc CreateOrder(CreateOrderRequest) returns (CreateOrderReply) {}

  rpc BuyOrder(BuyOrderRequest) returns (BuyOrderReply) {}

  rpc CancelOrder(CancelOrderRequest) returns (CancelOrderReply) {}

  rpc GetOrder(GetOrderRequest) returns (GetOrderReply) {}

  rpc UpdateServiceData(UpdateServiceDataRequest) returns (UpdateServiceDataReply) {}
}

message OrderData {
  uint64 amount = 1;
  Currency currency = 2;
  string gateway = 3;
  uint64 user_id = 4;

  // payment of our service
  string service_name = 5;
  string service_data = 6;

  // p2p payment
  uint64 lead_id = 7;
  string shop_card_number = 10;

  // in trendcoins
  uint64 commission_fee = 11;
  // user id, usually supplier
  uint64 commission_source = 12;

  bool cancelled = 13;

  string comment = 14;
}

message CreateOrderRequest {
  OrderData data = 1;
}

message GetOrderRequest {
  uint64 id = 1;
}

message GetOrderReply {
  OrderData order = 1;
  // @TODO: some other fields, like open, finished sessions and etc
}

message UpdateServiceDataRequest {
  uint64 id = 1;
  string new_data = 2;
}

message UpdateServiceDataReply {
}

message PaymentNotification {
  uint64 id = 1;
  OrderData data = 2;
  Event event = 3;
  uint64 invoker_user_id = 4;
}

enum Event {
  Created = 0;
  Cancelled = 1;
  PayFailed = 2;
  PaySuccess = 3;
}

message CreateOrderReply {
  uint64 id = 1;
  Errors error = 2;
  string error_message = 3;
}

message BuyOrderRequest {
  uint64 pay_id = 1;
  string ip = 2;
}

message BuyOrderReply {
  string redirect_url = 1;
  Errors error = 2;
  string error_message = 3;
}

message CancelOrderRequest {
  uint64 pay_id = 1;

  // userID just to log it
  uint64 user_id = 5;
}

message CancelOrderReply {
  bool cancelled = 1;
  Errors error = 2;
  string error_message = 3;
}


enum Currency {
  RUB = 0;
  USD = 1;
  COP = 2;
}

enum Errors {
  OK = 0;

  // internal errors
  INVALID_DATA = 1;
  DB_FAILED = 2;
  ALREADY_PAYED = 3;
  PAY_CANCELLED = 4;
  ANOTHER_OPEN_ORDER = 5;
  ALREADY_CANCELLED = 6;

  UNKNOWN_ERROR = 126;
  // external errors
  INIT_FAILED = 127;
  PAY_FAILED = 128;
  CHAT_DOWN = 129;
  COINS_DOWN = 130;
  // commission source lacks funds
  CANT_PAY_FEE = 131;
  // refund fails
  // realy bad in case of Create order: commission was writed off, but pay wasn't created
  REFUND_ERROR = 132;
  NATS_FAILED = 133;
}

enum Direction {
  CLIENT_PAYS = 0;
  CLIENT_RECV = 1;
}

