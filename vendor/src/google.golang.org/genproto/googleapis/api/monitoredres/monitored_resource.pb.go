// Code generated by protoc-gen-go.
// source: google.golang.org/genproto/googleapis/api/monitoredres/monitored_resource.proto
// DO NOT EDIT!

/*
Package monitoredres is a generated protocol buffer package.

It is generated from these files:
	google.golang.org/genproto/googleapis/api/monitoredres/monitored_resource.proto

It has these top-level messages:
	MonitoredResourceDescriptor
	MonitoredResource
*/
package monitoredres // import "google.golang.org/genproto/googleapis/api/monitoredres"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_api "google.golang.org/genproto/googleapis/api/label"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// An object that describes the schema of a [MonitoredResource][google.api.MonitoredResource] object using a
// type name and a set of labels.  For example, the monitored resource
// descriptor for Google Compute Engine VM instances has a type of
// `"gce_instance"` and specifies the use of the labels `"instance_id"` and
// `"zone"` to identify particular VM instances.
//
// Different APIs can support different monitored resource types. APIs generally
// provide a `list` method that returns the monitored resource descriptors used
// by the API.
type MonitoredResourceDescriptor struct {
	// Optional. The resource name of the monitored resource descriptor:
	// `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where
	// {type} is the value of the `type` field in this object and
	// {project_id} is a project ID that provides API-specific context for
	// accessing the type.  APIs that do not use project information can use the
	// resource name format `"monitoredResourceDescriptors/{type}"`.
	Name string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	// Required. The monitored resource type. For example, the type
	// `"cloudsql_database"` represents databases in Google Cloud SQL.
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Optional. A concise name for the monitored resource type that might be
	// displayed in user interfaces. For example, `"Google Cloud SQL Database"`.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// Optional. A detailed description of the monitored resource type that might
	// be used in documentation.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Required. A set of labels used to describe instances of this monitored
	// resource type. For example, an individual Google Cloud SQL database is
	// identified by values for the labels `"database_id"` and `"zone"`.
	Labels []*google_api.LabelDescriptor `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty"`
}

func (m *MonitoredResourceDescriptor) Reset()                    { *m = MonitoredResourceDescriptor{} }
func (m *MonitoredResourceDescriptor) String() string            { return proto.CompactTextString(m) }
func (*MonitoredResourceDescriptor) ProtoMessage()               {}
func (*MonitoredResourceDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MonitoredResourceDescriptor) GetLabels() []*google_api.LabelDescriptor {
	if m != nil {
		return m.Labels
	}
	return nil
}

// An object representing a resource that can be used for monitoring, logging,
// billing, or other purposes. Examples include virtual machine instances,
// databases, and storage devices such as disks. The `type` field identifies a
// [MonitoredResourceDescriptor][google.api.MonitoredResourceDescriptor] object that describes the resource's
// schema. Information in the `labels` field identifies the actual resource and
// its attributes according to the schema. For example, a particular Compute
// Engine VM instance could be represented by the following object, because the
// [MonitoredResourceDescriptor][google.api.MonitoredResourceDescriptor] for `"gce_instance"` has labels
// `"instance_id"` and `"zone"`:
//
//     { "type": "gce_instance",
//       "labels": { "instance_id": "my-instance",
//                   "zone": "us-central1-a" }}
type MonitoredResource struct {
	// Required. The monitored resource type. This field must match
	// the `type` field of a [MonitoredResourceDescriptor][google.api.MonitoredResourceDescriptor] object. For
	// example, the type of a Cloud SQL database is `"cloudsql_database"`.
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Required. Values for all of the labels listed in the associated monitored
	// resource descriptor. For example, Cloud SQL databases use the labels
	// `"database_id"` and `"zone"`.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MonitoredResource) Reset()                    { *m = MonitoredResource{} }
func (m *MonitoredResource) String() string            { return proto.CompactTextString(m) }
func (*MonitoredResource) ProtoMessage()               {}
func (*MonitoredResource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MonitoredResource) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterType((*MonitoredResourceDescriptor)(nil), "google.api.MonitoredResourceDescriptor")
	proto.RegisterType((*MonitoredResource)(nil), "google.api.MonitoredResource")
}

func init() {
	proto.RegisterFile("google.golang.org/genproto/googleapis/api/monitoredres/monitored_resource.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x92, 0xcb, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0x49, 0x6f, 0xe0, 0x89, 0x88, 0x0e, 0x22, 0xa1, 0xdd, 0xd4, 0xae, 0xea, 0x26, 0x01,
	0x0b, 0xe2, 0x65, 0x65, 0xd1, 0x9d, 0x97, 0xd2, 0xa5, 0x9b, 0x32, 0x6d, 0x87, 0x61, 0x70, 0x3a,
	0x67, 0x98, 0x49, 0x85, 0x3c, 0x90, 0xcf, 0xe1, 0xab, 0xc9, 0x5c, 0x6a, 0x0a, 0x71, 0x21, 0x6e,
	0xc2, 0x99, 0xff, 0xfc, 0xf3, 0xfd, 0xe7, 0x24, 0x81, 0x57, 0x8e, 0xc8, 0x25, 0xcb, 0x39, 0x4a,
	0xaa, 0x78, 0x8e, 0x86, 0x17, 0x9c, 0x29, 0x6d, 0xb0, 0xc4, 0x22, 0xb4, 0xa8, 0x16, 0xb6, 0xa0,
	0x5a, 0x14, 0x1b, 0x54, 0xa2, 0x44, 0xc3, 0xd6, 0x86, 0xd9, 0xfa, 0xb0, 0x30, 0xcc, 0xe2, 0xd6,
	0xac, 0x58, 0xee, 0x2f, 0x11, 0x88, 0x40, 0xaa, 0x45, 0xff, 0xee, 0xef, 0x70, 0x49, 0x97, 0x4c,
	0x86, 0x67, 0x00, 0x8d, 0xbe, 0x12, 0x18, 0x3c, 0xef, 0x52, 0xe6, 0x31, 0xe4, 0x81, 0xd9, 0x95,
	0x11, 0xba, 0x44, 0x43, 0x08, 0x74, 0x14, 0xdd, 0xb0, 0xac, 0x3b, 0x4c, 0xc6, 0x07, 0x73, 0x5f,
	0x3b, 0xad, 0xac, 0x34, 0xcb, 0x92, 0xa0, 0xb9, 0x9a, 0x9c, 0xc3, 0xe1, 0x5a, 0x58, 0x2d, 0x69,
	0xb5, 0xf0, 0xfe, 0x96, 0xef, 0xa5, 0x51, 0x7b, 0x71, 0xd7, 0x86, 0x90, 0xae, 0x23, 0x58, 0xa0,
	0xca, 0xda, 0xd1, 0x51, 0x4b, 0x64, 0x02, 0x3d, 0x3f, 0x9b, 0xcd, 0x3a, 0xc3, 0xf6, 0x38, 0xbd,
	0x1c, 0xe4, 0xf5, 0x9a, 0xf9, 0x93, 0xeb, 0xd4, 0x93, 0xcd, 0xa3, 0x75, 0xf4, 0x99, 0xc0, 0x49,
	0x63, 0x83, 0x5f, 0x67, 0xbc, 0xff, 0xc1, 0xb7, 0x3c, 0xfe, 0x62, 0x1f, 0xdf, 0x40, 0x84, 0x40,
	0xfb, 0xa8, 0x4a, 0x53, 0xed, 0xc2, 0xfa, 0x37, 0x90, 0xee, 0xc9, 0xe4, 0x18, 0xda, 0xef, 0xac,
	0x8a, 0x21, 0xae, 0x24, 0xa7, 0xd0, 0xfd, 0xa0, 0x72, 0xbb, 0x7b, 0x01, 0xe1, 0x70, 0xdb, 0xba,
	0x4e, 0xa6, 0x4b, 0x38, 0x5a, 0xe1, 0x66, 0x2f, 0x72, 0x7a, 0xd6, 0xc8, 0x9c, 0xb9, 0x6f, 0x32,
	0x4b, 0xde, 0xae, 0xfe, 0xf7, 0xbf, 0x2c, 0x7b, 0xde, 0x32, 0xf9, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x2e, 0x9c, 0xd7, 0xfb, 0x70, 0x02, 0x00, 0x00,
}
